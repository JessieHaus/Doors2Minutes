var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import contains from '@instructure/ui-utils/lib/dom/contains';
import ownerDocument from '@instructure/ui-utils/lib/dom/ownerDocument';
import addEventListener from '@instructure/ui-utils/lib/dom/addEventListener';
import uid from '@instructure/ui-utils/lib/uid';

import ScreenReaderFocusRegion from './ScreenReaderFocusRegion';
import KeyboardFocusRegion from './KeyboardFocusRegion';

/**
 * ---
 * category: utilities/a11y
 * ---
 * @module FocusRegion
 * Class for focus operations.
 * - Scoping focus within a given context (DOM node),
 * - Mark active element for focus later
 * - Return focus to the marked element
 */

var FocusRegion = function () {
  function FocusRegion(element, options) {
    var _this = this;

    _classCallCheck(this, FocusRegion);

    this._contextElement = null;
    this._preventCloseOnDocumentClick = false;
    this._listeners = [];
    this._setup = false;

    this.handleDismiss = function (event, documentClick) {
      _this._options.onDismiss(event, documentClick);
    };

    this.captureDocumentClick = function (event) {
      var target = event.target;


      _this._preventCloseOnDocumentClick = event.button !== 0 || contains(_this._contextElement, target);
    };

    this.handleDocumentClick = function (event) {
      if (_this._options.shouldCloseOnDocumentClick && !_this._preventCloseOnDocumentClick) {
        _this.handleDismiss(event, true);
      }
    };

    this._options = options || {
      shouldCloseOnDocumentClick: true,
      onDismiss: function onDismiss(event) {}
    };
    this._contextElement = element;
    this._screenReaderFocusRegion = new ScreenReaderFocusRegion(element, options);
    this._keyboardFocusRegion = new KeyboardFocusRegion(element, options);
    this._id = uid();
  }

  _createClass(FocusRegion, [{
    key: 'updateElement',
    value: function updateElement(element) {
      this._contextElement = element;
      if (this._keyboardFocusRegion) {
        this._keyboardFocusRegion.updateElement(element);
      }
      if (this._screenReaderFocusRegion) {
        this._screenReaderFocusRegion.updateElement(element);
      }
    }
  }, {
    key: 'setup',
    value: function setup() {
      if (!this._setup) {
        var doc = ownerDocument(this._contextElement);

        this._keyboardFocusRegion.setup();
        this._screenReaderFocusRegion.setup();

        if (this._options.shouldCloseOnDocumentClick) {
          this._listeners.push(addEventListener(doc, 'click', this.captureDocumentClick, true));
          this._listeners.push(addEventListener(doc, 'click', this.handleDocumentClick));
        }

        this._setup = true;
      }
    }
  }, {
    key: 'teardown',
    value: function teardown() {
      if (this._setup) {
        this._listeners.forEach(function (listener) {
          listener.remove();
        });
        this._listeners = [];

        this._keyboardFocusRegion.teardown();
        this._screenReaderFocusRegion.teardown();

        this._setup = false;
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this._keyboardFocusRegion.focus();
    }
  }, {
    key: 'blur',
    value: function blur() {
      this._keyboardFocusRegion.blur();
    }
  }, {
    key: 'id',
    get: function get() {
      return this._id;
    }
  }, {
    key: 'focused',
    get: function get() {
      return this._keyboardFocusRegion.focused;
    }
  }]);

  return FocusRegion;
}();

export { FocusRegion as default };