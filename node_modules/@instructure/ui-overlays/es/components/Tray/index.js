var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _dec3, _dec4, _class, _class2, _temp2;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import Dialog from '@instructure/ui-a11y/lib/components/Dialog';
import CloseButton from '@instructure/ui-buttons/lib/components/CloseButton';
import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';

import createChainedFunction from '@instructure/ui-utils/lib/createChainedFunction';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import deprecated from '@instructure/ui-utils/lib/react/deprecated';
import bidirectional from '@instructure/ui-i18n/lib/bidirectional';
import themeable from '@instructure/ui-themeable';

import Portal from '@instructure/ui-portal/lib/components/Portal';
import { mirrorHorizontalPlacement } from '@instructure/ui-layout/lib/utils/mirrorPlacement';

import Transition from '@instructure/ui-motion/lib/components/Transition';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.tx4IoBD {\n  background-color: ' + theme.background + ';\n  position: fixed;\n  overflow-y: auto;\n  overflow-x: hidden;\n  box-sizing: border-box;\n  z-index: ' + theme.zIndex + ';\n  max-width: 100vw;\n  max-height: 100vh;\n}\n\n.ioRk2Fk {\n  border-width: 0;\n  border-color: ' + theme.borderColor + ';\n  border-style: ' + theme.borderStyle + ';\n}\n\n._2ssxC4G {\n  box-shadow: ' + theme.boxShadow + ';\n}\n\n._16fNZWa,\n._3iZQr1F {\n  offset-inline-start: 0;\n  offset-inline-end: 0;\n}\n\n[dir="ltr"] ._16fNZWa,\n[dir="ltr"] ._3iZQr1F {\n  left: 0;\n  right: 0;\n}\n\n[dir="rtl"] ._16fNZWa,\n[dir="rtl"] ._3iZQr1F {\n  right: 0;\n  left: 0;\n}\n\n._251F-SL,\n._28y2cIg {\n  top: 0;\n  bottom: 0;\n}\n\n._251F-SL._3QYMcI9, ._28y2cIg._3QYMcI9 {\n    width: ' + theme.xSmallWidth + ';\n  }\n\n._251F-SL._3GWSKW1, ._28y2cIg._3GWSKW1 {\n    width: ' + theme.smallWidth + ';\n  }\n\n._251F-SL._83AVbEH, ._28y2cIg._83AVbEH {\n    width: ' + theme.mediumWidth + ';\n  }\n\n._251F-SL._1z3uXF9, ._28y2cIg._1z3uXF9 {\n    width: ' + theme.largeWidth + ';\n  }\n\n._13_gZOi {\n  left: 0; /* stylelint-disable-line property-blacklist */\n  right: 0; /* stylelint-disable-line property-blacklist */\n  top: 0;\n  bottom: 0;\n}\n\n._251F-SL {\n  offset-inline-start: 0;\n  offset-inline-end: auto;\n}\n\n[dir="ltr"] ._251F-SL {\n  left: 0;\n  right: auto;\n}\n\n[dir="rtl"] ._251F-SL {\n  right: 0;\n  left: auto;\n}\n\n._251F-SL.ioRk2Fk {\n    border-inline-end-width: ' + theme.borderWidth + ';\n  }\n\n[dir="ltr"] ._251F-SL.ioRk2Fk {\n    border-right-width: ' + theme.borderWidth + ';\n  }\n\n[dir="rtl"] ._251F-SL.ioRk2Fk {\n    border-left-width: ' + theme.borderWidth + ';\n  }\n\n._28y2cIg {\n  offset-inline-end: 0;\n  offset-inline-start: auto;\n}\n\n[dir="ltr"] ._28y2cIg {\n  right: 0;\n  left: auto;\n}\n\n[dir="rtl"] ._28y2cIg {\n  left: 0;\n  right: auto;\n}\n\n._28y2cIg.ioRk2Fk {\n    border-inline-start-width: ' + theme.borderWidth + ';\n  }\n\n[dir="ltr"] ._28y2cIg.ioRk2Fk {\n    border-left-width: ' + theme.borderWidth + ';\n  }\n\n[dir="rtl"] ._28y2cIg.ioRk2Fk {\n    border-right-width: ' + theme.borderWidth + ';\n  }\n\n._16fNZWa {\n  top: 0;\n}\n\n._16fNZWa.ioRk2Fk {\n    border-bottom-width: ' + theme.borderWidth + ';\n  }\n\n._3iZQr1F {\n  bottom: 0;\n}\n\n._3iZQr1F.ioRk2Fk {\n    border-top-width: ' + theme.borderWidth + ';\n  }\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': 'tx4IoBD',
  'border': 'ioRk2Fk',
  'shadow': '_2ssxC4G',
  'placement--top': '_16fNZWa',
  'placement--bottom': '_3iZQr1F',
  'placement--start': '_251F-SL',
  'placement--end': '_28y2cIg',
  'x-small': '_3QYMcI9',
  'small': '_3GWSKW1',
  'medium': '_83AVbEH',
  'large': '_1z3uXF9',
  'placement--center': '_13_gZOi'
};

import theme from './theme';

/**
---
category: components/dialogs
---
**/
var Tray = (_dec = deprecated('3.0.0', {
  onRequestClose: 'onDismiss',
  isOpen: 'open',
  onReady: 'onOpen',
  onAfterOpen: 'onOpen',
  getDefaultFocusElement: 'defaultFocusElement',
  trapFocus: 'shouldContainFocus'
}), _dec2 = deprecated('5.0.0', {
  closeButtonLabel: true,
  closeButtonRef: true,
  closeButtonVariant: true,
  applicationElement: true
}), _dec3 = bidirectional(), _dec4 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_temp2 = _class2 = function (_Component) {
  _inherits(Tray, _Component);

  function Tray() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tray);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tray.__proto__ || Object.getPrototypeOf(Tray)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      transitioning: false
    }, _this.handleTransitionComplete = function () {
      _this.setState({ transitioning: false });
    }, _this.handlePortalOpen = function (DOMNode) {
      // We apply the theme here because now we have a DOM node (provided by Portal)
      _this.applyTheme(DOMNode);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tray, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.open !== prevProps.open) {
        this.setState({ transitioning: true });
      }
    }
  }, {
    key: 'renderCloseButton',
    value: function renderCloseButton() {
      var _this2 = this;

      return this.props.closeButtonLabel ? React.createElement(
        CloseButton,
        {
          placement: this.props.placement === 'end' ? 'start' : 'end',
          offset: 'x-small',
          variant: this.props.closeButtonVariant,
          buttonRef: function buttonRef(el) {
            _this2._closeButton = el;
            if (typeof _this2.props.closeButtonRef === 'function') {
              _this2.props.closeButtonRef(el);
            }
          },
          onClick: this.props.onDismiss
        },
        this.props.closeButtonLabel
      ) : null;
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      return React.createElement(
        'div',
        null,
        this.renderCloseButton(),
        this.props.children
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          label = _props.label,
          closeButtonLabel = _props.closeButtonLabel,
          children = _props.children,
          size = _props.size,
          placement = _props.placement,
          open = _props.open,
          defaultFocusElement = _props.defaultFocusElement,
          contentRef = _props.contentRef,
          closeButtonRef = _props.closeButtonRef,
          shouldContainFocus = _props.shouldContainFocus,
          shouldReturnFocus = _props.shouldReturnFocus,
          shouldCloseOnDocumentClick = _props.shouldCloseOnDocumentClick,
          onOpen = _props.onOpen,
          onClose = _props.onClose,
          onDismiss = _props.onDismiss,
          mountNode = _props.mountNode,
          insertAt = _props.insertAt,
          liveRegion = _props.liveRegion,
          onEnter = _props.onEnter,
          onEntering = _props.onEntering,
          onEntered = _props.onEntered,
          onExit = _props.onExit,
          onExiting = _props.onExiting,
          onExited = _props.onExited,
          onTransition = _props.onTransition,
          closeButtonVariant = _props.closeButtonVariant,
          border = _props.border,
          shadow = _props.shadow,
          props = _objectWithoutProperties(_props, ['label', 'closeButtonLabel', 'children', 'size', 'placement', 'open', 'defaultFocusElement', 'contentRef', 'closeButtonRef', 'shouldContainFocus', 'shouldReturnFocus', 'shouldCloseOnDocumentClick', 'onOpen', 'onClose', 'onDismiss', 'mountNode', 'insertAt', 'liveRegion', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited', 'onTransition', 'closeButtonVariant', 'border', 'shadow']);

      return React.createElement(
        Portal,
        {
          open: open || this.state.transitioning,
          onOpen: this.handlePortalOpen,
          insertAt: insertAt,
          mountNode: mountNode
        },
        React.createElement(
          Transition,
          {
            'in': open,
            type: this.transition,
            onTransition: onTransition,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: createChainedFunction(this.handleTransitionComplete, onEntered, onOpen),
            onExit: onExit,
            onExiting: onExiting,
            onExited: createChainedFunction(this.handleTransitionComplete, onExited, onClose),
            transitionOnMount: true,
            transitionEnter: true,
            transitionExit: true
          },
          React.createElement(
            'span',
            Object.assign({}, omitProps(props, Tray.propTypes), {
              className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles.border, border), _defineProperty(_classnames, styles.shadow, shadow), _defineProperty(_classnames, styles[size], true), _defineProperty(_classnames, styles['placement--' + this.props.placement], true), _classnames)),
              ref: contentRef
            }),
            this.state.transitioning ? this.renderContent() : React.createElement(
              Dialog,
              {
                label: label,
                defaultFocusElement: this.defaultFocusElement,
                open: true,
                shouldContainFocus: shouldContainFocus,
                shouldReturnFocus: shouldReturnFocus,
                shouldCloseOnDocumentClick: shouldCloseOnDocumentClick,
                shouldCloseOnEscape: true,
                liveRegion: liveRegion,
                onDismiss: onDismiss
              },
              this.renderContent()
            )
          )
        )
      );
    }
  }, {
    key: 'placement',
    get: function get() {
      var placement = this.props.placement;

      return this.rtl ? mirrorHorizontalPlacement(placement, ' ') : placement;
    }
  }, {
    key: 'direction',
    get: function get() {
      switch (this.placement) {
        case 'top':
          return 'up';
        case 'bottom':
          return 'down';
        case 'end':
          return 'right';
        default:
          // start
          return 'left';
      }
    }
  }, {
    key: 'transition',
    get: function get() {
      return 'slide-' + this.direction;
    }
  }, {
    key: 'defaultFocusElement',
    get: function get() {
      var _this3 = this;

      return this.props.defaultFocusElement || function () {
        return _this3._closeButton;
      };
    }
  }]);

  Tray.displayName = 'Tray'
  ;
  return Tray;
}(Component), _class2.propTypes = {
  label: PropTypes.string.isRequired,

  /**
   * An accessible label for the close button. The close button won't display without this label.
   */
  closeButtonLabel: PropTypes.string,

  children: PropTypes.node,

  /*
   * The size (width) of the `<Tray />` when placement is `start` or `end`
   */
  size: PropTypes.oneOf(['x-small', 'small', 'medium', 'large']),

  /**
  * Placement to determine where the `<Tray />` should display in the viewport
  */
  placement: PropTypes.oneOf(['top', 'bottom', 'start', 'end']),

  /**
   * Whether or not the `<Tray />` is open
   */
  open: PropTypes.bool,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   *
   * A function that returns a reference to the content element
   */
  contentRef: PropTypes.func,

  /**
   * A function that returns a reference to the close button element
   */
  closeButtonRef: PropTypes.func,

  /**
   * Whether focus should be contained within the `<Tray/>` when it is open
   */
  shouldContainFocus: PropTypes.bool,

  /**
   * Whether focus should be restored when the `<Tray/>` is closed
   */
  shouldReturnFocus: PropTypes.bool,

  /**
   * Should the `<Tray />` hide when clicks occur outside the content
   */
  shouldCloseOnDocumentClick: PropTypes.bool,

  /**
   * Callback fired when `<Tray />` content has been mounted in the DOM
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when `<Tray />` has been unmounted from the DOM
   */
  onClose: PropTypes.func,

  /**
   * Callback fired when the `<Tray />` is requesting to be closed
   */
  onDismiss: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Tray />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([CustomPropTypes.element, PropTypes.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Tray />` is open
   */
  liveRegion: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.func]),

  /**
   * Callback fired when the <Tray /> transitions in/out
   */
  onTransition: PropTypes.func,
  /**
   * Callback fired before the <Tray /> transitions in
   */
  onEnter: PropTypes.func,
  /**
   * Callback fired as the <Tray /> begins to transition in
   */
  onEntering: PropTypes.func,
  /**
   * Callback fired after the <Tray /> finishes transitioning in
   */
  onEntered: PropTypes.func,
  /**
   * Callback fired right before the <Tray /> transitions out
   */
  onExit: PropTypes.func,
  /**
   * Callback fired as the <Tray /> begins to transition out
   */
  onExiting: PropTypes.func,
  /**
   * Callback fired after the <Tray /> finishes transitioning out
   */
  onExited: PropTypes.func,

  closeButtonVariant: PropTypes.oneOf(['icon', 'icon-inverse']),

  /**
   * Should the `<Tray />` have a border
   */
  border: PropTypes.bool,

  /**
   * Should the `<Tray />` have a box shadow
   */
  shadow: PropTypes.bool
}, _class2.defaultProps = {
  open: false,
  onOpen: function onOpen(event) {},
  onClose: function onClose(event) {},
  onDismiss: function onDismiss(event) {},
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  mountNode: null,
  insertAt: 'bottom',
  liveRegion: null,
  contentRef: function contentRef(el) {},
  shouldCloseOnDocumentClick: false,
  shouldContainFocus: true,
  shouldReturnFocus: true,
  defaultFocusElement: null,
  size: 'small',
  placement: 'start',
  shadow: true,
  border: false,
  children: null
}, _temp2)) || _class) || _class) || _class) || _class);


export default Tray;