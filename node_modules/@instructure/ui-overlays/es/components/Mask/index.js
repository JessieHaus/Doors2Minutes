var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import noScroll from 'no-scroll';

import themeable from '@instructure/ui-themeable';
import ensureSingleChild from '@instructure/ui-utils/lib/react/ensureSingleChild';
import deprecated from '@instructure/ui-utils/lib/react/deprecated';
import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.XYszOeG {\n  box-sizing: border-box;\n  background: ' + theme.background + ';\n  position: absolute;\n  top: 0;\n  left: 0; /* stylelint-disable-line property-blacklist */\n  right: 0; /* stylelint-disable-line property-blacklist */\n  bottom: 0;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  outline: none;\n  border: ' + theme.borderWidth + ' solid ' + theme.borderColor + ';\n  border-radius: ' + theme.borderRadius + ';\n\n  z-index: ' + theme.zIndex + ';\n}\n\n  .XYszOeG:focus {\n    border-color: ' + theme.focusBorderColor + ';\n  }\n\n._3ZItact {\n  position: fixed;\n}\n\n._3xtsZzQ {\n  align-items: flex-start;\n}\n\n.NWfz5cS {\n  align-items: center;\n}\n\n.RMqnXVA {\n  align-items: flex-end;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': 'XYszOeG',
  'fullscreen': '_3ZItact',
  'top': '_3xtsZzQ',
  'center': 'NWfz5cS',
  'bottom': 'RMqnXVA'
};

import theme from './theme';

/**
---
category: components/utilities
---
**/
var Mask = (_dec = deprecated('5.0.0', {
  fullScreen: 'fullscreen'
}), _dec2 = themeable(theme, styles), _dec(_class = _dec2(_class = (_temp = _class2 = function (_Component) {
  _inherits(Mask, _Component);

  function Mask() {
    _classCallCheck(this, Mask);

    return _possibleConstructorReturn(this, (Mask.__proto__ || Object.getPrototypeOf(Mask)).apply(this, arguments));
  }

  _createClass(Mask, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.fullscreen || this.props.fullScreen) {
        // eslint-disable-line react/prop-types
        noScroll.on();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.fullscreen || this.props.fullScreen) {
        // eslint-disable-line react/prop-types
        noScroll.off();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this,
          _classnames;

      var content = ensureSingleChild(this.props.children, {
        ref: function ref(el) {
          _this2._content = el;
        }
      });

      var classes = classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles[this.props.placement], true), _defineProperty(_classnames, styles.fullscreen, this.props.fullscreen || this.props.fullScreen), _classnames));

      var props = omitProps(this.props, Mask.propTypes);

      if (typeof this.props.onClick === 'function') {
        props = Object.assign({}, props, {
          onClick: this.props.onClick,
          tabIndex: -1
        });
      }

      return React.createElement(
        'span',
        Object.assign({}, props, { className: classes }),
        content
      );
    }
  }]);

  Mask.displayName = 'Mask'
  ;
  return Mask;
}(Component), _class2.propTypes = {
  onDismiss: PropTypes.func,
  placement: PropTypes.oneOf(['top', 'center', 'bottom']),
  fullscreen: PropTypes.bool,
  children: PropTypes.node,
  onClick: PropTypes.func
}, _class2.defaultProps = {
  placement: 'center',
  fullscreen: false
}, _temp)) || _class) || _class);


export default Mask;