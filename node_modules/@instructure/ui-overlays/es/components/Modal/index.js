var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _dec3, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import Dialog from '@instructure/ui-a11y/lib/components/Dialog';
import CloseButton from '@instructure/ui-buttons/lib/components/CloseButton';

import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import createChainedFunction from '@instructure/ui-utils/lib/createChainedFunction';
import deprecated from '@instructure/ui-utils/lib/react/deprecated';

import Transition from '@instructure/ui-motion/lib/components/Transition';
import Portal from '@instructure/ui-portal/lib/components/Portal';

import themeable from '@instructure/ui-themeable';
import Browser from '@instructure/ui-utils/lib/Browser';

import Mask from '../Mask';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._2mJocMH {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  box-sizing: border-box;\n  background: ' + theme.background + ';\n  box-shadow: ' + theme.boxShadow + ';\n  border: 0.0625rem solid ' + theme.borderColor + ';\n  border-radius: ' + theme.borderRadius + ';\n}\n\n  ._2mJocMH._2xJrbLn {\n    display: block;\n    overflow: auto;\n  }\n\n._2JWUahi,\n._15cEmCw,\n._2iKCgmw,\n.CMuIWs- {\n  max-width: 95vw;\n  max-height: 95vh;\n}\n\n._2JWUahi._2xJrbLn, ._15cEmCw._2xJrbLn, ._2iKCgmw._2xJrbLn, .CMuIWs-._2xJrbLn {\n    max-height: none;\n  }\n\n._2JWUahi {\n  flex: 0 1 auto;\n  min-width: ' + theme.autoMinWidth + ';\n}\n\n._15cEmCw {\n  flex: 0 1 ' + theme.smallMaxWidth + ';\n}\n\n._2iKCgmw {\n  flex: 0 1 ' + theme.mediumMaxWidth + ';\n}\n\n.CMuIWs- {\n  flex: 0 1 ' + theme.largeMaxWidth + ';\n}\n\n.QarAp5s {\n  box-sizing: border-box;\n  position: fixed;\n  top: 0;\n  left: 0; /* stylelint-disable-line property-blacklist */\n  right: 0; /* stylelint-disable-line property-blacklist */\n  bottom: 0;\n  overflow: auto;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  z-index: ' + theme.zIndex + ';\n}\n\n._2UD8G_N {\n  flex: 1;\n  width: 100%;\n  height: 100%;\n  box-shadow: none;\n  border: none;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'content': '_2mJocMH',
  'ie11': '_2xJrbLn',
  'auto': '_2JWUahi',
  'small': '_15cEmCw',
  'medium': '_2iKCgmw',
  'large': 'CMuIWs-',
  'layout': 'QarAp5s',
  'fullscreen': '_2UD8G_N'
};

import theme from './theme';

import ModalHeader from './ModalHeader';
import ModalBody from './ModalBody';
import ModalFooter from './ModalFooter';

/**
---
category: components/dialogs
---
**/

var Modal = (_dec = deprecated('3.0.0', {
  onRequestClose: 'onDismiss',
  isOpen: 'open',
  onReady: 'onOpen',
  onAfterOpen: 'onOpen',
  getDefaultFocusElement: 'defaultFocusElement',
  closeButtonVariant: true,
  padding: true
}), _dec2 = deprecated('5.0.0', {
  closeButtonLabel: true,
  closeButtonRef: true,
  applicationElement: true,
  shouldCloseOnOverlayClick: 'shouldCloseOnDocumentClick'
}), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = function (_Component) {
  _inherits(Modal, _Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    _this._timeouts = [];

    _this.handlePortalOpen = function (DOMNode) {
      _this.applyTheme(DOMNode);
      _this._timeouts.push(setTimeout(function () {
        if (_this._isMounted) {
          _this.setState({
            open: true
          });
        }
      }));
    };

    _this.handleTransitionExited = function () {
      _this.setState({
        open: false,
        transitioning: false
      });
    };

    _this.state = {
      open: props.open,
      transitioning: false
    };
    return _this;
  }

  _createClass(Modal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.open && !nextProps.open) {
        // closing
        this.setState({
          transitioning: this.props.transition !== null
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: 'renderCloseButton',
    value: function renderCloseButton() {
      var _this2 = this;

      return this.props.closeButtonLabel ? React.createElement(
        CloseButton,
        {
          buttonRef: function buttonRef(el) {
            _this2._closeButton = el;
            if (typeof _this2.props.closeButtonRef === 'function') {
              _this2.props.closeButtonRef(el);
            }
          },
          placement: 'end',
          offset: 'medium',
          onClick: this.props.onDismiss
        },
        this.props.closeButtonLabel
      ) : null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames,
          _this3 = this;

      var _props = this.props,
          label = _props.label,
          closeButtonLabel = _props.closeButtonLabel,
          children = _props.children,
          size = _props.size,
          open = _props.open,
          onOpen = _props.onOpen,
          onClose = _props.onClose,
          onDismiss = _props.onDismiss,
          contentRef = _props.contentRef,
          closeButtonRef = _props.closeButtonRef,
          mountNode = _props.mountNode,
          insertAt = _props.insertAt,
          liveRegion = _props.liveRegion,
          transition = _props.transition,
          onEnter = _props.onEnter,
          onEntering = _props.onEntering,
          onEntered = _props.onEntered,
          onExit = _props.onExit,
          onExiting = _props.onExiting,
          onExited = _props.onExited,
          defaultFocusElement = _props.defaultFocusElement,
          shouldReturnFocus = _props.shouldReturnFocus,
          shouldCloseOnDocumentClick = _props.shouldCloseOnDocumentClick,
          shouldCloseOnOverlayClick = _props.shouldCloseOnOverlayClick,
          props = _objectWithoutProperties(_props, ['label', 'closeButtonLabel', 'children', 'size', 'open', 'onOpen', 'onClose', 'onDismiss', 'contentRef', 'closeButtonRef', 'mountNode', 'insertAt', 'liveRegion', 'transition', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited', 'defaultFocusElement', 'shouldReturnFocus', 'shouldCloseOnDocumentClick', 'shouldCloseOnOverlayClick']);

      var ie11 = Browser.msie && Browser.version > 10;

      var dialog = React.createElement(
        Dialog,
        Object.assign({}, omitProps(props, Modal.propTypes), {
          onDismiss: onDismiss,
          label: this.props.label,
          defaultFocusElement: this.defaultFocusElement,
          shouldCloseOnDocumentClick: typeof shouldCloseOnOverlayClick === 'undefined' ? shouldCloseOnDocumentClick : shouldCloseOnOverlayClick,
          shouldCloseOnEscape: true,
          shouldContainFocus: true,
          shouldReturnFocus: shouldReturnFocus,
          liveRegion: liveRegion,
          open: this.state.open,
          className: classnames((_classnames = {}, _defineProperty(_classnames, styles.content, true), _defineProperty(_classnames, styles[size], true), _defineProperty(_classnames, styles.ie11, ie11), _classnames)),
          ref: function ref(el) {
            _this3._content = el;
            if (typeof contentRef === 'function') {
              contentRef(el);
            }
          }
        }),
        this.renderCloseButton(),
        children
      );

      return React.createElement(
        Portal,
        {
          mountNode: mountNode,
          insertAt: insertAt,
          open: open || this.state.transitioning,
          onOpen: createChainedFunction(this.handlePortalOpen, onOpen),
          onClose: onClose
        },
        React.createElement(
          Transition,
          {
            'in': open,
            transitionOnMount: true,
            unmountOnExit: true,
            type: transition,
            onEnter: onEnter,
            onEntering: onEntering,
            onEntered: onEntered,
            onExit: onExit,
            onExiting: onExiting,
            onExited: createChainedFunction(this.handleTransitionExited, onExited)
          },
          size === 'fullscreen' ? React.createElement(
            'span',
            { className: styles.layout },
            dialog
          ) : React.createElement(
            Mask,
            {
              placement: ie11 ? 'top' : 'center',
              fullscreen: true
            },
            dialog
          )
        )
      );
    }
  }, {
    key: 'defaultFocusElement',
    get: function get() {
      var _this4 = this;

      return this.props.defaultFocusElement || function () {
        return _this4._closeButton;
      };
    }
  }]);

  Modal.displayName = 'Modal'
  ;
  return Modal;
}(Component), _class2.propTypes = {
  /**
   * An accessible label for the `<Modal />` content
   */
  label: PropTypes.string.isRequired,

  /**
   * An accessible label for the close button. The close button won't display without this label.
   */
  closeButtonLabel: PropTypes.string,

  /**
   * The children to be rendered within the `<Modal />`
   */
  children: CustomPropTypes.Children.enforceOrder([ModalHeader, ModalBody, ModalFooter], [ModalHeader, ModalBody], [ModalBody, ModalFooter], [ModalBody]),

  /*
   * The size of the `<Modal />` content
   */
  size: PropTypes.oneOf(['auto', 'small', 'medium', 'large', 'fullscreen']),

  /**
   * Whether or not the `<Modal />` is open
   */
  open: PropTypes.bool,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),

  /**
   * Whether focus should be returned to the trigger when the `<Modal/>` is closed
   */
  shouldReturnFocus: PropTypes.bool,

  /**
   * Whether the `<Modal/>` should request close when the document is clicked
   */
  shouldCloseOnDocumentClick: PropTypes.bool,

  /**
   * Callback fired when `<Modal />` content has been mounted in the DOM
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when `<Modal />` has been unmounted from the DOM
   */
  onClose: PropTypes.func,

  /**
   * Callback fired when the `<Modal />` is requesting to be closed
   */
  onDismiss: PropTypes.func,

  /**
   *
   * A function that returns a reference to the content element
   */
  contentRef: PropTypes.func,

  /**
   *
   * A function that returns a reference to the close button element
   */
  closeButtonRef: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Modal />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([CustomPropTypes.element, PropTypes.func]),
  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Modal />` is open
   */
  liveRegion: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.func]),

  transition: Transition.propTypes.type,

  /**
   * Callback fired before the <Modal /> transitions in
   */
  onEnter: PropTypes.func,
  /**
   * Callback fired as the <Modal /> begins to transition in
   */
  onEntering: PropTypes.func,
  /**
   * Callback fired after the <Modal /> finishes transitioning in
   */
  onEntered: PropTypes.func,
  /**
   * Callback fired right before the <Modal /> transitions out
   */
  onExit: PropTypes.func,
  /**
   * Callback fired as the <Modal /> begins to transition out
   */
  onExiting: PropTypes.func,
  /**
   * Callback fired after the <Modal /> finishes transitioning out
   */
  onExited: PropTypes.func
}, _class2.defaultProps = {
  open: false,
  size: 'auto',
  transition: 'fade',
  onOpen: function onOpen(event) {},
  onClose: function onClose(event) {},
  onDismiss: function onDismiss(event) {},
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  mountNode: null,
  insertAt: 'bottom',
  liveRegion: null,
  contentRef: function contentRef(el) {},
  shouldCloseOnDocumentClick: true,
  shouldReturnFocus: true,
  defaultFocusElement: null,
  children: null
}, _temp)) || _class) || _class) || _class);
export { Modal as default };


export { default as ModalHeader } from './ModalHeader';
export { default as ModalBody } from './ModalBody';
export { default as ModalFooter } from './ModalFooter';