var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import getElementType from '@instructure/ui-utils/lib/react/getElementType';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import LayoutPropTypes from '@instructure/ui-layout/lib/utils/LayoutPropTypes';
import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import ensureSingleChild from '@instructure/ui-utils/lib/react/ensureSingleChild';
import generateElementId from '@instructure/ui-utils/lib/dom/generateElementId';
import themeable from '@instructure/ui-themeable';

import Popover, { PopoverTrigger, PopoverContent } from '../Popover';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._1-1Be03 {\n  font-family: ' + theme.fontFamily + ';\n  font-weight: ' + theme.fontWeight + ';\n  box-sizing: border-box;\n  display: block;\n}\n\n._3s5W1Nr {\n  font-size: ' + theme.smallFontSize + ';\n  padding: ' + theme.smallPadding + ';\n}\n\n._8RKQcke {\n  font-size: ' + theme.mediumFontSize + ';\n  padding: ' + theme.mediumPadding + ';\n}\n\n.Whw3920 {\n  font-size: ' + theme.largeFontSize + ';\n  padding: ' + theme.largePadding + ';\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': '_1-1Be03',
  'small': '_3s5W1Nr',
  'medium': '_8RKQcke',
  'large': 'Whw3920'
};

import theme from './theme';

/**
---
category: components/dialogs
---
**/
var Tooltip = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(Tooltip, _Component);

  function Tooltip(props) {
    _classCallCheck(this, Tooltip);

    var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this));

    _this._id = generateElementId('Tooltip');
    return _this;
  }

  _createClass(Tooltip, [{
    key: 'renderTrigger',
    value: function renderTrigger() {
      if (this.props.as) {
        var Trigger = getElementType(Tooltip, this.props);
        var props = omitProps(this.props, Tooltip.propTypes);
        return React.createElement(
          Trigger,
          props,
          this.props.children
        );
      } else {
        return ensureSingleChild(this.props.children);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var trigger = this.renderTrigger();
      return React.createElement(
        Popover,
        {
          on: this.props.on,
          shouldRenderOffscreen: true,
          shouldReturnFocus: false,
          placement: this.props.placement,
          variant: this.props.variant,
          mountNode: this.props.mountNode
        },
        React.createElement(
          PopoverTrigger,
          {
            'aria-describedby': this._id,
            'aria-controls': this._id
          },
          trigger
        ),
        React.createElement(
          PopoverContent,
          null,
          React.createElement(
            'span',
            {
              id: this._id,
              className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles[this.props.size], this.props.size), _classnames)),
              role: 'tooltip'
            },
            this.props.tip
          )
        )
      );
    }
  }]);

  Tooltip.displayName = 'Tooltip'
  ;
  return Tooltip;
}(Component), _class2.propTypes = {
  tip: PropTypes.node.isRequired,
  children: PropTypes.node.isRequired,
  /**
  * the element type to render as (assumes a single child if 'as' is undefined)
  */
  as: CustomPropTypes.elementType,
  /**
   * The action that causes the Content to display (`click`, `hover`, `focus`)
   */
  on: PropTypes.oneOfType([PropTypes.oneOf(['click', 'hover', 'focus']), PropTypes.arrayOf(PropTypes.oneOf(['click', 'hover', 'focus']))]),
  variant: PropTypes.oneOf(['default', 'inverse']),
  placement: LayoutPropTypes.placement,
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Tooltip />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([CustomPropTypes.element, PropTypes.func])
}, _class2.defaultProps = {
  variant: 'default',
  placement: 'top',
  size: 'small',
  mountNode: null
}, _temp)) || _class);
export { Tooltip as default };