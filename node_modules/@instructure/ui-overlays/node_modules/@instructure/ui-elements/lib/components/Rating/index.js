'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp; /*
                                   * The MIT License (MIT)
                                   *
                                   * Copyright (c) 2015 - present Instructure, Inc.
                                   *
                                   * Permission is hereby granted, free of charge, to any person obtaining a copy
                                   * of this software and associated documentation files (the "Software"), to deal
                                   * in the Software without restriction, including without limitation the rights
                                   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                   * copies of the Software, and to permit persons to whom the Software is
                                   * furnished to do so, subject to the following conditions:
                                   *
                                   * The above copyright notice and this permission notice shall be included in all
                                   * copies or substantial portions of the Software.
                                   *
                                   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                   * SOFTWARE.
                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _View = require('@instructure/ui-layout/lib/components/View');

var _View2 = _interopRequireDefault(_View);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _uiThemeable = require('@instructure/ui-themeable');

var _uiThemeable2 = _interopRequireDefault(_uiThemeable);

var _ThemeablePropTypes = require('@instructure/ui-themeable/lib/utils/ThemeablePropTypes');

var _ThemeablePropTypes2 = _interopRequireDefault(_ThemeablePropTypes);

var _RatingIcon = require('./RatingIcon');

var _RatingIcon2 = _interopRequireDefault(_RatingIcon);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._1O20l7P {\n  line-height: 1;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': '_1O20l7P'
};


/**
---
category: components
---
**/
var Rating = (_dec = (0, _uiThemeable2.default)(_theme2.default, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(Rating, _Component);

  function Rating() {
    _classCallCheck(this, Rating);

    return _possibleConstructorReturn(this, (Rating.__proto__ || Object.getPrototypeOf(Rating)).apply(this, arguments));
  }

  _createClass(Rating, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          iconCount = _props.iconCount,
          animateFill = _props.animateFill,
          size = _props.size,
          margin = _props.margin,
          formatValueText = _props.formatValueText;


      var classes = _defineProperty({}, styles.root, true);

      var valueText = formatValueText(this.filled, iconCount);

      return _react2.default.createElement(
        _View2.default,
        Object.assign({}, (0, _passthroughProps.omitProps)(this.props, Object.assign({}, Rating.propTypes, _View2.default.propTypes)), {
          className: (0, _classnames2.default)(classes),
          margin: margin,
          role: 'progressbar',
          'aria-valuetext': valueText,
          'aria-valuenow': this.filled,
          'aria-valuemax': this.props.iconCount,
          title: this.props.label,
          display: 'inline-block'
        }),
        [].concat(_toConsumableArray(Array(this.filled))).map(function (x, i) {
          return _react2.default.createElement(_RatingIcon2.default, {
            key: i + 1,
            filled: true,
            animateFill: animateFill,
            animationDelay: animateFill ? (i + 1) * 200 : null,
            size: size
          });
        }),
        [].concat(_toConsumableArray(Array(this.empty))).map(function (x, i) {
          return _react2.default.createElement(_RatingIcon2.default, {
            key: i + 1,
            size: size
          });
        })
      );
    }
  }, {
    key: 'filled',
    get: function get() {
      var _props2 = this.props,
          valueNow = _props2.valueNow,
          iconCount = _props2.iconCount,
          valueMax = _props2.valueMax;

      // prevent divide by zero errors

      var max = valueMax > 0 ? valueMax : iconCount;

      var filledIcons = Math.round(valueNow * iconCount / max);

      // Handle edge case where valueNow is greater than valueMax
      if (filledIcons > iconCount) {
        return iconCount;
      } else {
        return filledIcons;
      }
    }
  }, {
    key: 'empty',
    get: function get() {
      return this.props.iconCount - this.filled;
    }
  }]);

  Rating.displayName = 'Rating'
  ;
  return Rating;
}(_react.Component), _class2.propTypes = {
  /**
  * A label is required for accessibility
  */
  label: _propTypes2.default.string.isRequired,
  /**
  * A function that returns the current value formatted for screen readers
  */
  formatValueText: _propTypes2.default.func,
  /**
  * Choose from a 0-3 or 0-5 rating system
  */
  iconCount: _propTypes2.default.oneOf([3, 5]),
  /**
  * Choose from different rating icon sizes
  */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  /**
  * The maximum rating (defaults to iconCount)
  */
  valueMax: _propTypes2.default.number,
  /**
  * The current rating
  */
  valueNow: _propTypes2.default.number,
  /**
  * Set to make the icons animate when they become filled
  */
  animateFill: _propTypes2.default.bool,
  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: _ThemeablePropTypes2.default.spacing
}, _class2.defaultProps = {
  animateFill: false,
  formatValueText: function formatValueText(filled, iconCount) {
    return filled + ' / ' + iconCount;
  },
  iconCount: 3,
  size: 'medium',
  valueNow: 0
}, _temp)) || _class);
exports.default = Rating;