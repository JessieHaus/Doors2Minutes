var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import SVGIcon from '@instructure/ui-svg-images/lib/components/SVGIcon';

var IconTextarea = (_temp = _class = function (_Component) {
  _inherits(IconTextarea, _Component);

  function IconTextarea() {
    _classCallCheck(this, IconTextarea);

    return _possibleConstructorReturn(this, (IconTextarea.__proto__ || Object.getPrototypeOf(IconTextarea)).apply(this, arguments));
  }

  _createClass(IconTextarea, [{
    key: 'render',
    value: function render() {

      return React.createElement(
        SVGIcon,
        Object.assign({}, this.props, {
          name: 'IconTextarea',
          viewBox: '0 0 1920 1920',

          bidirectional: true

        }),
        React.createElement('path', { d: 'M480 660h960V540H480v120zm0 360h720V900H480v120zm-60 810H300c0-231.6 188.4-420 420-420h1080V210H120v1620H0V90h1920v1440H720c-165.36 0-300 134.64-300 300', fillRule: 'evenodd', stroke: 'none', strokeWidth: '1' })
      );
    }
  }]);

  IconTextarea.displayName = 'IconTextarea'
  ;
  return IconTextarea;
}(Component), _class.glyphName = 'textarea', _class.variant = 'Line', _class.propTypes = Object.assign({}, SVGIcon.propTypes), _temp);
export { IconTextarea as default };