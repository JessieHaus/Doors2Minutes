'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * The MIT License (MIT)
                    *
                    * Copyright (c) 2015 - present Instructure, Inc.
                    *
                    * Permission is hereby granted, free of charge, to any person obtaining a copy
                    * of this software and associated documentation files (the "Software"), to deal
                    * in the Software without restriction, including without limitation the rights
                    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                    * copies of the Software, and to permit persons to whom the Software is
                    * furnished to do so, subject to the following conditions:
                    *
                    * The above copyright notice and this permission notice shall be included in all
                    * copies or substantial portions of the Software.
                    *
                    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                    * SOFTWARE.
                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Dialog = require('@instructure/ui-a11y/lib/components/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _createChainedFunction = require('@instructure/ui-utils/lib/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _Portal = require('@instructure/ui-portal/lib/components/Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _Transition = require('@instructure/ui-motion/lib/components/Transition');

var _Transition2 = _interopRequireDefault(_Transition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
---
category: components/dialogs
---
**/
var Overlay = (_temp = _class = function (_Component) {
  _inherits(Overlay, _Component);

  function Overlay(props) {
    _classCallCheck(this, Overlay);

    var _this = _possibleConstructorReturn(this, (Overlay.__proto__ || Object.getPrototypeOf(Overlay)).call(this, props));

    _this._timeouts = [];

    _this.handlePortalOpen = function () {
      _this._timeouts.push(setTimeout(function () {
        if (_this._isMounted) {
          _this.setState({
            open: true
          });
        }
      }));
    };

    _this.handleTransitionExited = function () {
      _this.setState({
        open: false,
        transitioning: false
      });
    };

    _this.state = {
      open: props.open,
      transitioning: false
    };
    return _this;
  }

  _createClass(Overlay, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.open && !nextProps.open) {
        // closing
        this.setState({
          transitioning: this.props.transition !== null
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: 'renderTransition',
    value: function renderTransition(content) {
      return _react2.default.createElement(
        _Transition2.default,
        Object.assign({}, (0, _passthroughProps.pickProps)(this.props, _Transition2.default.propTypes), {
          'in': this.props.open,
          transitionOnMount: true,
          unmountOnExit: true,
          type: this.props.transition,
          onExited: (0, _createChainedFunction2.default)(this.handleTransitionExited, this.props.onExited)
        }),
        content
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var content = _react2.default.createElement(
        _Dialog2.default,
        Object.assign({}, (0, _passthroughProps.omitProps)(this.props, Overlay.propTypes), (0, _passthroughProps.pickProps)(this.props, _Dialog2.default.propTypes), {
          defaultFocusElement: this.props.defaultFocusElement,
          open: this.state.open
        }),
        this.props.children
      );

      if (this.props.transition) {
        content = this.renderTransition(content);
      }

      return _react2.default.createElement(
        _Portal2.default,
        Object.assign({}, (0, _passthroughProps.pickProps)(this.props, _Portal2.default.propTypes), {
          open: this.props.open || this.state.transitioning,
          onOpen: (0, _createChainedFunction2.default)(this.handlePortalOpen, this.props.onOpen)
        }),
        content
      );
    }
  }]);

  Overlay.displayName = 'Overlay'
  ;
  return Overlay;
}(_react.Component), _class.propTypes = {
  children: _propTypes2.default.node,
  /**
   * Whether or not the `<Overlay />` is open
   */
  open: _propTypes2.default.bool,
  /**
   * Callback fired when `<Portal />` content has been mounted in the DOM
   */
  onOpen: _propTypes2.default.func,
  /**
   * Callback fired when `<Portal />` has been unmounted from the DOM
   */
  onClose: _propTypes2.default.func,
  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Portal />` (defaults to `document.body`)
   */
  mountNode: _propTypes2.default.oneOfType([_CustomPropTypes2.default.element, _propTypes2.default.func]),
  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: _propTypes2.default.oneOf(['bottom', 'top']),

  label: _propTypes2.default.string,
  /**
   * Callback fired when the `<Overlay />` is requesting to be closed
   */
  onDismiss: _propTypes2.default.func,
  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),
  /**
   * An element or a function returning an element to apply `aria-hidden` to
   */
  applicationElement: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.element), _propTypes2.default.element, _propTypes2.default.func]),
  /**
   * An element or a function returning an element that wraps the content of the `<Overlay />`
   */
  contentElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),

  shouldContainFocus: _propTypes2.default.bool,
  shouldReturnFocus: _propTypes2.default.bool,
  shouldCloseOnDocumentClick: _propTypes2.default.bool,
  shouldCloseOnEscape: _propTypes2.default.bool,
  /**
   * The type of `<Transition />` to use for animating in/out
   */
  transition: _Transition2.default.propTypes.type,
  /**
   * Show the component; triggers the enter or exit animation
   */
  in: _propTypes2.default.bool,
  /**
   * Unmount the component (remove it from the DOM) when it is not shown
   */
  unmountOnExit: _propTypes2.default.bool,
  /**
   * Run the enter animation when the component mounts, if it is initially
   * shown
   */
  transitionOnMount: _propTypes2.default.bool,
  /**
   * Run the enter animation
   */
  transitionEnter: _propTypes2.default.bool,
  /**
   * Run the exit animation
   */
  transitionExit: _propTypes2.default.bool,
  /**
   * Callback fired before the "entering" classes are applied
   */
  onEnter: _propTypes2.default.func,
  /**
   * Callback fired after the "entering" classes are applied
   */
  onEntering: _propTypes2.default.func,
  /**
   * Callback fired after the "enter" classes are applied
   */
  onEntered: _propTypes2.default.func,
  /**
   * Callback fired before the "exiting" classes are applied
   */
  onExit: _propTypes2.default.func,
  /**
   * Callback fired after the "exiting" classes are applied
   */
  onExiting: _propTypes2.default.func,
  /**
   * Callback fired after the "exited" classes are applied
   */
  onExited: _propTypes2.default.func
}, _class.defaultProps = {
  children: null,
  open: false,
  insertAt: 'bottom',
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  mountNode: null,
  shouldContainFocus: false,
  shouldReturnFocus: false,
  shouldCloseOnDocumentClick: false,
  shouldCloseOnEscape: true,
  applicationElement: null,
  defaultFocusElement: null,
  contentElement: null,
  onDismiss: function onDismiss() {},
  transition: null,
  in: false,
  unmountOnExit: false,
  transitionOnMount: false,
  transitionEnter: true,
  transitionExit: true,
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {}
}, _temp);
exports.default = Overlay;