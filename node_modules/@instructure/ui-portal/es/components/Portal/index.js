var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _class, _class2, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';

import bidirectional from '@instructure/ui-i18n/lib/bidirectional';

import shallowEqual from '@instructure/ui-utils/lib/shallowEqual';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import deprecated from '@instructure/ui-utils/lib/react/deprecated';

/**
---
category: components/utilities
---
**/
var Portal = (_dec = deprecated('3.0.0', {
  container: 'mountNode',
  isOpen: 'open',
  onReady: 'onOpen'
}), _dec2 = bidirectional(), _dec(_class = _dec2(_class = (_temp = _class2 = function (_Component) {
  _inherits(Portal, _Component);

  function Portal() {
    _classCallCheck(this, Portal);

    return _possibleConstructorReturn(this, (Portal.__proto__ || Object.getPrototypeOf(Portal)).apply(this, arguments));
  }

  _createClass(Portal, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.renderPortal(this.props);
    }
  }, {
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return !(shallowEqual(this.props, nextProps) && shallowEqual(this.state, nextState));
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.renderPortal(nextProps);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.removePortal(this.props);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }, {
    key: 'renderPortal',
    value: function renderPortal(props) {
      var _this2 = this;

      var isInitialMount = !this._node;
      var mountNode = this.mountNode;

      var children = props.children;

      // Wrap text in a span since subtree will only render a single top-level node
      if (typeof children === 'string' && children.length > 0) {
        children = React.createElement(
          'span',
          null,
          children
        );
      }

      // Render subtree if Portal is open and has children to render
      if (props.open && React.Children.count(children) > 0) {
        // Create node if it doesn't already exist
        if (!this._node) {
          this._node = document.createElement('span');
          this._node.setAttribute('dir', this.dir);
        }

        // Append node to container if it isn't already
        if (this._node.parentNode !== mountNode) {
          if (this.props.insertAt === 'bottom') {
            mountNode.appendChild(this._node);
          } else {
            mountNode.insertBefore(this._node, mountNode.firstChild);
          }
        }

        // Notify that subtree has been rendered if props ask for it
        var handleMount = function handleMount() {
          // Only fire onOpen if Portal was closed and is now open
          if ((isInitialMount || !_this2.props.open && props.open) && typeof props.onOpen === 'function') {
            props.onOpen(_this2._node);
          }
        };

        ReactDOM.unstable_renderSubtreeIntoContainer(this, children, this._node, handleMount);
      } else {
        this.removePortal(props);
      }
    }
  }, {
    key: 'removePortal',
    value: function removePortal(props) {
      var unmounted = void 0;

      if (this._node) {
        unmounted = ReactDOM.unmountComponentAtNode(this._node);
        this._node.parentNode && this._node.parentNode.removeChild(this._node);
        this._node = null;
      }

      if (unmounted && typeof props.onClose === 'function') {
        props.onClose();
      }
    }
  }, {
    key: 'mountNode',
    get: function get() {
      var mountNode = void 0;

      if (typeof this.props.mountNode === 'function') {
        mountNode = ReactDOM.findDOMNode(this.props.mountNode.call(null)); // eslint-disable-line react/no-find-dom-node
      } else if (this.props.mountNode) {
        mountNode = ReactDOM.findDOMNode(this.props.mountNode); // eslint-disable-line react/no-find-dom-node
      }

      if (!mountNode || !mountNode.nodeName) {
        mountNode = document.body;
      }

      return mountNode;
    }
  }, {
    key: 'node',
    get: function get() {
      return this._node;
    }
  }]);

  Portal.displayName = 'Portal'
  ;
  return Portal;
}(Component), _class2.propTypes = {
  /**
   * Wheter or not the `<Portal />` is open
   */
  open: PropTypes.bool,

  /**
   * Callback fired when `<Portal />` content has been mounted in the DOM
   */
  onOpen: PropTypes.func,

  /**
   * Callback fired when `<Portal />` has been unmounted from the DOM
   */
  onClose: PropTypes.func,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Portal />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([CustomPropTypes.element, PropTypes.func]),
  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  /**
   * The children to be rendered within the `<Portal />`
   */
  children: PropTypes.node
}, _class2.defaultProps = {
  open: false,
  insertAt: 'bottom',
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  mountNode: null,
  children: null
}, _temp)) || _class) || _class);
export { Portal as default };