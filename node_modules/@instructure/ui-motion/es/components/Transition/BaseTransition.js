var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React from 'react';
import PropTypes from 'prop-types';
import getClassList from '@instructure/ui-utils/lib/dom/getClassList';
import ensureSingleChild from '@instructure/ui-utils/lib/react/ensureSingleChild';

var STATES = {
  EXITED: -2,
  EXITING: -1,
  ENTERING: 1,
  ENTERED: 2

  /**
    Note: this is forked from https://github.com/react-bootstrap/react-overlays/blob/master/src/Transition.js
    so that it works with css modules. The internals are pretty different now, but it has roughly the same api.
  **/
};var BaseTransition = (_temp2 = _class = function (_React$Component) {
  _inherits(BaseTransition, _React$Component);

  function BaseTransition() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, BaseTransition);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BaseTransition.__proto__ || Object.getPrototypeOf(BaseTransition)).call.apply(_ref, [this].concat(args))), _this), _this._timeouts = [], _this.state = {
      transitioning: false
    }, _this.startTransition = function (transitionIn, transitionOnStart) {
      var _this$props = _this.props,
          transitionEnter = _this$props.transitionEnter,
          transitionExit = _this$props.transitionExit;

      if (transitionIn) {
        _this.enter(transitionEnter && transitionOnStart ? STATES.EXITED : null);
      } else {
        _this.exit(transitionExit && transitionOnStart ? STATES.ENTERED : null);
      }
    }, _this.transition = function (toState, fromState, transitionCallback) {
      var transitionDuration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      if (_this._unmounted) return;

      var classList = getClassList(_this);

      var transitionClassName = _this.getTransitionClassName(toState);
      var prevTransitionClassName = _this.getTransitionClassName(fromState);
      var baseTransitionClassName = _this.props.transitionClassName;

      if (fromState && transitionDuration && _this.transitionEnabled(toState)) {
        classList.add(baseTransitionClassName);
      } else {
        classList.remove(baseTransitionClassName);
      }

      if (prevTransitionClassName) {
        classList.remove(prevTransitionClassName);
      }

      if (transitionClassName) {
        classList.add(transitionClassName);
      }

      if (toState && fromState) {
        _this.props.onTransition(toState, fromState);
      }

      _this._timeouts.push(setTimeout(function () {
        if (_this._unmounted) return;

        if (typeof transitionCallback === 'function') {
          transitionCallback();
        }
      }, transitionDuration));
    }, _this.enter = function (initialState) {
      if (_this.state.transitioning || _this._unmounted) return;

      var _this2 = _this,
          props = _this2.props;

      props.onEnter();

      if (props.transitionEnter) {
        _this.setState({ transitioning: true }, function () {
          var enter = function enter() {
            props.onEntering();
            _this.transition(STATES.ENTERED, STATES.ENTERING, function () {
              _this.setState({ transitioning: false }, function () {
                props.onEntered();
              });
            });
          };
          if (initialState) {
            _this.transition(initialState, null, function () {
              _this.transition(STATES.ENTERING, initialState, enter, props.enterDelay);
            });
          } else {
            enter();
          }
        });
      } else {
        _this.setState({ transitioning: false }, function () {
          _this.transition(STATES.ENTERED, STATES.EXITED);
          props.onEntered();
        });
      }
    }, _this.exit = function (initialState) {
      if (_this.state.transitioning) return;

      var _this3 = _this,
          props = _this3.props;

      props.onExit();

      if (props.transitionExit) {
        _this.setState({ transitioning: true }, function () {
          var exit = function exit() {
            props.onExiting();
            _this.transition(STATES.EXITED, STATES.EXITING, function () {
              _this.setState({ transitioning: false }, function () {
                props.onExited();
              });
            });
          };
          if (initialState) {
            _this.transition(initialState, null, function () {
              _this.transition(STATES.EXITING, initialState, exit, props.exitDelay);
            });
          } else {
            exit();
          }
        });
      } else {
        _this.setState({ transitioning: false }, function () {
          _this.transition(STATES.EXITED, STATES.ENTERED);
          props.onExited();
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(BaseTransition, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.startTransition(this.props.in, this.props.transitionOnMount);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextState) {
      if (nextProps.in !== this.props.in && this.state.transitioning) {
        this.clearTransition(this.props.transitionClassName);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.transitionClassName !== prevProps.transitionClassName) {
        this.clearTransition(prevProps.transitionClassName);
      }

      if (prevProps.in !== this.props.in) {
        this.startTransition(this.props.in, true);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._timeouts.forEach(function (timeout) {
        clearTimeout(timeout);
      });
      this._unmounted = true;
    }
  }, {
    key: 'clearTransition',
    value: function clearTransition(transitionClassName) {
      var _this4 = this;

      if (this._unmounted) return;

      this.setState({ transitioning: false }, function () {
        if (_this4._unmounted) return;

        var classList = getClassList(_this4);

        Object.keys(STATES).forEach(function (state) {
          classList.remove(_this4.getTransitionClassName(state));
        });

        classList.remove(transitionClassName);
      });
    }
  }, {
    key: 'transitionEnabled',
    value: function transitionEnabled(toState) {
      var props = this.props;


      switch (toState) {
        case STATES.EXITED:
        case STATES.EXITING:
          return props.transitionExit;
        case STATES.ENTERED:
        case STATES.ENTERING:
          return props.transitionEnter;
        default:
          return false;
      }
    }
  }, {
    key: 'getTransitionClassName',
    value: function getTransitionClassName(transitionState) {
      var props = this.props;

      switch (transitionState) {
        case STATES.EXITED:
          return props.exitedClassName;
        case STATES.ENTERING:
          return props.enteringClassName;
        case STATES.ENTERED:
          return props.enteredClassName;
        case STATES.EXITING:
          return props.exitingClassName;
        default:
          return null;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.props.in && this.props.unmountOnExit && !this.state.transitioning) {
        return null;
      } else {
        return ensureSingleChild(this.props.children);
      }
    }
  }]);

  BaseTransition.displayName = 'BaseTransition'
  ;
  return BaseTransition;
}(React.Component), _class.propTypes = {
  /**
   * Show the component? Triggers the enter or exit animation.
   */
  in: PropTypes.bool,

  /**
   * Unmount the component (remove it from the DOM) when it is not shown.
   */
  unmountOnExit: PropTypes.bool,

  /**
   * Run the enter animation when the component mounts, if it is initially
   * shown
   */
  transitionOnMount: PropTypes.bool,
  /**
   * Run the enter animation
   */
  transitionEnter: PropTypes.bool,
  /**
   * Run the exit animation
   */
  transitionExit: PropTypes.bool,

  /**
   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
   * transition indefinately if the browser transitionEnd events are
   * canceled or interrupted.
   *
   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
   * setting this to the duration of your animation (or a bit above it).
   */
  enterDelay: PropTypes.number,

  /**
   * A Timeout for the animation, in milliseconds, to ensure that a node doesn't
   * transition indefinately if the browser transitionEnd events are
   * canceled or interrupted.
   *
   * By default this is set to a high number (5 seconds) as a failsafe. You should consider
   * setting this to the duration of your animation (or a bit above it).
   */
  exitDelay: PropTypes.number,

  /**
   * the base CSS class for the transition (transitions go here)
   */
  transitionClassName: PropTypes.string,

  /**
   * CSS class or classes applied when the component is exited
   */
  exitedClassName: PropTypes.string,
  /**
   * CSS class or classes applied while the component is exiting
   */
  exitingClassName: PropTypes.string,
  /**
   * CSS class or classes applied when the component is entered
   */
  enteredClassName: PropTypes.string,
  /**
   * CSS class or classes applied while the component is entering
   */
  enteringClassName: PropTypes.string,

  /**
   * Callback fired when transitioning to the next state
   */
  onTransition: PropTypes.func,

  /**
   * Callback fired before the "entering" classes are applied
   */
  onEnter: PropTypes.func,
  /**
   * Callback fired after the "entering" classes are applied
   */
  onEntering: PropTypes.func,
  /**
   * Callback fired after the "enter" classes are applied
   */
  onEntered: PropTypes.func,
  /**
   * Callback fired before the "exiting" classes are applied
   */
  onExit: PropTypes.func,
  /**
   * Callback fired after the "exiting" classes are applied
   */
  onExiting: PropTypes.func,
  /**
   * Callback fired after the "exited" classes are applied
   */
  onExited: PropTypes.func,

  children: PropTypes.node,

  className: PropTypes.string
}, _class.defaultProps = {
  in: false,
  component: 'div',
  unmountOnExit: false,
  transitionOnMount: false,
  transitionEnter: true,
  transitionExit: true,

  enterDelay: 300,
  exitDelay: 300,

  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},

  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  onTransition: function onTransition(toState, fromState) {}
}, _class.states = STATES, _temp2);
export { BaseTransition as default };