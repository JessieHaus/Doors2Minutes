var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import SVGIcon from '@instructure/ui-svg-images/lib/components/SVGIcon';

var IconDiscussionX = (_temp = _class = function (_Component) {
  _inherits(IconDiscussionX, _Component);

  function IconDiscussionX() {
    _classCallCheck(this, IconDiscussionX);

    return _possibleConstructorReturn(this, (IconDiscussionX.__proto__ || Object.getPrototypeOf(IconDiscussionX)).apply(this, arguments));
  }

  _createClass(IconDiscussionX, [{
    key: 'render',
    value: function render() {

      if (process.env.NODE_ENV !== 'production') {
        console.warn('<IconDiscussionX /> is deprecated. Please use <IconX /> instead.');
      }

      return React.createElement(
        SVGIcon,
        Object.assign({}, this.props, {
          name: 'IconDiscussionX',
          viewBox: '0 0 1920 1920'

        }),
        React.createElement('path', { d: 'M1827.701 0L960.065 867.636 92.3 0 0 92.168l867.636 867.767L0 1827.57 92.299 1920l867.766-867.766L1827.701 1920l92.168-92.43-867.635-867.635 867.635-867.767z', fillRule: 'evenodd', stroke: 'none', strokeWidth: '1' })
      );
    }
  }]);

  IconDiscussionX.displayName = 'IconDiscussionX'
  ;
  return IconDiscussionX;
}(Component), _class.glyphName = 'discussion-x', _class.variant = 'Line', _class.deprecated = true, _class.propTypes = Object.assign({}, SVGIcon.propTypes), _temp);
export { IconDiscussionX as default };