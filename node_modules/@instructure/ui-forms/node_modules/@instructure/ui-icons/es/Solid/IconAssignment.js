var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import SVGIcon from '@instructure/ui-svg-images/lib/components/SVGIcon';

var IconAssignment = (_temp = _class = function (_Component) {
  _inherits(IconAssignment, _Component);

  function IconAssignment() {
    _classCallCheck(this, IconAssignment);

    return _possibleConstructorReturn(this, (IconAssignment.__proto__ || Object.getPrototypeOf(IconAssignment)).apply(this, arguments));
  }

  _createClass(IconAssignment, [{
    key: 'render',
    value: function render() {

      return React.createElement(
        SVGIcon,
        Object.assign({}, this.props, {
          name: 'IconAssignment',
          viewBox: '0 0 1920 1920',

          bidirectional: true

        }),
        React.createElement('path', { d: 'M1185.865 1694.093c45.176 0 88.093-18.07 119.716-49.694l162.633-162.633v438.206H0V0h1468.214v551.145L840.27 1179.089c-31.623 31.623-49.693 74.54-49.693 119.715v395.289h395.288zM338.819 677.637h790.576V338.82H338.82v338.818zm0 564.698h338.818v-112.94H338.82v112.94zm0-225.88h564.697V903.517H338.82v112.94zM1903.483 807.18c22.023 22.023 22.023 57.712 0 79.848l-677.638 677.637c-10.616 10.503-24.96 16.49-39.98 16.49H903.516v-282.35c0-15.02 5.986-29.364 16.49-39.867L1597.641 581.3c22.137-22.136 57.825-22.136 79.962 0l225.879 225.879zm-209.39 129.428l89.56-89.56-146.03-146.031-89.561 89.56 146.03 146.031z', fillRule: 'evenodd', stroke: 'none', strokeWidth: '1' })
      );
    }
  }]);

  IconAssignment.displayName = 'IconAssignment'
  ;
  return IconAssignment;
}(Component), _class.glyphName = 'assignment', _class.variant = 'Solid', _class.propTypes = Object.assign({}, SVGIcon.propTypes), _temp);
export { IconAssignment as default };