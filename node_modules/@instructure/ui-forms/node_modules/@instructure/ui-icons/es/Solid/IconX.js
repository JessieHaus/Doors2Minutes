var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import SVGIcon from '@instructure/ui-svg-images/lib/components/SVGIcon';

var IconX = (_temp = _class = function (_Component) {
  _inherits(IconX, _Component);

  function IconX() {
    _classCallCheck(this, IconX);

    return _possibleConstructorReturn(this, (IconX.__proto__ || Object.getPrototypeOf(IconX)).apply(this, arguments));
  }

  _createClass(IconX, [{
    key: 'render',
    value: function render() {

      return React.createElement(
        SVGIcon,
        Object.assign({}, this.props, {
          name: 'IconX',
          viewBox: '0 0 1920 1920'

        }),
        React.createElement('path', { d: 'M771.548 960.11L319 1412.658l188.562 188.562 452.548-452.548 452.548 452.548 188.562-188.562-452.548-452.548 452.548-452.548L1412.658 319 960.11 771.548 507.562 319 319 507.562z', fillRule: 'nonzero', stroke: 'none', strokeWidth: '1' })
      );
    }
  }]);

  IconX.displayName = 'IconX'
  ;
  return IconX;
}(Component), _class.glyphName = 'x', _class.variant = 'Solid', _class.propTypes = Object.assign({}, SVGIcon.propTypes), _temp);
export { IconX as default };