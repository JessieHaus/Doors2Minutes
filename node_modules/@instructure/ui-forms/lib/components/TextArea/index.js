'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp; /*
                                   * The MIT License (MIT)
                                   *
                                   * Copyright (c) 2015 - present Instructure, Inc.
                                   *
                                   * Permission is hereby granted, free of charge, to any person obtaining a copy
                                   * of this software and associated documentation files (the "Software"), to deal
                                   * in the Software without restriction, including without limitation the rights
                                   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                   * copies of the Software, and to permit persons to whom the Software is
                                   * furnished to do so, subject to the following conditions:
                                   *
                                   * The above copyright notice and this permission notice shall be included in all
                                   * copies or substantial portions of the Software.
                                   *
                                   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                   * SOFTWARE.
                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _uiThemeable = require('@instructure/ui-themeable');

var _uiThemeable2 = _interopRequireDefault(_uiThemeable);

var _debounce = require('@instructure/ui-utils/lib/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _addEventListener = require('@instructure/ui-utils/lib/dom/addEventListener');

var _addEventListener2 = _interopRequireDefault(_addEventListener);

var _findDOMNode = require('@instructure/ui-utils/lib/dom/findDOMNode');

var _findDOMNode2 = _interopRequireDefault(_findDOMNode);

var _requestAnimationFrame = require('@instructure/ui-utils/lib/dom/requestAnimationFrame');

var _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);

var _isActiveElement = require('@instructure/ui-utils/lib/dom/isActiveElement');

var _isActiveElement2 = _interopRequireDefault(_isActiveElement);

var _px = require('@instructure/ui-utils/lib/px');

var _px2 = _interopRequireDefault(_px);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _generateElementId = require('@instructure/ui-utils/lib/dom/generateElementId');

var _generateElementId2 = _interopRequireDefault(_generateElementId);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

var _FormPropTypes = require('../../utils/FormPropTypes');

var _FormPropTypes2 = _interopRequireDefault(_FormPropTypes);

var _FormField = require('../FormField');

var _FormField2 = _interopRequireDefault(_FormField);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._16BRrcp {\n  animation: none 0s ease 0s 1 normal none running;\n  backface-visibility: visible;\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  border: medium none currentColor;\n  border-collapse: separate;\n  border-image: none;\n  border-radius: 0;\n  border-spacing: 0;\n  bottom: auto;\n  box-shadow: none;\n  box-sizing: content-box;\n  caption-side: top;\n  clear: none;\n  clip: auto;\n  color: #000;\n  columns: auto;\n  column-count: auto;\n  column-fill: balance;\n  column-gap: normal;\n  column-rule: medium none currentColor;\n  column-span: 1;\n  column-width: auto;\n  content: normal;\n  counter-increment: none;\n  counter-reset: none;\n  cursor: auto;\n  direction: ltr;\n  display: inline;\n  empty-cells: show;\n  float: none;\n  font-family: serif;\n  font-size: medium;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  font-stretch: normal;\n  line-height: normal;\n  height: auto;\n  hyphens: none;\n  left: auto;\n  letter-spacing: normal;\n  list-style: disc outside none;\n  margin: 0;\n  max-height: none;\n  max-width: none;\n  min-height: 0;\n  min-width: 0;\n  opacity: 1;\n  orphans: 2;\n  outline: medium none invert;\n  overflow: visible;\n  overflow-x: visible;\n  overflow-y: visible;\n  padding: 0;\n  page-break-after: auto;\n  page-break-before: auto;\n  page-break-inside: auto;\n  perspective: none;\n  perspective-origin: 50% 50%;\n  position: static;\n  right: auto;\n  tab-size: 8;\n  table-layout: auto;\n  text-align: left;\n  text-align-last: auto;\n  text-decoration: none;\n  text-indent: 0;\n  text-shadow: none;\n  text-transform: none;\n  top: auto;\n  transform: none;\n  transform-origin: 50% 50% 0;\n  transform-style: flat;\n  transition: none 0s ease 0s;\n  unicode-bidi: normal;\n  vertical-align: baseline;\n  visibility: visible;\n  white-space: normal;\n  widows: 2;\n  width: auto;\n  word-spacing: normal;\n  z-index: auto;\n  all: initial;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  height: auto;\n  margin: 0;\n  width: 100%;\n  display: block;\n  box-sizing: border-box;\n  padding: ' + theme.padding + ';\n  transition: all 0.2s ease-out;\n  outline: 0.1875rem solid transparent;\n  outline-offset: -0.5rem;\n  font-family: ' + theme.fontFamily + ';\n  font-weight: ' + theme.fontWeight + ';\n  border-width: ' + theme.borderWidth + ';\n  border-style: ' + theme.borderStyle + ';\n  border-top-color: ' + theme.borderTopColor + ';\n  border-right-color: ' + theme.borderRightColor + '; /* stylelint-disable-line property-blacklist */\n  border-bottom-color: ' + theme.borderBottomColor + ';\n  border-left-color: ' + theme.borderLeftColor + '; /* stylelint-disable-line property-blacklist */\n  border-radius: ' + theme.borderRadius + ';\n  color: ' + theme.color + ';\n  background: ' + theme.background + ';\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  text-align: start;\n}\n\n[dir="ltr"] ._16BRrcp {\n  text-align: left;\n}\n\n[dir="rtl"] ._16BRrcp {\n  text-align: right;\n}\n\n  ._16BRrcp:focus {\n    outline: 0.1875rem solid ' + theme.focusOutlineColor + ';\n    outline-offset: -0.1875rem;\n    border-top-color: ' + theme.focusBorderTopColor + ';\n    border-right-color: ' + theme.focusBorderRightColor + '; /* stylelint-disable-line property-blacklist */\n    border-bottom-color: ' + theme.focusBorderBottomColor + ';\n    border-left-color: ' + theme.focusBorderLeftColor + '; /* stylelint-disable-line property-blacklist */\n    box-shadow: 0 0.0625rem 0 0 ' + theme.boxShadowColor + ';\n  }\n\n  ._16BRrcp[aria-invalid] {\n    border-color: ' + theme.errorBorderColor + ';\n  }\n\n  ._16BRrcp[aria-invalid]:focus {\n      border-color: ' + theme.errorBorderColor + ';\n      outline-color: ' + theme.errorOutlineColor + ';\n      box-shadow: 0 0.125rem 0 0 ' + theme.boxShadowErrorColor + ';\n    }\n\n  ._16BRrcp:-ms-input-placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n  ._16BRrcp::-ms-input-placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n  ._16BRrcp::placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n  ._16BRrcp.TQJ3s4P {\n    cursor: not-allowed;\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n._3iB5Mq_ {\n  font-size: ' + theme.smallFontSize + ';\n}\n\n.BgBppdU {\n  font-size: ' + theme.mediumFontSize + ';\n}\n\n.Eqqryt0 {\n  font-size: ' + theme.largeFontSize + ';\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'textarea': '_16BRrcp',
  'disabled': 'TQJ3s4P',
  'small': '_3iB5Mq_',
  'medium': 'BgBppdU',
  'large': 'Eqqryt0'
};


/**
---
category: components/forms
---
**/
var TextArea = (_dec = (0, _uiThemeable2.default)(_theme2.default, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(TextArea, _Component);

  function TextArea() {
    _classCallCheck(this, TextArea);

    var _this = _possibleConstructorReturn(this, (TextArea.__proto__ || Object.getPrototypeOf(TextArea)).call(this));

    _this.grow = function () {
      if (!_this._textarea) {
        return;
      }

      var offset = _this._textarea.offsetHeight - _this._textarea.clientHeight;
      var height = '';

      // Note:
      // 1. height has be reset to `auto` every time this method runs, or scrollHeight will not reset
      _this._textarea.style.height = 'auto';
      // 2. `this._textarea.scrollHeight` will not reset if assigned to a variable; it needs to be written out each time

      _this._textarea.style.overflowY = 'hidden'; // hide scrollbars for autoGrow textareas
      height = _this._textarea.scrollHeight + offset + 'px';

      if (_this.props.maxHeight && _this._textarea.scrollHeight > (0, _px2.default)(_this.props.maxHeight, (0, _findDOMNode2.default)(_this))) {
        _this._textarea.style.overflowY = 'auto'; // add scroll if scrollHeight exceeds maxHeight in pixels
      } else if (_this.props.height) {
        if (_this._textarea.value === '') {
          height = _this.props.height;
        } else if ((0, _px2.default)(_this.props.height, (0, _findDOMNode2.default)(_this)) > _this._textarea.scrollHeight) {
          _this._textarea.style.overflowY = 'auto'; // add scroll if scrollHeight exceeds height in pixels
          height = _this.props.height;
        }
      }

      _this._textarea.style.height = height;
      _this._textarea.scrollTop = _this._textarea.scrollHeight;
    };

    _this.handleChange = function (event) {
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          value = _this$props.value,
          disabled = _this$props.disabled,
          readOnly = _this$props.readOnly;


      if (disabled || readOnly) {
        event.preventDefault();
        return;
      }

      if (typeof value === 'undefined') {
        // if uncontrolled
        _this.autoGrow();
      }

      if (typeof onChange === 'function') {
        onChange(event);
      }
    };

    _this._defaultId = (0, _generateElementId2.default)('TextArea');
    return _this;
  }

  _createClass(TextArea, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.autoGrow();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.autoGrow();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._listener) {
        this._listener.remove();
      }

      if (this._request) {
        this._request.cancel();
      }

      if (this._debounced) {
        this._debounced.cancel();
      }
    }
  }, {
    key: 'autoGrow',
    value: function autoGrow() {
      if (this.props.autoGrow) {
        if (!this._debounced) {
          this._debounced = (0, _debounce2.default)(this.grow, 200, { leading: false, trailing: true });
        }

        if (!this._listener) {
          this._listener = (0, _addEventListener2.default)(window, 'resize', this._debounced);
        }

        this._request = (0, _requestAnimationFrame2.default)(this._debounced);
      }
    }
  }, {
    key: 'focus',
    value: function focus() {
      this._textarea.focus();
    }
  }, {
    key: 'render',
    value: function render() {
      var _classes,
          _this2 = this;

      var _props = this.props,
          autoGrow = _props.autoGrow,
          placeholder = _props.placeholder,
          value = _props.value,
          defaultValue = _props.defaultValue,
          disabled = _props.disabled,
          readOnly = _props.readOnly,
          required = _props.required,
          width = _props.width,
          height = _props.height,
          maxHeight = _props.maxHeight,
          textareaRef = _props.textareaRef,
          resize = _props.resize,
          size = _props.size;


      var props = (0, _passthroughProps.omitProps)(this.props, TextArea.propTypes);

      var classes = (_classes = {}, _defineProperty(_classes, styles.textarea, true), _defineProperty(_classes, styles[size], true), _defineProperty(_classes, styles.disabled, disabled), _classes);

      var style = {
        width: width,
        resize: resize,
        height: !autoGrow ? height : null,
        maxHeight: maxHeight
      };

      return _react2.default.createElement(
        _FormField2.default,
        Object.assign({}, (0, _passthroughProps.pickProps)(this.props, _FormField2.default.propTypes), {
          vAlign: 'top',
          id: this.id,
          ref: function ref(el) {
            _this2._node = el;
          }
        }),
        _react2.default.createElement('textarea', Object.assign({}, props, {
          value: value,
          defaultValue: defaultValue,
          placeholder: placeholder,
          ref: function ref(textarea) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            _this2._textarea = textarea;
            textareaRef.apply(_this2, [textarea].concat(args));
          },
          style: style,
          id: this.id,
          required: required,
          'aria-required': required,
          'aria-invalid': this.invalid ? 'true' : null,
          disabled: disabled || readOnly,
          'aria-disabled': disabled || readOnly ? 'true' : null,
          className: (0, _classnames2.default)(classes),
          onChange: this.handleChange
        }))
      );
    }
  }, {
    key: 'minHeight',
    get: function get() {
      return this._textarea.style.minHeight;
    }
  }, {
    key: 'invalid',
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: 'id',
    get: function get() {
      return this.props.id || this._defaultId;
    }
  }, {
    key: 'focused',
    get: function get() {
      return (0, _isActiveElement2.default)(this._textarea);
    }
  }, {
    key: 'value',
    get: function get() {
      return this._textarea.value;
    }
  }]);

  TextArea.displayName = 'TextArea'
  ;
  return TextArea;
}(_react.Component), _class2.propTypes = {
  label: _propTypes2.default.node.isRequired,
  id: _propTypes2.default.string,
  /**
  * sets the font-size for the textarea
  */
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes2.default.oneOf(['stacked', 'inline']),
  /**
  * the textarea will expand vertically to fit the height of the content,
  * unless its content exceeds `maxHeight`
  */
  autoGrow: _propTypes2.default.bool,
  /**
  * is the textarea resizable (in supported browsers)
  */
  resize: _propTypes2.default.oneOf(['none', 'both', 'horizontal', 'vertical']),
  /**
  * a fixed width for the textarea
  */
  width: _propTypes2.default.string,
  /**
  * a initial height for the textarea (if autoGrow is true it will grow vertically)
  */
  height: _propTypes2.default.string,
  /**
  * when autoGrow is true, the textarea will never grow beyond this value
  */
  maxHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: _propTypes2.default.arrayOf(_FormPropTypes2.default.message),
  inline: _propTypes2.default.bool,
  /**
  * Html placeholder text to display when the input has no value. This should be hint text, not a label
  * replacement.
  */
  placeholder: _propTypes2.default.string,
  /**
   * Whether or not to disable the textarea
   */
  disabled: _propTypes2.default.bool,
  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes2.default.bool,
  required: _propTypes2.default.bool,
  /**
  * a function that provides a reference to the actual textarea element
  */
  textareaRef: _propTypes2.default.func,
  /**
  * value to set on initial render
  */
  defaultValue: _propTypes2.default.string,
  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  value: _CustomPropTypes2.default.controllable(_propTypes2.default.string),
  /**
  * when used with the `value` prop, the component will not control its own state
  */
  onChange: _propTypes2.default.func
}, _class2.defaultProps = {
  size: 'medium',
  autoGrow: true,
  resize: 'none',
  inline: false,
  messages: [],
  disabled: false,
  readOnly: false,
  textareaRef: function textareaRef(textarea) {},
  layout: 'stacked'
}, _temp)) || _class);
exports.default = TextArea;