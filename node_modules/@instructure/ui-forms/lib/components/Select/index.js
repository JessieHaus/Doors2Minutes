'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps; /*
                                      * The MIT License (MIT)
                                      *
                                      * Copyright (c) 2015 - present Instructure, Inc.
                                      *
                                      * Permission is hereby granted, free of charge, to any person obtaining a copy
                                      * of this software and associated documentation files (the "Software"), to deal
                                      * in the Software without restriction, including without limitation the rights
                                      * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                      * copies of the Software, and to permit persons to whom the Software is
                                      * furnished to do so, subject to the following conditions:
                                      *
                                      * The above copyright notice and this permission notice shall be included in all
                                      * copies or substantial portions of the Software.
                                      *
                                      * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                      * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                      * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                      * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                      * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                      * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                      * SOFTWARE.
                                      */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _deepEqual = require('@instructure/ui-utils/lib/deepEqual');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _LayoutPropTypes = require('@instructure/ui-layout/lib/utils/LayoutPropTypes');

var _LayoutPropTypes2 = _interopRequireDefault(_LayoutPropTypes);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _FormPropTypes = require('../../utils/FormPropTypes');

var _FormPropTypes2 = _interopRequireDefault(_FormPropTypes);

var _SelectSingle = require('./SelectSingle');

var _SelectSingle2 = _interopRequireDefault(_SelectSingle);

var _SelectMultiple = require('./SelectMultiple');

var _SelectMultiple2 = _interopRequireDefault(_SelectMultiple);

var _parseOptions = require('./utils/parseOptions');

var _parseOptions2 = _interopRequireDefault(_parseOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
---
category: components/forms
---
**/
var Select = (_temp = _class = function (_Component) {
  _inherits(Select, _Component);

  function Select(props) {
    _classCallCheck(this, Select);

    var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

    _initialiseProps.call(_this);

    var options = (0, _parseOptions2.default)(props.children);

    _this.state = { options: options };
    return _this;
  }

  _createClass(Select, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var options = (0, _parseOptions2.default)(nextProps.children);

      if (!(0, _deepEqual2.default)(this.state.options, options)) {
        this.setState({ options: options });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var Component = this.props.multiple ? _SelectMultiple2.default : _SelectSingle2.default;
      var defaultSelectedOption = this.props.defaultOption || this.props.value;

      // select first non-disabled option for standard select components
      if (!this.props.editable && !this.props.multiple && typeof defaultSelectedOption === 'undefined') {
        for (var i = 0; this.state.options.length; i++) {
          var option = this.state.options[i];
          if (!option.disabled) {
            defaultSelectedOption = option;
            break;
          }
        }
      }

      return _react2.default.createElement(Component, Object.assign({
        ref: this.handleRef
      }, (0, _passthroughProps.omitProps)(this.props, {}, ['multiple', 'defaultOption', !this.props.multiple ? 'formatSelectedOption' : '']), {
        options: this.state.options,
        defaultSelectedOption: defaultSelectedOption,
        closeOnSelect: this.props.closeOnSelect
      }));
    }
  }, {
    key: 'focused',
    get: function get() {
      return this._subComponent && this._subComponent.focused;
    }
  }, {
    key: 'invalid',
    get: function get() {
      return !!this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: 'value',
    get: function get() {
      return this._subComponent && this._subComponent.value;
    }
  }]);

  Select.displayName = 'Select'
  ;
  return Select;
}(_react.Component), _class.propTypes = {
  /**
   * Determines wether Select allows multiple values
   */
  multiple: _propTypes2.default.bool,
  /**
  * Determines whether the user can type in the input
  */
  editable: _propTypes2.default.bool,
  /**
  * Each children must be an option element.
  */
  children: _CustomPropTypes2.default.Children.oneOf(['option', 'optgroup']),
  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: _propTypes2.default.func,
  value: _propTypes2.default.string,
  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  selectedOption: _CustomPropTypes2.default.controllable(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    children: _propTypes2.default.node,
    disabled: _propTypes2.default.bool,
    icon: _propTypes2.default.func,
    groupLabel: _propTypes2.default.bool
  }), _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    children: _propTypes2.default.node,
    disabled: _propTypes2.default.bool,
    icon: _propTypes2.default.func,
    groupLabel: _propTypes2.default.bool
  })]))]), 'onChange', 'defaultOption'),
  /**
  * value to set on initial render, meant for an uncontrolled component
  */
  defaultOption: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    children: _propTypes2.default.node,
    disabled: _propTypes2.default.bool,
    icon: _propTypes2.default.func,
    groupLabel: _propTypes2.default.bool
  }), _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    children: _propTypes2.default.node,
    disabled: _propTypes2.default.bool,
    icon: _propTypes2.default.func,
    groupLabel: _propTypes2.default.bool
  })]))]),
  /**
  * for not multiple Select, allows the user to empty selection
  */
  allowEmpty: _propTypes2.default.bool,

  id: _propTypes2.default.string,

  /**
   * The placement of the content in relation to the trigger, passed down to Position
   */
  placement: _LayoutPropTypes2.default.placement,
  messages: _propTypes2.default.arrayOf(_FormPropTypes2.default.message),
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes2.default.oneOf(['stacked', 'inline']),
  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: _propTypes2.default.string,
  /**
   * Give the Spinner a title to be read by screenreaders. Disables menu
   * interaction and renders a Spinner in its place.
   */
  loadingText: _propTypes2.default.string,
  /**
   * The menu content to render when no options are present or are filtered away
   */
  emptyOption: _propTypes2.default.node,
  /**
   * The amount of options that are visible without scrolling
   */
  visibleOptionsCount: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /**
   * Custom text to be read by the screenreader when Select is focused
   */
  assistiveText: _propTypes2.default.string,
  /**
   * Additional text to provide screenreader feedback upon user action
   */
  announcement: _propTypes2.default.string,
  /**
   * The filter function applied to the options when writing on the input
   */
  filter: _propTypes2.default.func,
  /**
   * The format function called for each Tag to render its contents
   */
  formatSelectedOption: _propTypes2.default.func,
  /**
   * Whether or not to disable the input
   */
  disabled: _propTypes2.default.bool,
  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes2.default.bool,
  /**
   * Callback fired when `<Position />` content has been rendered
   */
  onPositioned: _propTypes2.default.func,
  /**
   * Callback fired when the menu is opened
   */
  onOpen: _propTypes2.default.func,
  /**
   * Callback fired when the menu is closed
   */
  onClose: _propTypes2.default.func,
  /**
   * Callback fired when one of the menu options gets selected. Second parameter is the selected option.
   */
  onChange: _propTypes2.default.func,
  /**
   * Callback fired when on the onChange of the internal input.
   */
  onInputChange: _propTypes2.default.func,
  /**
   * Callback fired when the options displayed in the menu change
   */
  onOptionsChange: _propTypes2.default.func,
  /**
   * Callback fired when on the onBlur of the internal input
   */
  onBlur: _propTypes2.default.func,
  /**
   * Callback fired when on the onClick of the internal input
   */
  onClick: _propTypes2.default.func,
  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: _propTypes2.default.bool
}, _class.defaultProps = {
  editable: false,
  allowEmpty: true,
  emptyOption: '---',
  selectedOption: null,
  size: 'medium',
  loadingText: null,
  visibleOptionsCount: 8,
  optionsMaxWidth: null,
  inputRef: function inputRef(node) {},
  filter: function filter(options, filterText) {
    return options.filter(function (option) {
      return option.label.toLowerCase().startsWith(filterText.toLowerCase());
    });
  },
  formatSelectedOption: function formatSelectedOption(tag) {
    return tag.label || tag.children;
  },
  closeOnSelect: true
}, _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this._input = null;

  this.focus = function () {
    _this2._subComponent && _this2._subComponent.focus();
  };

  this.handleRef = function (node) {
    _this2._subComponent = node;
  };
}, _temp);
exports.default = Select;