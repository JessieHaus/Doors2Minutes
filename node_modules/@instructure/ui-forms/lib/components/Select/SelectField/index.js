'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp; /*
                                   * The MIT License (MIT)
                                   *
                                   * Copyright (c) 2015 - present Instructure, Inc.
                                   *
                                   * Permission is hereby granted, free of charge, to any person obtaining a copy
                                   * of this software and associated documentation files (the "Software"), to deal
                                   * in the Software without restriction, including without limitation the rights
                                   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                   * copies of the Software, and to permit persons to whom the Software is
                                   * furnished to do so, subject to the following conditions:
                                   *
                                   * The above copyright notice and this permission notice shall be included in all
                                   * copies or substantial portions of the Software.
                                   *
                                   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                   * SOFTWARE.
                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames3 = require('classnames');

var _classnames4 = _interopRequireDefault(_classnames3);

var _keycode = require('keycode');

var _keycode2 = _interopRequireDefault(_keycode);

var _uiThemeable = require('@instructure/ui-themeable');

var _uiThemeable2 = _interopRequireDefault(_uiThemeable);

var _LayoutPropTypes = require('@instructure/ui-layout/lib/utils/LayoutPropTypes');

var _LayoutPropTypes2 = _interopRequireDefault(_LayoutPropTypes);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _createChainedFunction = require('@instructure/ui-utils/lib/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

var _containsActiveElement = require('@instructure/ui-utils/lib/dom/containsActiveElement');

var _containsActiveElement2 = _interopRequireDefault(_containsActiveElement);

var _findDOMNode = require('@instructure/ui-utils/lib/dom/findDOMNode');

var _findDOMNode2 = _interopRequireDefault(_findDOMNode);

var _generateElementId = require('@instructure/ui-utils/lib/dom/generateElementId');

var _generateElementId2 = _interopRequireDefault(_generateElementId);

var _ScreenReaderContent = require('@instructure/ui-a11y/lib/components/ScreenReaderContent');

var _ScreenReaderContent2 = _interopRequireDefault(_ScreenReaderContent);

var _hasVisibleChildren = require('@instructure/ui-a11y/lib/utils/hasVisibleChildren');

var _hasVisibleChildren2 = _interopRequireDefault(_hasVisibleChildren);

var _Position = require('@instructure/ui-layout/lib/components/Position');

var _Position2 = _interopRequireDefault(_Position);

var _FormField = require('../../FormField');

var _FormField2 = _interopRequireDefault(_FormField);

var _FormFieldLayout = require('../../FormField/FormFieldLayout');

var _FormFieldLayout2 = _interopRequireDefault(_FormFieldLayout);

var _SelectOptionsList = require('../SelectOptionsList');

var _SelectOptionsList2 = _interopRequireDefault(_SelectOptionsList);

var _getOptionId = require('../utils/getOptionId');

var _getOptionId2 = _interopRequireDefault(_getOptionId);

var _FormPropTypes = require('../../../utils/FormPropTypes');

var _FormPropTypes2 = _interopRequireDefault(_FormPropTypes);

var _IconArrowDown = require('./IconArrowDown');

var _IconArrowDown2 = _interopRequireDefault(_IconArrowDown);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n/* stylelint-disable selector-max-class */\n\n._3G9Ro9g {\n  box-sizing: border-box;\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  min-width: 0.0625rem;\n  background: ' + theme.background + ';\n  margin: 0;\n  transition: all 0.2s ease-out;\n  outline: 0.1875rem solid transparent;\n  outline-offset: -0.5rem;\n  overflow: hidden;\n  font-family: ' + theme.fontFamily + ';\n  border: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.borderColor + ';\n  border-radius: ' + theme.borderRadius + ';\n}\n\n._3G9Ro9g.G6k30pc {\n    border-color: ' + theme.focusBorderColor + ';\n    outline: 0.1875rem solid ' + theme.focusOutlineColor + ';\n    outline-offset: -0.1875rem;\n    box-shadow: none;\n    box-shadow: initial;\n  }\n\n._3G9Ro9g.QLFYDyp {\n    border-color: ' + theme.errorBorderColor + ';\n  }\n\n._3G9Ro9g.QLFYDyp.G6k30pc {\n      border-color: ' + theme.errorBorderColor + ';\n      outline-color: ' + theme.errorOutlineColor + ';\n    }\n\n._3G9Ro9g._3TGN8qX {\n    cursor: not-allowed;\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n._3G9Ro9g._2i2yBAM {\n    font-size: ' + theme.smallFontSize + ';\n  }\n\n._3G9Ro9g._1iV2AhM {\n    font-size: ' + theme.mediumFontSize + ';\n  }\n\n._3G9Ro9g._2K6_pEh {\n    font-size: ' + theme.largeFontSize + ';\n  }\n\n._1jHydYC {\n  position: relative;\n  display: flex;\n  flex: 1 1 auto;\n}\n\n/* stylelint-disable selector-max-type */\n\n._3-AYTwg,\ninput[type]._3-AYTwg {\n  animation: none 0s ease 0s 1 normal none running;\n  backface-visibility: visible;\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  border: medium none currentColor;\n  border-collapse: separate;\n  border-image: none;\n  border-radius: 0;\n  border-spacing: 0;\n  bottom: auto;\n  box-shadow: none;\n  box-sizing: content-box;\n  caption-side: top;\n  clear: none;\n  clip: auto;\n  color: #000;\n  columns: auto;\n  column-count: auto;\n  column-fill: balance;\n  column-gap: normal;\n  column-rule: medium none currentColor;\n  column-span: 1;\n  column-width: auto;\n  content: normal;\n  counter-increment: none;\n  counter-reset: none;\n  cursor: auto;\n  direction: ltr;\n  display: inline;\n  empty-cells: show;\n  float: none;\n  font-family: serif;\n  font-size: medium;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  font-stretch: normal;\n  line-height: normal;\n  height: auto;\n  hyphens: none;\n  left: auto;\n  letter-spacing: normal;\n  list-style: disc outside none;\n  margin: 0;\n  max-height: none;\n  max-width: none;\n  min-height: 0;\n  min-width: 0;\n  opacity: 1;\n  orphans: 2;\n  outline: medium none invert;\n  overflow: visible;\n  overflow-x: visible;\n  overflow-y: visible;\n  padding: 0;\n  page-break-after: auto;\n  page-break-before: auto;\n  page-break-inside: auto;\n  perspective: none;\n  perspective-origin: 50% 50%;\n  position: static;\n  right: auto;\n  tab-size: 8;\n  table-layout: auto;\n  text-align: left;\n  text-align-last: auto;\n  text-decoration: none;\n  text-indent: 0;\n  text-shadow: none;\n  text-transform: none;\n  top: auto;\n  transform: none;\n  transform-origin: 50% 50% 0;\n  transform-style: flat;\n  transition: none 0s ease 0s;\n  unicode-bidi: normal;\n  vertical-align: baseline;\n  visibility: visible;\n  white-space: normal;\n  widows: 2;\n  width: auto;\n  word-spacing: normal;\n  z-index: auto;\n  all: initial;\n  width: 100%;\n  cursor: default;\n  box-sizing: border-box;\n  text-align: start;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  line-height: 1; /* reset global line height */\n  margin: 0;\n  display: block;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: ' + theme.fontWeight + ';\n  color: ' + theme.color + ';\n  padding: 0 ' + theme.inputPadding + ';\n  height: auto;\n}\n\n[dir="ltr"] ._3-AYTwg,\n[dir="ltr"] input[type]._3-AYTwg {\n  text-align: left;\n}\n\n[dir="rtl"] ._3-AYTwg,\n[dir="rtl"] input[type]._3-AYTwg {\n  text-align: right;\n}\n\n._3-AYTwg::-ms-clear, input[type]._3-AYTwg::-ms-clear {\n    display: none;\n  }\n\n._3-AYTwg._326WaX1, input[type]._3-AYTwg._326WaX1 {\n    cursor: text;\n  }\n\n._3-AYTwg[autocomplete="off"]::-webkit-contacts-auto-fill-button, input[type]._3-AYTwg[autocomplete="off"]::-webkit-contacts-auto-fill-button {\n    display: none !important; /* stylelint-disable-line declaration-no-important */\n  }\n\n._3-AYTwg:-ms-input-placeholder, input[type]._3-AYTwg:-ms-input-placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n._3-AYTwg::-ms-input-placeholder, input[type]._3-AYTwg::-ms-input-placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n._3-AYTwg::placeholder, input[type]._3-AYTwg::placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n._2i2yBAM ._3-AYTwg,\n  ._2i2yBAM input[type]._3-AYTwg {\n    min-height: calc(' + theme.smallHeight + ' - 0.125rem);\n  }\n\n._1iV2AhM ._3-AYTwg,\n  ._1iV2AhM input[type]._3-AYTwg {\n    min-height: calc(' + theme.mediumHeight + ' - 0.125rem);\n  }\n\n._2K6_pEh ._3-AYTwg,\n  ._2K6_pEh input[type]._3-AYTwg {\n    min-height: calc(' + theme.largeHeight + ' - 0.125rem);\n  }\n\n._3hZdN6T {\n  height: 100%;\n  display: flex;\n  align-items: center;\n  -webkit-margin-start: ' + theme.inputPadding + ';\n          margin-inline-start: ' + theme.inputPadding + ';\n  -webkit-margin-end: 0;\n          margin-inline-end: 0;\n}\n\n[dir="ltr"] ._3hZdN6T {\n  margin-left: ' + theme.inputPadding + ';\n  margin-right: 0;\n}\n\n[dir="rtl"] ._3hZdN6T {\n  margin-right: ' + theme.inputPadding + ';\n  margin-left: 0;\n}\n\n._1xOjhei {\n  display: flex;\n  align-self: center;\n  -webkit-margin-end: ' + theme.inputPadding + ';\n          margin-inline-end: ' + theme.inputPadding + ';\n  -webkit-margin-start: 0;\n          margin-inline-start: 0;\n  pointer-events: none;\n  fill: ' + theme.iconColor + ';\n}\n\n[dir="ltr"] ._1xOjhei {\n  margin-right: ' + theme.inputPadding + ';\n  margin-left: 0;\n}\n\n[dir="rtl"] ._1xOjhei {\n  margin-left: ' + theme.inputPadding + ';\n  margin-right: 0;\n}\n\n.zQA62AW {\n  animation: none 0s ease 0s 1 normal none running;\n  backface-visibility: visible;\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  border: medium none currentColor;\n  border-collapse: separate;\n  border-image: none;\n  border-radius: 0;\n  border-spacing: 0;\n  bottom: auto;\n  box-shadow: none;\n  box-sizing: content-box;\n  caption-side: top;\n  clear: none;\n  clip: auto;\n  color: #000;\n  columns: auto;\n  column-count: auto;\n  column-fill: balance;\n  column-gap: normal;\n  column-rule: medium none currentColor;\n  column-span: 1;\n  column-width: auto;\n  content: normal;\n  counter-increment: none;\n  counter-reset: none;\n  cursor: auto;\n  direction: ltr;\n  display: inline;\n  empty-cells: show;\n  float: none;\n  font-family: serif;\n  font-size: medium;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  font-stretch: normal;\n  line-height: normal;\n  height: auto;\n  hyphens: none;\n  left: auto;\n  letter-spacing: normal;\n  list-style: disc outside none;\n  margin: 0;\n  max-height: none;\n  max-width: none;\n  min-height: 0;\n  min-width: 0;\n  opacity: 1;\n  orphans: 2;\n  outline: medium none invert;\n  overflow: visible;\n  overflow-x: visible;\n  overflow-y: visible;\n  padding: 0;\n  page-break-after: auto;\n  page-break-before: auto;\n  page-break-inside: auto;\n  perspective: none;\n  perspective-origin: 50% 50%;\n  position: static;\n  right: auto;\n  tab-size: 8;\n  table-layout: auto;\n  text-align: left;\n  text-align-last: auto;\n  text-decoration: none;\n  text-indent: 0;\n  text-shadow: none;\n  text-transform: none;\n  top: auto;\n  transform: none;\n  transform-origin: 50% 50% 0;\n  transform-style: flat;\n  transition: none 0s ease 0s;\n  unicode-bidi: normal;\n  vertical-align: baseline;\n  visibility: visible;\n  white-space: normal;\n  widows: 2;\n  width: auto;\n  word-spacing: normal;\n  z-index: auto;\n  all: initial;\n  font-family: inherit;\n  font-weight: inherit;\n  font-size: inherit;\n  line-height: inherit;\n  margin: 0;\n  text-align: inherit;\n}\n\n[dir="ltr"] .zQA62AW {\n  text-align: inherit;\n}\n\n[dir="rtl"] .zQA62AW {\n  text-align: inherit;\n}\n\n/* stylelint-enable selector-max-class */\n';
    };

    return tmpl.call(theme, theme);
  },
  'inputContainer': '_3G9Ro9g',
  'focus': 'G6k30pc',
  'invalid': 'QLFYDyp',
  'disabled': '_3TGN8qX',
  'small': '_2i2yBAM',
  'medium': '_1iV2AhM',
  'large': '_2K6_pEh',
  'inputLayout': '_1jHydYC',
  'input': '_3-AYTwg',
  'editable': '_326WaX1',
  'inputIcon': '_3hZdN6T',
  'icon': '_1xOjhei',
  'label': 'zQA62AW'
};


/**
---
parent: Select
---
**/
var SelectField = (_dec = (0, _uiThemeable2.default)(_theme2.default, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(SelectField, _Component);

  function SelectField(props) {
    _classCallCheck(this, SelectField);

    var _this = _possibleConstructorReturn(this, (SelectField.__proto__ || Object.getPrototypeOf(SelectField)).call(this, props));

    _this._menu = null;
    _this._input = null;
    _this._inputContainer = null;
    _this._timeouts = [];
    _this.timeoutId = null;

    _this.open = function () {
      _this.setState(function () {
        return { expanded: true };
      }, function () {
        _this.highlightSelectedOption();
        _this.props.onOpen();
      });
    };

    _this.close = function (event, selectedOption) {
      _this.setState(function () {
        return {
          expanded: false
        };
      });
      _this.props.onClose(event, selectedOption);
    };

    _this.select = function (event, selectedOption) {
      _this.props.onSelect(event, selectedOption);
      if (_this.props.closeOnSelect) {
        event.preventDefault();
        _this.close(event, selectedOption);
      }
    };

    _this.highlightSelectedOption = function () {
      if (_this.selectedIndex >= 0) {
        // setTimeout forced due to the need to wait for the browser to render the menu
        _this._timeouts.push(setTimeout(function () {
          _this.highlightOption(_this.selectedIndex);
        }, 0));
      } else {
        _this.highlightOption(0);
      }
    };

    _this.highlightOption = function (index) {
      var option = _this.props.options[index];
      if (!_this.props.loadingText && option) {
        if (option.disabled || option.groupLabel) {
          // target index is disabled, try next option instead
          if (index > _this.state.highlightedIndex && index + 1 < _this.props.options.length) {
            _this.highlightOption(index + 1);
          } else if (index < _this.state.highlightedIndex && index - 1 >= 0) {
            _this.highlightOption(index - 1);
          }
          return;
        }

        _this.setState({
          highlightedIndex: index
        });

        _this.props.onHighlight(index);

        // Update scrolling
        var menu = (0, _findDOMNode2.default)(_this._menu);
        if (menu) {
          var item = menu.querySelectorAll('li')[index];
          var parentTop = menu.scrollTop;
          var elemTop = item.offsetTop;
          var parentBottom = parentTop + menu.clientHeight;
          var elemBottom = elemTop + item.clientHeight;

          if (elemBottom > parentBottom) {
            menu.scrollTop = elemBottom - menu.clientHeight;
          } else if (elemTop < parentTop) {
            menu.scrollTop = elemTop;
          }
        }
      }
    };

    _this.handleHomeKey = function (event) {
      if (_this.props.options.length > 0) {
        _this.highlightOption(0);
      }
    };

    _this.handleEndKey = function (event) {
      if (_this.props.options.length > 0) {
        _this.highlightOption(_this.props.options.length - 1);
      }
    };

    _this.handleEnterKey = function (event) {
      if (_this.expanded && !_this.props.loadingText && _this.props.options.length) {
        _this.select(event, _this.props.options[_this.state.highlightedIndex]);
      }
    };

    _this.handleUpArrowKey = function (event) {
      if (_this.expanded) {
        var index = Math.max(0, _this.state.highlightedIndex - 1);
        var option = _this.props.options[index];
        var el = _this._menu.querySelectorAll('li')[index];

        _this.highlightOption(index);
        // set dom focus so VO will read highlighted option correctly
        if (el && option && !option.disabled && !option.groupLabel) {
          el.focus();
        }
      } else {
        _this.open();
      }
    };

    _this.handleDownArrowKey = function (event) {
      if (_this.expanded) {
        var index = Math.min(_this.props.options.length - 1, _this.state.highlightedIndex + 1);
        var option = _this.props.options[index];
        var el = _this._menu.querySelectorAll('li')[index];

        _this.highlightOption(index);
        // set dom focus so VO will read highlighted option correctly
        if (el && option && !option.disabled && !option.groupLabel) {
          el.focus();
        }
      } else {
        _this.open();
      }
    };

    _this.handleSpaceKey = function (event) {
      if (!_this.expanded) {
        event.preventDefault();
        _this.open();
      }
    };

    _this.keyMap = {
      up: _this.handleUpArrowKey,
      down: _this.handleDownArrowKey,
      home: _this.handleHomeKey,
      end: _this.handleEndKey,
      enter: _this.handleEnterKey,
      space: _this.handleSpaceKey
    };

    _this.handlePositioned = function () {
      _this.setState({ positioned: true }, function () {
        return _this.props.onPositioned();
      });
    };

    _this.handleKeyDown = function (event) {
      var key = _keycode2.default.names[event.keyCode];
      if (_this.keyMap.hasOwnProperty(key)) {
        if ((key !== 'enter' || _this.expanded) && key !== 'space') {
          event.preventDefault();
        }
        _this.keyMap[key](event);
      } else {
        // return dom focus to input when the user tries to type
        if (_this._input && _this.props.editable) {
          _this._input.focus();
        }
      }
      _this.props.onKeyDown(event);
    };

    _this.handleKeyUp = function (event) {
      var key = _keycode2.default.names[event.keyCode];
      if (key === 'esc' && _this.expanded) {
        event.preventDefault();
        // ensure focus returns to input
        if (_this._input) {
          _this._input.focus();
        }
        _this.close(event);
      }
      _this.props.onKeyUp(event);
    };

    _this.handleFocus = function (event) {
      _this.setState(function () {
        return { focus: true };
      });
      _this.props.onFocus(event);
    };

    _this.handleBlur = function (event) {
      event.persist();

      var el = event.target.tagName === 'INPUT' ? _this._menu : _this._inputContainer;

      _this.setState(function () {
        return { focus: false };
      }, function () {
        if (_this.expanded) {
          _this._timeouts.push(setTimeout(function () {
            // timeout so we can check where focus went to
            if (!(0, _containsActiveElement2.default)(el)) {
              _this.close(event);
            }
          }, 0));
        }
        _this.props.onBlur(event);
      });
    };

    _this.handleClick = function (event) {
      if (!_this.expanded) {
        event.preventDefault();
        // make sure safari focuses readonly input
        if (_this._input && !_this.props.editable) {
          _this._input.focus();
        }
        _this.open();
      }
      _this.props.onClick(event);
    };

    _this.handleChange = function (event) {
      if (!_this.expanded) {
        _this.open();
      }
      _this.props.onInputChange(event, event.target.value);
    };

    _this.handleMenuRef = function (node) {
      _this._menu = node;
    };

    _this.handleInputRef = function (node) {
      _this._input = node;
    };

    _this.handleInputContainerRef = function (node) {
      _this._inputContainer = node;
    };

    _this.state = {
      focus: false,
      highlightedIndex: _this.getSelectedIndex(props),
      expanded: false,
      positioned: false
    };

    _this._defaultId = (0, _generateElementId2.default)('Select');
    _this._optionsId = (0, _generateElementId2.default)('Select-Options');
    _this._assistId = (0, _generateElementId2.default)('Select-assistiveText');
    return _this;
  }

  _createClass(SelectField, [{
    key: 'getSelectedIndex',
    value: function getSelectedIndex(props) {
      if (props.selectedOption) {
        var index = props.options.findIndex(function (option) {
          return (0, _getOptionId2.default)(option) === (0, _getOptionId2.default)(props.selectedOption);
        });
        return Math.max(index, 0);
      } else {
        return -1;
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.options !== nextProps.options) {
        this.highlightSelectedOption();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: 'renderIcon',
    value: function renderIcon() {
      if (typeof this.props.selectedOption.icon === 'function') {
        var Icon = this.props.selectedOption.icon;
        return _react2.default.createElement(
          'span',
          { className: styles.inputIcon },
          _react2.default.createElement(Icon, null)
        );
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          size = _props.size,
          disabled = _props.disabled,
          readOnly = _props.readOnly,
          editable = _props.editable,
          required = _props.required,
          width = _props.width,
          options = _props.options,
          selectedOption = _props.selectedOption,
          loadingText = _props.loadingText,
          emptyOption = _props.emptyOption,
          visibleOptionsCount = _props.visibleOptionsCount,
          children = _props.children,
          onStaticClick = _props.onStaticClick,
          assistiveText = _props.assistiveText,
          layout = _props.layout,
          announcement = _props.announcement;


      var inputProps = (0, _passthroughProps.omitProps)(this.props, SelectField.propTypes, ['allowEmpty', 'assistiveText', 'value'].concat(_toConsumableArray(Object.keys(_FormField2.default.propTypes))));

      var highlightedOption = options[this.state.highlightedIndex];
      if (highlightedOption) {
        inputProps['aria-activedescendant'] = this._optionsId + '_' + highlightedOption.id;
      } else {
        inputProps['aria-activedescendant'] = null;
      }

      var wrappedLabel =
      // eslint-disable-next-line jsx-a11y/label-has-for
      _react2.default.createElement(
        'label',
        {
          htmlFor: this.id,
          className: styles.label
        },
        this.props.label
      );

      if (!(0, _hasVisibleChildren2.default)(this.props.label)) {
        wrappedLabel = _react2.default.createElement(
          _ScreenReaderContent2.default,
          null,
          wrappedLabel
        );
      }

      return _react2.default.createElement(
        _FormFieldLayout2.default,
        Object.assign({}, (0, _passthroughProps.pickProps)(this.props, _FormFieldLayout2.default.propTypes), {
          as: 'span',
          label: wrappedLabel,
          id: this.id,
          vAlign: layout === 'inline' ? 'middle' : null
        }),
        _react2.default.createElement(
          'span',
          {
            style: {
              width: width || 'auto'
            },
            ref: this.handleInputContainerRef,
            className: (0, _classnames4.default)(styles.inputContainer, (_classnames = {}, _defineProperty(_classnames, styles.invalid, this.invalid), _defineProperty(_classnames, styles.disabled, disabled), _defineProperty(_classnames, styles[size], size), _defineProperty(_classnames, styles.focus, this.state.focus), _classnames))
          },
          children,
          _react2.default.createElement(
            'span',
            { className: styles.inputLayout },
            selectedOption && this.renderIcon(),
            _react2.default.createElement('input', Object.assign({}, inputProps, {
              id: this.id,
              className: (0, _classnames4.default)(styles.input, _defineProperty({}, styles.editable, editable)),
              onFocus: this.handleFocus,
              onClick: this.handleClick,
              onChange: editable ? this.handleChange : null,
              onKeyDown: this.handleKeyDown,
              onKeyUp: this.handleKeyUp,
              onBlur: this.handleBlur,
              type: 'text',
              ref: (0, _createChainedFunction2.default)(this.props.inputRef, this.handleInputRef),
              role: 'combobox',
              'aria-expanded': this.expanded,
              'aria-owns': this._optionsId,
              'aria-describedby': this._assistId,
              'aria-controls': this._optionsId,
              'aria-autocomplete': editable ? 'list' : null,
              'aria-haspopup': 'true',
              autoComplete: editable ? 'off' : null,
              required: required,
              'aria-required': required,
              'aria-invalid': this.invalid ? 'true' : null,
              readOnly: !editable,
              disabled: disabled || readOnly,
              'aria-disabled': disabled || readOnly ? 'true' : null
            })),
            _react2.default.createElement(_IconArrowDown2.default, { className: styles.icon })
          )
        ),
        _react2.default.createElement(
          _Position2.default,
          {
            trackPosition: this.expanded,
            placement: this.placement,
            onPositioned: this.handlePositioned,
            target: this._inputContainer,
            mountNode: this._inputContainer
          },
          _react2.default.createElement(
            _Position.PositionContent,
            null,
            _react2.default.createElement(_SelectOptionsList2.default, {
              options: options,
              selectedOption: selectedOption,
              optionsId: this._optionsId,
              menuRef: this.handleMenuRef,
              visibleOptionsCount: visibleOptionsCount,
              loadingText: loadingText,
              emptyOption: emptyOption,
              onStaticClick: onStaticClick,
              onHighlightOption: this.highlightOption,
              onSelect: this.select,
              expanded: this.state.expanded,
              onKeyDown: this.handleKeyDown,
              onKeyUp: this.handleKeyUp,
              onBlur: this.handleBlur,
              highlightedIndex: this.state.highlightedIndex,
              maxWidth: this.props.optionsMaxWidth
            })
          )
        ),
        _react2.default.createElement(
          'span',
          {
            id: this._assistId,
            style: {
              display: 'none'
            }
          },
          assistiveText
        ),
        _react2.default.createElement(
          _ScreenReaderContent2.default,
          null,
          _react2.default.createElement(
            'span',
            {
              role: 'log',
              'aria-live': 'polite',
              'aria-atomic': 'true'
            },
            announcement
          )
        )
      );
    }
  }, {
    key: 'id',
    get: function get() {
      return this.props.id || this._defaultId;
    }
  }, {
    key: 'expanded',
    get: function get() {
      return this.state.positioned && this.state.expanded;
    }
  }, {
    key: 'placement',
    get: function get() {
      if (this.expanded) {
        return this.props.placement || 'bottom stretch';
      } else {
        return 'offscreen';
      }
    }
  }, {
    key: 'invalid',
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: 'selectedIndex',
    get: function get() {
      return this.getSelectedIndex(this.props);
    }
  }]);

  SelectField.displayName = 'SelectField'
  ;
  return SelectField;
}(_react.Component), _class2.propTypes = {
  /**
  * the selected value (must be accompanied by an `onSelect` prop)
  */
  selectedOption: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    children: _propTypes2.default.node,
    disabled: _propTypes2.default.bool,
    icon: _propTypes2.default.func,
    groupLabel: _propTypes2.default.bool
  })]),
  options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    label: _propTypes2.default.string.isRequired,
    value: _propTypes2.default.string.isRequired,
    id: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    children: _propTypes2.default.node,
    disabled: _propTypes2.default.bool,
    icon: _propTypes2.default.func,
    groupLabel: _propTypes2.default.bool
  })),
  /**
   * The placement of the menu in relation to the input, passed down to Position
   */
  placement: _LayoutPropTypes2.default.placement,
  label: _propTypes2.default.node.isRequired,
  messages: _propTypes2.default.arrayOf(_FormPropTypes2.default.message),
  size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
  layout: _propTypes2.default.oneOf(['stacked', 'inline']),
  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: _propTypes2.default.string,
  /**
   * Give the Spinner a title to be read by screenreaders. Disables menu
   * interaction and renders a Spinner in its place.
   */
  loadingText: _propTypes2.default.string,
  /**
  * Determines whether the user can type in the input
  */
  editable: _propTypes2.default.bool,
  /**
   * The menu content to render when no options are present or are filtered away
   */
  emptyOption: _propTypes2.default.node,
  /**
   * The amount of options that are visible without scrolling
   */
  visibleOptionsCount: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  /**
   * Custom text to be read by the screenreader when Select is focused
   */
  assistiveText: _propTypes2.default.string,
  /**
   * Additional text to provide screenreader feedback upon user action
   */
  announcement: _propTypes2.default.string,
  /**
   * Callback fired when the options have been positioned
   */
  onPositioned: _propTypes2.default.func,
  /**
   * Callback fired on the option selection
   */
  onSelect: _propTypes2.default.func,
  /**
   * Callback fired when the empty option is selected by click
   */
  onStaticClick: _propTypes2.default.func,
  /**
   * Callback fired when an option gets highlighted
   */
  onHighlight: _propTypes2.default.func,
  /**
   * Width of the whole container
   */
  width: _propTypes2.default.string,
  /**
   * Determines whether or not to display the FormField inline
   */
  inline: _propTypes2.default.bool,
  /**
   * Children to be rendered inside the input container before the actual input
   */
  children: _propTypes2.default.node,
  /**
   * Callback fired when the input gains focus
   */
  onFocus: _propTypes2.default.func,
  /**
   * Callback fired when the input container lost focus
   */
  onBlur: _propTypes2.default.func,
  /**
   * Callback fired on keyDown for the input
   */
  onKeyDown: _propTypes2.default.func,
  /**
   * Callback fired on keyUp for the input
   */
  onKeyUp: _propTypes2.default.func,
  /**
   * Callback fired on click for the input
   */
  onClick: _propTypes2.default.func,
  /**
   * Callback fired on change for the input
   */
  onInputChange: _propTypes2.default.func,
  /**
   * Callback fired when the menu is opened
   */
  onOpen: _propTypes2.default.func,
  /**
   * Callback fired when the menu is closed
   */
  onClose: _propTypes2.default.func,
  /**
   * Optional id for the FormField
   */
  id: _propTypes2.default.string,
  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: _propTypes2.default.func,
  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  readOnly: _propTypes2.default.bool,
  required: _propTypes2.default.bool
}, _class2.defaultProps = {
  emptyOption: '---',
  selectedOption: null,
  size: 'medium',
  loadingText: null,
  announcement: null,
  options: [],
  visibleOptionsCount: 8,
  closeOnSelect: true,
  editable: false,
  inline: false,
  onPositioned: function onPositioned() {},
  onSelect: function onSelect(event, selectedOption) {},
  onStaticClick: function onStaticClick(event) {},
  onHighlight: function onHighlight(event) {},
  onClick: function onClick(event) {},
  onInputChange: function onInputChange(event) {},
  onFocus: function onFocus(event) {},
  onBlur: function onBlur(event) {},
  onKeyDown: function onKeyDown(event) {},
  onKeyUp: function onKeyUp(event) {},
  onOpen: function onOpen(event) {},
  onClose: function onClose(event) {}
}, _temp)) || _class);
exports.default = SelectField;