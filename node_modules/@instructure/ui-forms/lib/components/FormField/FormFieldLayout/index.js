'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp; /*
                                   * The MIT License (MIT)
                                   *
                                   * Copyright (c) 2015 - present Instructure, Inc.
                                   *
                                   * Permission is hereby granted, free of charge, to any person obtaining a copy
                                   * of this software and associated documentation files (the "Software"), to deal
                                   * in the Software without restriction, including without limitation the rights
                                   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                   * copies of the Software, and to permit persons to whom the Software is
                                   * furnished to do so, subject to the following conditions:
                                   *
                                   * The above copyright notice and this permission notice shall be included in all
                                   * copies or substantial portions of the Software.
                                   *
                                   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                   * SOFTWARE.
                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ScreenReaderContent = require('@instructure/ui-a11y/lib/components/ScreenReaderContent');

var _ScreenReaderContent2 = _interopRequireDefault(_ScreenReaderContent);

var _Grid = require('@instructure/ui-layout/lib/components/Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _warning = require('@instructure/ui-utils/lib/warning');

var _warning2 = _interopRequireDefault(_warning);

var _uiThemeable = require('@instructure/ui-themeable');

var _uiThemeable2 = _interopRequireDefault(_uiThemeable);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _getElementType = require('@instructure/ui-utils/lib/react/getElementType');

var _getElementType2 = _interopRequireDefault(_getElementType);

var _generateElementId = require('@instructure/ui-utils/lib/dom/generateElementId');

var _generateElementId2 = _interopRequireDefault(_generateElementId);

var _hasVisibleChildren = require('@instructure/ui-a11y/lib/utils/hasVisibleChildren');

var _hasVisibleChildren2 = _interopRequireDefault(_hasVisibleChildren);

var _FormFieldLabel = require('../FormFieldLabel');

var _FormFieldLabel2 = _interopRequireDefault(_FormFieldLabel);

var _FormFieldMessages = require('../FormFieldMessages');

var _FormFieldMessages2 = _interopRequireDefault(_FormFieldMessages);

var _FormPropTypes = require('../../../utils/FormPropTypes');

var _FormPropTypes2 = _interopRequireDefault(_FormPropTypes);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.gOTRbsh {\n  animation: none 0s ease 0s 1 normal none running;\n  backface-visibility: visible;\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  border: medium none currentColor;\n  border-collapse: separate;\n  border-image: none;\n  border-radius: 0;\n  border-spacing: 0;\n  bottom: auto;\n  box-shadow: none;\n  box-sizing: content-box;\n  caption-side: top;\n  clear: none;\n  clip: auto;\n  color: #000;\n  columns: auto;\n  column-count: auto;\n  column-fill: balance;\n  column-gap: normal;\n  column-rule: medium none currentColor;\n  column-span: 1;\n  column-width: auto;\n  content: normal;\n  counter-increment: none;\n  counter-reset: none;\n  cursor: auto;\n  direction: ltr;\n  display: inline;\n  empty-cells: show;\n  float: none;\n  font-family: serif;\n  font-size: medium;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  font-stretch: normal;\n  line-height: normal;\n  height: auto;\n  hyphens: none;\n  left: auto;\n  letter-spacing: normal;\n  list-style: disc outside none;\n  margin: 0;\n  max-height: none;\n  max-width: none;\n  min-height: 0;\n  min-width: 0;\n  opacity: 1;\n  orphans: 2;\n  outline: medium none invert;\n  overflow: visible;\n  overflow-x: visible;\n  overflow-y: visible;\n  padding: 0;\n  page-break-after: auto;\n  page-break-before: auto;\n  page-break-inside: auto;\n  perspective: none;\n  perspective-origin: 50% 50%;\n  position: static;\n  right: auto;\n  tab-size: 8;\n  table-layout: auto;\n  text-align: left;\n  text-align-last: auto;\n  text-decoration: none;\n  text-indent: 0;\n  text-shadow: none;\n  text-transform: none;\n  top: auto;\n  transform: none;\n  transform-origin: 50% 50% 0;\n  transform-style: flat;\n  transition: none 0s ease 0s;\n  unicode-bidi: normal;\n  vertical-align: baseline;\n  visibility: visible;\n  white-space: normal;\n  widows: 2;\n  width: auto;\n  word-spacing: normal;\n  z-index: auto;\n  all: initial;\n  border: 0;\n  padding: 0;\n  margin: 0;\n  min-width: 0;\n  direction: inherit;\n  text-align: start;\n  opacity: inherit;\n  display: block;\n  width: 100%;\n}\n\n[dir="ltr"] .gOTRbsh {\n  text-align: left;\n}\n\n[dir="rtl"] .gOTRbsh {\n  text-align: right;\n}\n\n.B_Jslgu {\n  display: inline-block;\n  vertical-align: middle;\n  width: auto;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': 'gOTRbsh',
  'inline': 'B_Jslgu'
};


/**
---
parent: FormField
---
**/
var FormFieldLayout = (_dec = (0, _uiThemeable2.default)(_theme2.default, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(FormFieldLayout, _Component);

  function FormFieldLayout(props) {
    _classCallCheck(this, FormFieldLayout);

    var _this = _possibleConstructorReturn(this, (FormFieldLayout.__proto__ || Object.getPrototypeOf(FormFieldLayout)).call(this));

    _this._messagesId = props.messagesId || (0, _generateElementId2.default)('FormFieldLayout-messages');

    if (props.inline && props.layout === 'inline') {
      (0, _warning2.default)(!!props.width, '[FormFieldLayout] The inline prop is true, and the layout is set to inline.\n        This will cause a layout issue in Internet Explorer 11 unless you also add a\n        value for the width prop.');
    }
    return _this;
  }

  _createClass(FormFieldLayout, [{
    key: 'renderLabel',
    value: function renderLabel() {
      var isLegend = this.elementType === 'fieldset';

      return _react2.default.createElement(
        _FormFieldLabel2.default,
        {
          as: isLegend ? 'legend' : undefined // eslint-disable-line no-undefined
        },
        this.props.label,
        isLegend && this.renderScreenReaderMessages()
      );
    }
  }, {
    key: 'renderVisibleLabel',
    value: function renderVisibleLabel() {
      return this.hasVisibleLabel ? _react2.default.createElement(
        _Grid.GridCol,
        {
          textAlign: this.props.labelAlign,
          width: this.inlineContainerAndLabel ? 'auto' : 3
        },
        this.renderLabel()
      ) : null;
    }
  }, {
    key: 'renderScreenReaderLabel',
    value: function renderScreenReaderLabel() {
      // label with no visible content should render inside GridCol
      return !this.hasVisibleLabel ? _react2.default.createElement(
        _ScreenReaderContent2.default,
        null,
        this.renderLabel()
      ) : null;
    }
  }, {
    key: 'renderMessages',
    value: function renderMessages() {
      return _react2.default.createElement(_FormFieldMessages2.default, { id: this._messagesId, messages: this.props.messages });
    }
  }, {
    key: 'renderVisibleMessages',
    value: function renderVisibleMessages() {
      return this.hasMessages ? _react2.default.createElement(
        _Grid.GridRow,
        null,
        _react2.default.createElement(
          _Grid.GridCol,
          {
            offset: this.inlineContainerAndLabel ? null : 3,
            textAlign: this.inlineContainerAndLabel ? 'end' : null
          },
          _react2.default.createElement(_FormFieldMessages2.default, { id: this._messagesId, messages: this.props.messages })
        )
      ) : null;
    }
  }, {
    key: 'renderScreenReaderMessages',
    value: function renderScreenReaderMessages() {
      return this.hasMessages ? _react2.default.createElement(
        _ScreenReaderContent2.default,
        null,
        _react2.default.createElement(_FormFieldMessages2.default, { messages: this.props.messages })
      ) : null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _classes;

      var ElementType = this.elementType;

      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles.inline, this.props.inline), _classes);

      return _react2.default.createElement(
        ElementType,
        Object.assign({}, (0, _passthroughProps.omitProps)(this.props, Object.assign({}, FormFieldLayout.propTypes, _Grid2.default.propTypes)), {
          className: (0, _classnames2.default)(classes),
          'aria-describedby': this.hasMessages ? this._messagesId : null
        }),
        _react2.default.createElement(
          _Grid2.default,
          Object.assign({
            rowSpacing: 'small',
            colSpacing: 'small',
            startAt: this.props.layout === 'inline' && this.hasVisibleLabel ? 'medium' : null
          }, (0, _passthroughProps.pickProps)(this.props, _Grid2.default.propTypes)),
          _react2.default.createElement(
            _Grid.GridRow,
            null,
            this.renderVisibleLabel(),
            _react2.default.createElement(
              _Grid.GridCol,
              { width: this.inlineContainerAndLabel ? 'auto' : null },
              this.renderScreenReaderLabel(),
              this.props.children
            )
          ),
          this.renderVisibleMessages()
        )
      );
    }
  }, {
    key: 'hasVisibleLabel',
    get: function get() {
      return this.props.label && (0, _hasVisibleChildren2.default)(this.props.label);
    }
  }, {
    key: 'hasMessages',
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: 'elementType',
    get: function get() {
      return (0, _getElementType2.default)(FormFieldLayout, this.props);
    }
  }, {
    key: 'inlineContainerAndLabel',
    get: function get() {
      // Return if both the component container and label will display inline
      return this.props.inline && this.props.layout === 'inline';
    }
  }]);

  FormFieldLayout.displayName = 'FormFieldLayout'
  ;
  return FormFieldLayout;
}(_react.Component), _class2.propTypes = {
  label: _propTypes2.default.node.isRequired,
  /**
  * the id of the input (to link it to its label for a11y)
  */
  id: _propTypes2.default.string,
  /**
  * the element type to render as
  */
  as: _CustomPropTypes2.default.elementType,
  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: _propTypes2.default.arrayOf(_FormPropTypes2.default.message),
  /**
  * id for the form field messages
  */
  messagesId: _propTypes2.default.string,
  children: _propTypes2.default.node,
  inline: _propTypes2.default.bool,
  layout: _propTypes2.default.oneOf(['stacked', 'inline']),
  labelAlign: _propTypes2.default.oneOf(['start', 'end']),
  width: _propTypes2.default.string
}, _class2.defaultProps = {
  inline: false,
  layout: 'stacked',
  as: 'label',
  labelAlign: 'end'
}, _temp)) || _class);
exports.default = FormFieldLayout;