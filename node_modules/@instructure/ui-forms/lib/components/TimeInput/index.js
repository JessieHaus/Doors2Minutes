'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp; /*
                                   * The MIT License (MIT)
                                   *
                                   * Copyright (c) 2015 - present Instructure, Inc.
                                   *
                                   * Permission is hereby granted, free of charge, to any person obtaining a copy
                                   * of this software and associated documentation files (the "Software"), to deal
                                   * in the Software without restriction, including without limitation the rights
                                   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                   * copies of the Software, and to permit persons to whom the Software is
                                   * furnished to do so, subject to the following conditions:
                                   *
                                   * The above copyright notice and this permission notice shall be included in all
                                   * copies or substantial portions of the Software.
                                   *
                                   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                   * SOFTWARE.
                                   */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _uiThemeable = require('@instructure/ui-themeable');

var _uiThemeable2 = _interopRequireDefault(_uiThemeable);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _I18nPropTypes = require('@instructure/ui-i18n/lib/utils/I18nPropTypes');

var _I18nPropTypes2 = _interopRequireDefault(_I18nPropTypes);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _DateTime = require('@instructure/ui-i18n/lib/DateTime');

var _DateTime2 = _interopRequireDefault(_DateTime);

var _Locale = require('@instructure/ui-i18n/lib/Locale');

var _Locale2 = _interopRequireDefault(_Locale);

var _Select = require('../Select');

var _Select2 = _interopRequireDefault(_Select);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n/* Variables are defined in ./theme.js */\n\n._7_r6C2t {\n  font-size: ' + theme.fontSize + ';\n  font-family: ' + theme.fontFamily + ';\n  font-weight: ' + theme.fontWeight + ';\n  color: ' + theme.color + ';\n  background: ' + theme.background + ';\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': '_7_r6C2t'
};


/**
---
category: components/forms
---
**/
var TimeInput = (_dec = (0, _uiThemeable2.default)(_theme2.default, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(TimeInput, _Component);

  function TimeInput() {
    _classCallCheck(this, TimeInput);

    return _possibleConstructorReturn(this, (TimeInput.__proto__ || Object.getPrototypeOf(TimeInput)).apply(this, arguments));
  }

  _createClass(TimeInput, [{
    key: 'locale',
    value: function locale() {
      return this.props.locale || this.context.locale || _Locale2.default.browserLocale();
    }
  }, {
    key: 'timezone',
    value: function timezone() {
      return this.props.timezone || this.context.timezone || _DateTime2.default.browserTimeZone();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          defaultToFirstOption = _props.defaultToFirstOption,
          defaultValue = _props.defaultValue,
          format = _props.format,
          label = _props.label,
          onChange = _props.onChange,
          step = _props.step,
          value = _props.value,
          disabled = _props.disabled,
          readOnly = _props.readOnly;


      var locale = this.locale();
      var timezone = this.timezone();

      var ignoredProps = ['defaultOption', 'selectedOption'];
      var selectProps = (0, _passthroughProps.pickProps)(this.props, (0, _passthroughProps.omitProps)(_Select2.default.propTypes, {}, ignoredProps));

      var options = this.renderOptions(defaultValue, format, locale, step, timezone, value);
      var defaultOption = this.getDefaultOption(defaultToFirstOption, defaultValue, options);
      var selectedOption = this.getSelectedOption(format, locale, timezone, value);

      return _react2.default.createElement(
        _Select2.default,
        Object.assign({
          ref: function ref(el) {
            _this2._select = el;
          },
          editable: true,
          label: label,
          defaultOption: defaultOption,
          selectedOption: selectedOption,
          onChange: onChange,
          disabled: disabled,
          readOnly: readOnly
        }, selectProps),
        options
      );
    }
  }, {
    key: 'renderOptions',
    value: function renderOptions(defaultValue, format, locale, step, timezone, value) {
      var date = this.getBaseDateForRendering(defaultValue, locale, timezone, value);
      var options = [];
      for (var hour = 0; hour < 24; hour++) {
        for (var minute = 0; minute < 60 / step; minute++) {
          var minutes = minute * step;
          date.hour(hour).minute(minutes);
          options.push(_react2.default.createElement(
            'option',
            { key: hour + ':' + minutes, value: date.toISOString() },
            date.format(format)
          ));
        }
      }
      return options;
    }
  }, {
    key: 'getBaseDateForRendering',
    value: function getBaseDateForRendering(defaultValue, locale, timezone, value) {
      var baseDate = void 0;
      var baseValue = value || defaultValue;
      if (baseValue) {
        baseDate = _DateTime2.default.parse(baseValue, locale, timezone);
      } else {
        baseDate = _DateTime2.default.now(locale, timezone);
      }
      return baseDate.second(0).millisecond(0);
    }

    // TODO: Change Autocomplete to allow specifying a string for selectedOption (like defaultOption allows)

  }, {
    key: 'getSelectedOption',
    value: function getSelectedOption(format, locale, timezone, value) {
      if (!value) {
        return;
      }

      return {
        value: value,
        label: _DateTime2.default.parse(value, locale, timezone).format(format)
      };
    }
  }, {
    key: 'getDefaultOption',
    value: function getDefaultOption(defaultToFirstOption, defaultValue, options) {
      // eslint-disable-next-line no-undefined
      return defaultValue || (defaultToFirstOption ? options[0].props.value : undefined);
    }
  }, {
    key: 'focused',

    /* eslint-enable react/require-default-props */

    get: function get() {
      return this._select && this._select.focused;
    }
    /* eslint-disable react/require-default-props */

  }]);

  TimeInput.displayName = 'TimeInput'
  ;
  return TimeInput;
}(_react.Component), _class2.propTypes = {
  /**
   * Whether to default to the first option when `defaultValue` hasn't been specified.
   */
  defaultToFirstOption: _propTypes2.default.bool,
  /**
   * An ISO 8601 formatted date string to use if `value` isn't provided.
   */
  defaultValue: _I18nPropTypes2.default.iso8601,
  /**
   * The format to use when displaying the possible and currently selected options.
   *
   * See [moment.js formats](https://momentjs.com/docs/#/displaying/format/) for the list of available formats.
   */
  format: _propTypes2.default.string,
  /**
   * The label associated with the underlying [TextInput](#TextInput).
   */
  label: _propTypes2.default.node.isRequired,
  /**
   * A standard language identifier.
   *
   * See [moment.js i18n](https://momentjs.com/docs/#/i18n/) for more details.
   *
   * This property can also be set via a context property and if both are set then the component property takes
   * precedence over the context property.
   *
   * The web browser's locale will be used if no value is set via a component property or a context
   * property.
   */
  locale: _propTypes2.default.string,
  /**
   * Callback fired when one of the menu options gets selected
   */
  onChange: _propTypes2.default.func,
  /**
   * The number of minutes to increment by when generating the allowable options.
   */
  step: _propTypes2.default.oneOf([5, 10, 15, 20, 30, 60]),
  /**
   * A timezone identifier in the format: Area/Location
   *
   * See [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for the list
   * of possible options.
   *
   * This property can also be set via a context property and if both are set then the component property takes
   * precedence over the context property.
   *
   * The web browser's timezone will be used if no value is set via a component property or a context
   * property.
   */
  timezone: _propTypes2.default.string,
  /**
   * An ISO 8601 formatted date string representing the current selected value
   * (must be accompanied by an onChange prop).
   */
  value: _CustomPropTypes2.default.controllable(_I18nPropTypes2.default.iso8601),
  /**
   * Whether or not to disable the select
   */
  disabled: _propTypes2.default.bool,
  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: _propTypes2.default.bool }, _class2.defaultProps = {
  defaultToFirstOption: false,
  format: 'LT',
  step: 30
}, _class2.contextTypes = {
  locale: _propTypes2.default.string,
  timezone: _propTypes2.default.string
}, _temp)) || _class);
exports.default = TimeInput;