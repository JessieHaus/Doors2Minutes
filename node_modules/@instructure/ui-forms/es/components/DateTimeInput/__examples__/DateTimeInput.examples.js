var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React from 'react';
import ScreenReaderContent from '@instructure/ui-a11y/lib/components/ScreenReaderContent';
import DateTimeInput from '../index';

export var placeholder = function placeholder() {
  return React.createElement(DateTimeInput, {
    description: 'Pick a date and time',
    datePlaceholder: 'Choose a date',
    dateLabel: 'Date',
    timeLabel: 'Time',
    datePreviousLabel: 'previous month',
    dateNextLabel: 'next month',
    invalidDateTimeMessage: function invalidDateTimeMessage(dvalue, tvalue) {
      return '\'' + dvalue + ' ' + tvalue + '\' is not valid.';
    }
  });
};

export var disabled = function disabled() {
  return React.createElement(DateTimeInput, {
    description: 'Pick a date and time',
    datePlaceholder: 'Choose a date',
    dateLabel: 'Date',
    timeLabel: 'Time',
    datePreviousLabel: 'previous month',
    dateNextLabel: 'next month',
    invalidDateTimeMessage: function invalidDateTimeMessage(dvalue, tvalue) {
      return '\'' + dvalue + ' ' + tvalue + '\' is not valid.';
    },
    disabled: true
  });
};

export var defaultValue = function defaultValue() {
  return React.createElement(DateTimeInput, {
    description: 'Pick a date and time',
    datePlaceholder: 'Choose a date',
    dateLabel: 'Date',
    timeLabel: 'Time',
    datePreviousLabel: 'previous month',
    dateNextLabel: 'next month',
    invalidDateTimeMessage: function invalidDateTimeMessage(dvalue, tvalue) {
      return '\'' + dvalue + ' ' + tvalue + '\' is not valid.';
    },
    defaultValue: '2018-01-18T13:10'
  });
};

export var stacked = function stacked() {
  return React.createElement(DateTimeInput, {
    description: 'Pick a date and time',
    datePlaceholder: 'Choose a date',
    dateLabel: 'Date',
    timeLabel: 'Time',
    datePreviousLabel: 'previous month',
    dateNextLabel: 'next month',
    invalidDateTimeMessage: function invalidDateTimeMessage(dvalue, tvalue) {
      return '\'' + dvalue + ' ' + tvalue + '\' is not valid.';
    },
    layout: 'stacked'
  });
};

export var columns = function columns() {
  return React.createElement(DateTimeInput, {
    description: 'Pick a date and time',
    datePlaceholder: 'Choose a date',
    dateLabel: 'Date',
    timeLabel: 'Time',
    datePreviousLabel: 'previous month',
    dateNextLabel: 'next month',
    invalidDateTimeMessage: function invalidDateTimeMessage(dvalue, tvalue) {
      return '\'' + dvalue + ' ' + tvalue + '\' is not valid.';
    },
    layout: 'columns'
  });
};

export var locale = function locale() {
  return React.createElement(DateTimeInput, {
    description: 'Pick a date and time',
    datePlaceholder: 'Choose a date',
    dateLabel: 'Date',
    timeLabel: 'Time',
    datePreviousLabel: 'previous month',
    dateNextLabel: 'next month',
    invalidDateTimeMessage: function invalidDateTimeMessage(dvalue, tvalue) {
      return '\'' + dvalue + ' ' + tvalue + '\' is not valid.';
    },
    defaultValue: '2018-01-18T13:10',
    locale: 'fr'
  });
};

var RequiredExample = function (_React$Component) {
  _inherits(RequiredExample, _React$Component);

  function RequiredExample(props) {
    _classCallCheck(this, RequiredExample);

    var _this = _possibleConstructorReturn(this, (RequiredExample.__proto__ || Object.getPrototypeOf(RequiredExample)).call(this, props));

    _this.onChange = function (e, isoDate) {
      var now = new Date();
      var newValue = new Date(isoDate);
      var messages = [];
      if (newValue.valueOf() <= now.valueOf()) {
        messages = [{ text: 'That date-time is in the past', type: 'hint' }];
      }
      _this.setState({ value: isoDate, messages: messages });
    };

    _this.state = {
      value: null,
      messages: []
    };
    return _this;
  }

  _createClass(RequiredExample, [{
    key: 'invalidDateTimeMessage',
    value: function invalidDateTimeMessage(rawDateValue, rawTimeValue) {
      if (rawDateValue) {
        return '\'' + rawDateValue + '\' is not a valid date.';
      } else {
        if (rawTimeValue) {
          return 'You must provide a date with a time.';
        } else {
          return 'Date and time values are required.';
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var text = this.state.value ? new Date(this.state.value).toString() : 'N/A';
      return React.createElement(
        'div',
        { style: { width: '30em' } },
        React.createElement(
          'div',
          { style: { marginBottom: '1em', fontStyle: 'italic' } },
          'You entered:',
          React.createElement('br', null),
          text
        ),
        React.createElement(
          'div',
          { style: { height: 350 } },
          React.createElement(DateTimeInput, {
            description: React.createElement(
              ScreenReaderContent,
              null,
              'Pick a date and time'
            ),
            datePlaceholder: 'Choose',
            dateLabel: 'Date',
            timeLabel: 'Time',
            datePreviousLabel: 'previous month',
            dateNextLabel: 'next month',
            onChange: this.onChange,
            layout: 'stacked',
            value: this.state.value,
            invalidDateTimeMessage: this.invalidDateTimeMessage,
            messages: this.state.messages,
            required: true
          })
        )
      );
    }
  }]);

  RequiredExample.displayName = 'RequiredExample'
  ;
  return RequiredExample;
}(React.Component);

export var required = function required() {
  return React.createElement(RequiredExample, null);
};