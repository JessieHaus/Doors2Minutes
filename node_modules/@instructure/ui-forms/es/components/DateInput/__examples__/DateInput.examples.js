var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _arguments = arguments;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React from 'react';
/* eslint-disable instructure-ui/no-relative-package-imports */
import Button from '../../../../../ui-buttons/lib/components/Button';
import FormFieldGroup from '../../../../../ui-forms/lib/components/FormFieldGroup';
/* eslint-disable instructure-ui/no-relative-package-imports */
import ScreenReaderContent from '@instructure/ui-a11y/lib/components/ScreenReaderContent';
import DateInput from '../index';

export var placeholder = function placeholder() {
  return React.createElement(DateInput, {
    previousLabel: 'previous month',
    nextLabel: 'next month',
    placeholder: 'Select a date',
    label: 'Date',
    onDateChange: function onDateChange(event, isoValue, rawValue, rawConversionFailed) {
      console.log(event, isoValue, rawValue, rawConversionFailed);
    } // eslint-disable-line no-console
    , invalidDateMessage: function invalidDateMessage(value) {
      return '\'' + value + '\' is not a valid date';
    }
  });
};

export var disabled = function disabled() {
  return React.createElement(DateInput, {
    previousLabel: 'previous month',
    nextLabel: 'next month',
    placeholder: 'Select a date... disabled state',
    label: 'Date',
    onDateChange: function onDateChange(event, isoValue, rawValue, rawConversionFailed) {
      console.log(event, isoValue, rawValue, rawConversionFailed);
    } // eslint-disable-line no-console
    , invalidDateMessage: function invalidDateMessage(value) {
      return '\'' + value + '\' is not a valid date';
    },
    disabled: true
  });
};

export var defaultDateValue = function defaultDateValue() {
  return React.createElement(DateInput, {
    previousLabel: 'previous month',
    nextLabel: 'next month',
    placeholder: 'Select a date',
    label: 'Date',
    onDateChange: function onDateChange(event, isoValue, rawValue, rawConversionFailed) {
      console.log(event, isoValue, rawValue, rawConversionFailed);
    } // eslint-disable-line no-console
    , invalidDateMessage: function invalidDateMessage(value) {
      return '\'' + value + '\' is not a valid date';
    },
    defaultDateValue: new Date()
  });
};

export var disabledDaysOfWeek = function disabledDaysOfWeek() {
  return React.createElement(DateInput, {
    previousLabel: 'previous month',
    nextLabel: 'next month',
    placeholder: 'Select a date... weekends are disabled',
    label: 'Date',
    onDateChange: function onDateChange() {
      console.log(_arguments);
    } // eslint-disable-line no-console
    , invalidDateMessage: function invalidDateMessage(value) {
      return '\'' + value + '\' is not a valid date';
    },
    disabledDaysOfWeek: [0, 6]
  });
};

export var disabledDays = function disabledDays() {
  return React.createElement(DateInput, {
    previousLabel: 'previous month',
    nextLabel: 'next month',
    placeholder: 'Select a date... some days in July are disabled',
    label: 'Date',
    onDateChange: function onDateChange() {
      console.log(_arguments);
    } // eslint-disable-line no-console
    , invalidDateMessage: function invalidDateMessage(value) {
      return '\'' + value + '\' is not a valid date';
    },
    disabledDays: [new Date(2018, 6, 4), new Date(2018, 6, 21), new Date(2018, 6, 19)]
  });
};

var ControlledExample = function (_React$Component) {
  _inherits(ControlledExample, _React$Component);

  function ControlledExample(props) {
    _classCallCheck(this, ControlledExample);

    var _this = _possibleConstructorReturn(this, (ControlledExample.__proto__ || Object.getPrototypeOf(ControlledExample)).call(this, props));

    _this.onInputChange = function (e) {
      _this.setState({ messages: [] });
    };

    _this.onDateChange = function (e, isoDate, rawValue, rawConversionFailed, dateIsDisabled) {
      var messages = [];

      if (!isoDate) {
        messages.push({
          type: 'error',
          text: 'Date field is required.'
        });
      }

      _this.setState({ messages: messages, isoDate: isoDate });
    };

    _this.onInputBlur = function (e) {
      var messages = [];

      if (!e.target.value) {
        messages.push({
          type: 'error',
          text: 'Date field is required.'
        });
      }

      _this.setState({ messages: messages });
    };

    _this.randomMonth = function () {
      var m = Math.floor(Math.random() * 12);
      var newDate = new Date(_this.state.isoDate || Date.now());
      newDate.setMonth(m);
      _this.setState({ isoDate: newDate.toISOString(), messages: [] });
    };

    _this.state = {
      isoDate: undefined, // eslint-disable-line no-undefined
      messages: []
    };
    return _this;
  }

  _createClass(ControlledExample, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        FormFieldGroup,
        { description: React.createElement(
            ScreenReaderContent,
            null,
            'DateInput Example'
          ) },
        React.createElement(
          Button,
          { margin: 'small', onClick: this.randomMonth },
          'Random Month'
        ),
        React.createElement(DateInput, {
          label: 'Date',
          placeholder: 'Pick a date',
          previousLabel: 'previous month',
          messages: this.state.messages,
          nextLabel: 'next month',
          placement: 'bottom center',
          onDateChange: this.onDateChange,
          onChange: this.onInputChange,
          onBlur: this.onInputBlur,
          dateValue: this.state.isoDate,
          disabledDateMessage: function disabledDateMessage(date) {
            return 'Date is disabled';
          },
          disabledDaysOfWeek: [0, 6],
          required: true
        })
      );
    }
  }]);

  ControlledExample.displayName = 'ControlledExample'
  ;
  return ControlledExample;
}(React.Component);

export var controlled = function controlled() {
  return React.createElement(ControlledExample, null);
};