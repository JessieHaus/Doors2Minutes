var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp, _initialiseProps;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import keycode from 'keycode';

import Popover, { PopoverContent } from '@instructure/ui-overlays/lib/components/Popover';
import themeable from '@instructure/ui-themeable';
import { pickProps, omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import warning from '@instructure/ui-utils/lib/warning';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import I18nPropTypes from '@instructure/ui-i18n/lib/utils/I18nPropTypes';
import LayoutPropTypes from '@instructure/ui-layout/lib/utils/LayoutPropTypes';
import isActiveElement from '@instructure/ui-utils/lib/dom/isActiveElement';
import DateTime from '@instructure/ui-i18n/lib/DateTime';
import Locale from '@instructure/ui-i18n/lib/Locale';
import createChainedFunction from '@instructure/ui-utils/lib/createChainedFunction';

import FormPropTypes from '../../utils/FormPropTypes';
import DatePicker from './DatePicker';
import TextInput from '../TextInput';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n/* Variables are defined in ./theme.js */\n\n._1PP-gND {\n  font-size: ' + theme.fontSize + ';\n  font-family: ' + theme.fontFamily + ';\n  font-weight: ' + theme.fontWeight + ';\n  color: ' + theme.color + ';\n  background: ' + theme.background + ';\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': '_1PP-gND'
};

import theme from './theme';
import { isDayDisabled } from "./utils/dateHelpers";

/**
---
category: components/forms
---
**/
var DateInput = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(DateInput, _Component);

  function DateInput(props, context) {
    _classCallCheck(this, DateInput);

    var _this = _possibleConstructorReturn(this, (DateInput.__proto__ || Object.getPrototypeOf(DateInput)).call(this, props, context));

    _initialiseProps.call(_this);

    var initialDateValue = props.dateValue || props.defaultDateValue || undefined; // eslint-disable-line no-undefined
    var locale = _this._locale(props, context);
    var timezone = _this._timezone(props, context);
    var parsedDate = _this._parseDate(initialDateValue, locale, timezone);

    warning(!initialDateValue || parsedDate.isValid(), '[DateInput] Unexpected date format received for dateValue prop: ' + initialDateValue);

    _this.state = Object.assign({
      showCalendar: false
    }, _this.computeState(initialDateValue, parsedDate, props));

    delete _this._input;
    return _this;
  }

  _createClass(DateInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.dateValue !== nextProps.dateValue) {
        var parsedDate = this.parseDate(nextProps.dateValue);

        warning(!nextProps.dateValue || parsedDate.isValid(), '[DateInput] Unexpected date format received for dateValue prop: ' + nextProps.dateValue);

        this.setState(function (state, props) {
          return _this2.computeState(nextProps.dateValue, parsedDate, nextProps, state);
        });
      }
    }

    /**
    * focus the input element
    */

  }, {
    key: 'focus',
    value: function focus() {
      this._input.focus();
    }
  }, {
    key: 'toggleCalendar',
    value: function toggleCalendar(showCalendar) {
      this.setState({ showCalendar: showCalendar });
    }
  }, {
    key: 'showCalendar',
    value: function showCalendar() {
      this.toggleCalendar(true);
    }
  }, {
    key: 'hideCalendar',
    value: function hideCalendar() {
      this.toggleCalendar(false);
    }
  }, {
    key: 'acceptValue',
    value: function acceptValue(event, dateStr) {
      var _this3 = this;

      var rawAcceptedValue = dateStr || event.target.value;

      this.setState(function (state, props) {
        var parsedDate = _this3.parseDate(rawAcceptedValue).hour(state.hour).minute(state.minute).second(state.second).millisecond(state.millisecond);

        var newState = _this3.computeState(rawAcceptedValue, parsedDate, props, state);
        var acceptedValueChanged = newState.acceptedValue !== state.acceptedValue;
        var validOrEmptyChanged = newState.isValidOrEmpty !== state.isValidOrEmpty;
        var dateIsDisabled = parsedDate.isValid() ? isDayDisabled(parsedDate, _this3.props.disabledDaysOfWeek, _this3.props.disabledDays) : false;

        if ((acceptedValueChanged || validOrEmptyChanged) && typeof _this3.props.onDateChange === 'function') {
          _this3.props.onDateChange(event,
          // since the API here is ISO dates in, we should pass an ISO date back in the handler
          newState.acceptedValue, newState.textInputValue, !newState.isValidOrEmpty, dateIsDisabled);
        }

        return newState;
      });
    }
  }, {
    key: '_parseDate',
    value: function _parseDate(dateStr, locale, timezone) {
      return DateTime.parse(dateStr, locale, timezone);
    }
  }, {
    key: '_timezone',
    value: function _timezone(props, context) {
      return props.timezone || context.timezone || DateTime.browserTimeZone();
    }
  }, {
    key: '_locale',
    value: function _locale(props, context) {
      return props.locale || context.locale || Locale.browserLocale();
    }
  }, {
    key: 'parseDate',
    value: function parseDate(dateStr) {
      return this._parseDate(dateStr, this.locale, this.timezone);
    }
  }, {
    key: 'computeState',
    value: function computeState(rawValue, parsedDate, props, state) {
      if (parsedDate.isValid()) {
        return {
          isValidOrEmpty: true,
          acceptedValue: parsedDate.format(),
          textInputValue: parsedDate.format(props.format),
          hour: parsedDate.hour(),
          minute: parsedDate.minute(),
          second: parsedDate.second(),
          millisecond: parsedDate.millisecond()
        };
      } else {
        return {
          isValidOrEmpty: !rawValue,
          acceptedValue: undefined, // eslint-disable-line no-undefined
          textInputValue: state ? state.textInputValue : '',
          hour: 0,
          minute: 0,
          second: 0,
          millisecond: 0
        };
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var ignoredProps = ['type', 'messages', 'defaultValue', 'value'];
      var textInputProps = pickProps(this.props, omitProps(TextInput.propTypes, {}, ignoredProps));
      var _props = this.props,
          onChange = _props.onChange,
          onKeyDown = _props.onKeyDown,
          onClick = _props.onClick,
          onBlur = _props.onBlur; // eslint-disable-line react/prop-types

      return React.createElement(
        'span',
        null,
        React.createElement(TextInput, Object.assign({}, textInputProps, {
          value: this.state.textInputValue,
          messages: this.messages,
          onChange: createChainedFunction(onChange, this.handleTextInputChange),
          onKeyDown: createChainedFunction(onKeyDown, this.handleTextInputKeyDown),
          onClick: createChainedFunction(onClick, this.handleTextInputClick),
          onBlur: createChainedFunction(onBlur, this.handleTextInputBlur),
          inputRef: this.textInputRef
        })),
        React.createElement(
          Popover,
          {
            placement: this.props.placement,
            show: this.state.showCalendar,
            onDismiss: this.handleCalendarDismiss,
            positionTarget: this._input
          },
          React.createElement(
            PopoverContent,
            null,
            React.createElement(DatePicker, {
              todayValue: this.props.todayValue,
              previousLabel: this.props.previousLabel,
              nextLabel: this.props.nextLabel,
              selectedValue: this.calendarSelectedValue,
              locale: this.locale,
              timezone: this.timezone,
              onSelectedChange: this.handleCalendarSelect,
              disabledDaysOfWeek: this.props.disabledDaysOfWeek,
              disabledDays: this.props.disabledDays,
              ref: this.props.datePickerRef
            })
          )
        )
      );
    }
  }, {
    key: 'hasMessages',
    get: function get() {
      return this.messages && this.messages.length > 0;
    }
  }, {
    key: 'invalid',
    get: function get() {
      return this.messages && this.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: 'focused',
    get: function get() {
      return isActiveElement(this._input);
    }
  }, {
    key: 'value',
    get: function get() {
      return this._input.value;
    }
  }, {
    key: 'calendarSelectedValue',
    get: function get() {
      var acceptedValue = this.state.acceptedValue;


      var value = acceptedValue ? this.parseDate(acceptedValue) : undefined; // eslint-disable-line no-undefined

      if (!value || !value.isValid()) {
        value = DateTime.now(this.locale, this.timezone);
      }

      return value.format();
    }
  }, {
    key: 'locale',
    get: function get() {
      return this._locale(this.props, this.context);
    }
  }, {
    key: 'timezone',
    get: function get() {
      return this._timezone(this.props, this.context);
    }
  }, {
    key: 'messages',
    get: function get() {
      if (!this.props.validationFeedback || !this.state.textInputValue) {
        return this.props.messages;
      }

      var messages = [];
      var parsedDate = this.parseDate(this.state.textInputValue);
      var isValid = parsedDate.isValid();

      if (isValid && isDayDisabled(parsedDate, this.props.disabledDaysOfWeek, this.props.disabledDays)) {
        var disabledDateMessage = this.props.disabledDateMessage;

        if (typeof disabledDateMessage === 'function') {
          disabledDateMessage = disabledDateMessage(this.state.textInputValue);
        }

        messages.push({
          text: disabledDateMessage || parsedDate.format(this.props.format) + ' is disabled',
          type: 'error'
        });
      } else if (isValid) {
        messages.push({
          text: parsedDate.format(this.props.format),
          type: 'success'
        });
      } else {
        var invalidDateMessage = this.props.invalidDateMessage;

        if (typeof invalidDateMessage === 'function') {
          invalidDateMessage = invalidDateMessage(this.state.textInputValue);
        }

        messages.push({
          text: invalidDateMessage || parsedDate.format(this.props.format),
          type: 'error'
        });
      }

      return messages.concat(this.props.messages);
    }
  }]);

  DateInput.displayName = 'DateInput'
  ;
  return DateInput;
}(Component), _class2.propTypes = {
  /**
    The label to put on the previous month button of the calendar.
  **/
  previousLabel: PropTypes.string.isRequired,
  /**
    The label to put on the next month button of the calendar.
  **/
  nextLabel: PropTypes.string.isRequired,
  /**
   * The message that's used when the data is invalid.
   */
  invalidDateMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,
  /**
   * The message that's used when a date is disabled
   */
  disabledDateMessage: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  /**
   * Where the calendar popover should be placed.
   */
  placement: LayoutPropTypes.placement,
  /**
    This display to show in the input when a date is selected.
    Valid formats are compatible with
    [moment.js formats](https://momentjs.com/docs/#/displaying/format/),
    including localized formats.
  **/
  format: PropTypes.string, // display format
  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),
  /**
    A standard language id
  **/
  locale: PropTypes.string,
  /**
    A timezone identifier in the format: Area/Location
  **/
  timezone: PropTypes.string,

  /**
    An ISO 8601 formatted string. The initial date value to display on render.
    It should only be used when using this component as an uncontrolled input.
  **/
  defaultDateValue: I18nPropTypes.iso8601,

  /**
    Called when the date value of the input has changed.
    The parameters are the triggering event, new date value in ISO 8601 format,
    the raw user input, if the conversion from raw to a date was succesful, and
    if the selected date is disabled.
  **/
  onDateChange: PropTypes.func,

  /**
  * the selected value (must be accompanied by an `onDateChange` prop)
  */
  dateValue: CustomPropTypes.controllable(I18nPropTypes.iso8601, 'onDateChange', 'defaultDateValue'),

  /**
    Whether to display validation feedback while typing.
  **/
  validationFeedback: PropTypes.bool,

  datePickerRef: PropTypes.func,

  inputRef: PropTypes.func,

  /**
    An ISO 8601 formatted string. Defaults to the current date.
  **/
  todayValue: I18nPropTypes.iso8601,

  size: PropTypes.oneOf(['small', 'medium', 'large']),
  layout: PropTypes.oneOf(['stacked', 'inline']),
  width: PropTypes.string,
  inline: PropTypes.bool,
  /**
  * Html placeholder text to display when the input has no value. This should be hint text, not a label
  * replacement.
  */
  placeholder: PropTypes.string,
  /**
   * Whether or not to disable the input
   */
  disabled: PropTypes.bool,
  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool,
  required: PropTypes.bool,
  /**
    An array of weekdays that should be unselectable. Each day should be an integer
    corresponding to the day of the week, where 0 = Sunday, 1 = Monday, 2 = Tuesday,
    3 = Wednesday, 4 = Thursday, 5 = Friday, 6 = Saturday.
  **/
  disabledDaysOfWeek: PropTypes.array,
  /**
    An array of Date objects that should be unselectable or a callback function
    that gets passed a date and should return a boolean indicating where it is
    unselectable.
  **/
  disabledDays: PropTypes.oneOfType([PropTypes.array, PropTypes.func])
}, _class2.defaultProps = {
  placement: 'bottom center',
  messages: [],
  format: 'LL',
  validationFeedback: true,
  onDateChange: function onDateChange(e, isoValue, rawValue, rawConversionFailed, dateIsDisabled) {},
  datePickerRef: function datePickerRef(el) {},
  inputRef: function inputRef(el) {},
  invalidDateMessage: function invalidDateMessage(textInputValue) {},
  required: false,
  inline: false,
  size: 'medium',
  disabled: false,
  readOnly: false,
  layout: 'stacked',
  disabledDaysOfWeek: [],
  disabledDays: []
}, _class2.contextTypes = {
  locale: PropTypes.string,
  timezone: PropTypes.string
}, _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.textInputRef = function (node) {
    _this4._input = node;
    if (node) {
      _this4.props.inputRef(node);
    }
  };

  this.handleTextInputChange = function (event) {
    // because we're controlling the TextInput
    _this4.setState({ textInputValue: event.target.value, showCalendar: false });
  };

  this.handleTextInputKeyDown = function (event) {
    if (event.keyCode === keycode.codes.enter) {
      event.preventDefault(); // prevent form submission
      _this4.acceptValue(event);
    }
  };

  this.handleTextInputClick = function (event) {
    // accept the current value first so the calendar shows the correct selected date
    _this4.acceptValue(event);
    _this4.showCalendar();
  };

  this.handleTextInputBlur = function (event) {
    // when focus leaves the textInput field, replace its text with the properly formatted
    // string for the date. This is handy because once the user types "Nov", we will parse that
    // into November 1st of the current year.
    _this4.acceptValue(event);
  };

  this.handleCalendarSelect = function (event, newValue) {
    var parsedDate = _this4.parseDate(newValue);

    warning(parsedDate.isValid(), '[DateInput] Unexpected date format received from DatePicker: ' + newValue);

    _this4.acceptValue(event, newValue);

    if (parsedDate.isValid()) {
      _this4.hideCalendar();
    }
  };

  this.handleCalendarDismiss = function () {
    _this4.hideCalendar();
  };
}, _temp)) || _class);
export { DateInput as default };


export { default as DatePicker } from './DatePicker';