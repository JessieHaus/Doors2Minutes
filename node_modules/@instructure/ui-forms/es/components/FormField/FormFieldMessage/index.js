var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';
import themeable from '@instructure/ui-themeable';

import ScreenReaderContent from '@instructure/ui-a11y/lib/components/ScreenReaderContent';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.v0qu7eo {\n  font-family: ' + theme.fontFamily + ';\n  font-weight: ' + theme.fontWeight + ';\n  font-size: ' + theme.fontSize + ';\n  line-height: ' + theme.lineHeight + ';\n  display: block;\n}\n\n.NmKwHrF {\n  color: ' + theme.colorHint + ';\n}\n\n.ok9R1OK {\n  color: ' + theme.colorError + ';\n}\n\n._18Vuu6p {\n  color: ' + theme.colorSuccess + ';\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': 'v0qu7eo',
  'hint': 'NmKwHrF',
  'error': 'ok9R1OK',
  'success': '_18Vuu6p'
};

import theme from './theme';

/**
---
parent: FormField
---

This is a helper component that is used by most of the custom form
components. In most cases it shouldn't be used directly.

```js
---
example: true
---
<FormFieldMessage variant="error">Invalid value</FormFieldMessage>
```
**/
var FormFieldMessage = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(FormFieldMessage, _Component);

  function FormFieldMessage() {
    _classCallCheck(this, FormFieldMessage);

    return _possibleConstructorReturn(this, (FormFieldMessage.__proto__ || Object.getPrototypeOf(FormFieldMessage)).apply(this, arguments));
  }

  _createClass(FormFieldMessage, [{
    key: 'render',
    value: function render() {
      var _classes;

      var classes = (_classes = {}, _defineProperty(_classes, styles.root, true), _defineProperty(_classes, styles[this.props.variant], true), _classes);
      return this.props.variant !== 'screenreader-only' ? React.createElement(
        'span',
        { className: classnames(classes) },
        this.props.children
      ) : React.createElement(
        ScreenReaderContent,
        null,
        this.props.children
      );
    }
  }]);

  FormFieldMessage.displayName = 'FormFieldMessage'
  ;
  return FormFieldMessage;
}(Component), _class2.propTypes = {
  variant: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only']),
  children: PropTypes.node
}, _class2.defaultProps = {
  variant: 'hint'
}, _temp)) || _class);
export { FormFieldMessage as default };