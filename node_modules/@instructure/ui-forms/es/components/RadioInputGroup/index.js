var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Children, Component } from 'react';
import PropTypes from 'prop-types';

import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import safeCloneElement from '@instructure/ui-utils/lib/react/safeCloneElement';
import matchComponentTypes from '@instructure/ui-utils/lib/react/matchComponentTypes';
import { pickProps, omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import generateElementId from '@instructure/ui-utils/lib/dom/generateElementId';

import RadioInput from '../RadioInput';

import FormPropTypes from '../../utils/FormPropTypes';
import FormFieldGroup from '../FormFieldGroup';

/**
---
category: components/forms
---
**/
var RadioInputGroup = (_temp = _class = function (_Component) {
  _inherits(RadioInputGroup, _Component);

  function RadioInputGroup(props) {
    _classCallCheck(this, RadioInputGroup);

    var _this = _possibleConstructorReturn(this, (RadioInputGroup.__proto__ || Object.getPrototypeOf(RadioInputGroup)).call(this));

    _this.handleChange = function (e) {
      var value = e.target.value;

      if (_this.props.disabled || _this.props.readOnly) {
        e.preventDefault();
        return;
      }

      if (typeof _this.props.value === 'undefined') {
        _this.setState({ value: value });
      }

      if (typeof _this.props.onChange === 'function') {
        _this.props.onChange(e, value);
      }
    };

    if (typeof props.value === 'undefined') {
      _this.state = {
        value: props.defaultValue
      };
    }

    _this._messagesId = generateElementId('RadioInputGroup-messages');
    return _this;
  }

  _createClass(RadioInputGroup, [{
    key: 'renderChildren',
    value: function renderChildren() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          name = _props.name,
          variant = _props.variant,
          size = _props.size,
          disabled = _props.disabled,
          readOnly = _props.readOnly;

      // This adds the passed in name property to each RadioInput component
      // and checks the input whose value matches the value property

      return Children.map(children, function (child) {
        if (matchComponentTypes(child, [RadioInput])) {
          return safeCloneElement(child, {
            name: name,
            disabled: disabled || child.props.disabled,
            variant: variant,
            size: size,
            checked: _this2.value === child.props.value,
            onChange: _this2.handleChange,
            readOnly: readOnly || child.props.readOnly,
            width: child.props.width || 'auto',
            'aria-describedby': _this2.hasMessages && _this2._messagesId
          });
        } else {
          return child; // ignore (but preserve) children that aren't RadioInput
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          variant = _props2.variant,
          layout = _props2.layout;


      return React.createElement(
        FormFieldGroup,
        Object.assign({}, omitProps(this.props, RadioInputGroup.propTypes), pickProps(this.props, FormFieldGroup.propTypes), {
          // TODO: split out toggle variant into its own component
          layout: layout === 'columns' && variant === 'toggle' ? 'stacked' : layout // toggles already display in cols
          , vAlign: variant === 'toggle' ? 'middle' : 'top',
          rowSpacing: 'small',
          colSpacing: variant === 'toggle' ? 'none' : 'small' // keep toggles close together
          , startAt: variant === 'toggle' ? 'small' : undefined // eslint-disable-line no-undefined
          , messagesId: this._messagesId
        }),
        this.renderChildren()
      );
    }
  }, {
    key: 'hasMessages',
    get: function get() {
      return this.props.messages && this.props.messages.length > 0;
    }
  }, {
    key: 'value',
    get: function get() {
      return typeof this.props.value === 'undefined' ? this.state.value : this.props.value;
    }
  }]);

  RadioInputGroup.displayName = 'RadioInputGroup'
  ;
  return RadioInputGroup;
}(Component), _class.propTypes = {
  name: PropTypes.string.isRequired,
  description: PropTypes.node.isRequired,
  /**
  * value to set on initial render
  */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  value: CustomPropTypes.controllable(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),
  /**
  * when used with the `value` prop, the component will not control its own state
  */
  onChange: PropTypes.func,
  disabled: PropTypes.bool,
  /** works just like disabled but keeps the same styles as if it were active */
  readOnly: PropTypes.bool,
  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),
  /**
  * children of type `RadioInput`
  */
  children: CustomPropTypes.Children.oneOf([RadioInput]),
  variant: PropTypes.oneOf(['simple', 'toggle']), // TODO: split toggle out to its own component
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  layout: PropTypes.oneOf(['stacked', 'columns', 'inline'])
}, _class.defaultProps = {
  disabled: false,
  variant: 'simple',
  size: 'medium',
  layout: 'stacked',
  readOnly: false
}, _temp);
export { RadioInputGroup as default };