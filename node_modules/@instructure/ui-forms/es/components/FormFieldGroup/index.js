var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import Grid, { GridCol, GridRow } from '@instructure/ui-layout/lib/components/Grid';
import themeable from '@instructure/ui-themeable';
import { omitProps, pickProps } from '@instructure/ui-utils/lib/react/passthroughProps';

import { FormFieldLayout } from '../FormField';
import FormPropTypes from '../../utils/FormPropTypes';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._2z_Dkcc {\n  border: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.borderColor + ';\n  border-radius: ' + theme.borderRadius + ';\n  display: block;\n}\n\n._2z_Dkcc._2r8Zcdf {\n  border-color: ' + theme.errorBorderColor + ';\n  padding: ' + theme.errorFieldsPadding + ';\n}\n\n._2z_Dkcc._23PofQg {\n  opacity: 0.6;\n  cursor: not-allowed;\n  pointer-events: none;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'fields': '_2z_Dkcc',
  'invalid': '_2r8Zcdf',
  'disabled': '_23PofQg'
};

import theme from './theme';

/**
---
category: components/forms
---
**/
var FormFieldGroup = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(FormFieldGroup, _Component);

  function FormFieldGroup() {
    _classCallCheck(this, FormFieldGroup);

    return _possibleConstructorReturn(this, (FormFieldGroup.__proto__ || Object.getPrototypeOf(FormFieldGroup)).apply(this, arguments));
  }

  _createClass(FormFieldGroup, [{
    key: 'renderColumns',
    value: function renderColumns() {
      return Children.map(this.props.children, function (child, index) {
        return child ? React.createElement(
          GridCol,
          { width: child.props && child.props.width ? 'auto' : null, key: index },
          child
        ) : null;
      });
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      return React.createElement(
        Grid,
        {
          colSpacing: this.props.colSpacing,
          rowSpacing: this.props.rowSpacing,
          vAlign: this.props.vAlign,
          startAt: this.props.startAt || (this.props.layout === 'columns' ? 'medium' : null)
        },
        React.createElement(
          GridRow,
          null,
          this.renderColumns()
        )
      );
    }
  }, {
    key: 'renderFields',
    value: function renderFields() {
      var _classnames;

      return React.createElement(
        'span',
        {
          key: 'fields',
          className: classnames((_classnames = {}, _defineProperty(_classnames, styles.fields, true), _defineProperty(_classnames, styles.invalid, this.invalid), _defineProperty(_classnames, styles.disabled, this.props.disabled), _classnames))
        },
        this.renderChildren()
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        FormFieldLayout,
        Object.assign({}, omitProps(this.props, FormFieldGroup.propTypes), pickProps(this.props, FormFieldLayout.propTypes), {
          vAlign: this.props.vAlign,
          layout: this.props.layout === 'inline' ? 'inline' : 'stacked',
          label: this.props.description,
          'aria-disabled': this.props.disabled ? 'true' : null,
          'aria-invalid': this.invalid ? 'true' : null
        }),
        this.renderFields()
      );
    }
  }, {
    key: 'invalid',
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }]);

  FormFieldGroup.displayName = 'FormFieldGroup'
  ;
  return FormFieldGroup;
}(Component), _class2.propTypes = {
  description: PropTypes.node.isRequired,
  /**
  * the element type to render as
  */
  as: CustomPropTypes.elementType,
  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),
  /**
  * id for the form field messages
  */
  messagesId: PropTypes.string,
  disabled: PropTypes.bool,
  children: PropTypes.node,
  layout: PropTypes.oneOf(['stacked', 'columns', 'inline']),
  rowSpacing: PropTypes.oneOf(['none', 'small', 'medium', 'large']),
  colSpacing: PropTypes.oneOf(['none', 'small', 'medium', 'large']),
  vAlign: PropTypes.oneOf(['top', 'middle', 'bottom']),
  startAt: PropTypes.oneOf(['small', 'medium', 'large', 'x-large', null])
}, _class2.defaultProps = {
  as: 'fieldset',
  disabled: false,
  rowSpacing: 'medium',
  colSpacing: 'small',
  vAlign: 'middle'
}, _temp)) || _class);
export { FormFieldGroup as default };