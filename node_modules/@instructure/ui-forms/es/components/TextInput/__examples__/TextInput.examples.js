/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React from 'react';
import IconEmail from '@instructure/ui-icons/lib/Line/IconEmail';
import IconUser from '@instructure/ui-icons/lib/Line/IconUser';
import IconSearch from '@instructure/ui-icons/lib/Line/IconSearch';
import TextInput from '../index';

export var small = function small() {
  return React.createElement(TextInput, {
    size: 'small',
    type: 'text',
    label: 'Small TextInput',
    placeholder: 'notice the font size' });
};

export var medium = function medium() {
  return React.createElement(TextInput, {
    size: 'medium',
    type: 'text',
    label: 'Medium (default) TextInput',
    placeholder: 'notice the font size' });
};

export var large = function large() {
  return React.createElement(TextInput, {
    size: 'large',
    type: 'text',
    label: 'Large TextInput',
    placeholder: 'notice the font size' });
};

export var layoutStacked = function layoutStacked() {
  return React.createElement(TextInput, {
    layout: 'stacked',
    type: 'text',
    label: 'Default Stacked TextInput',
    placeholder: 'label will appear above the input field' });
};

export var layoutInline = function layoutInline() {
  return React.createElement(TextInput, {
    layout: 'inline',
    type: 'text',
    label: 'Inline TextInput',
    placeholder: 'label will appear to the left of the input field' });
};

export var inline = function inline() {
  return React.createElement(TextInput, {
    layout: 'inline',
    icon: IconSearch,
    inline: true,
    width: '20rem',
    type: 'text',
    label: 'Inline TextInput',
    placeholder: 'inline true must have a width' });
};

export var withIcon = function withIcon() {
  return React.createElement(TextInput, {
    type: 'text',
    icon: IconUser,
    label: 'Icon TextInput',
    placeholder: 'an icon will appear at the far right of the input' });
};

export var error = function error() {
  return React.createElement(TextInput, {
    type: 'email',
    icon: IconEmail,
    label: 'Stacked TextInput with error',
    placeholder: 'please enter a valid email address',
    messages: [{ text: 'that does not appear to be a valid email address', type: 'error' }]
  });
};

export var hint = function hint() {
  return React.createElement(TextInput, {
    type: 'search',
    icon: IconSearch,
    label: 'Stacked TextInput with hint',
    placeholder: 'this is actually a search box',
    messages: [{ text: 'go ahead and search for what you need', type: 'hint' }]
  });
};

export var success = function success() {
  return React.createElement(TextInput, {
    layout: 'inline',
    type: 'tel',
    label: 'Inline TextInput with success',
    placeholder: 'please enter a valid phone number',
    messages: [{ text: 'that appears to be a valid phone number', type: 'success' }]
  });
};