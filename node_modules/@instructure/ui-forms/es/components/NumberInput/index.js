var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import IconArrowOpenUp from '@instructure/ui-icons/lib/Line/IconArrowOpenUp';
import IconArrowOpenDown from '@instructure/ui-icons/lib/Line/IconArrowOpenDown';

import Locale from '@instructure/ui-i18n/lib/Locale';
import Decimal from '@instructure/ui-i18n/lib/Decimal';

import { pickProps, omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import deepEqual from '@instructure/ui-utils/lib/deepEqual';
import isActiveElement from '@instructure/ui-utils/lib/dom/isActiveElement';
import generateElementId from '@instructure/ui-utils/lib/dom/generateElementId';

import themeable from '@instructure/ui-themeable';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n/* stylelint-disable selector-max-class */\n\n._1O2OSm9 {\n  display: flex;\n  margin: 0;\n  box-sizing: border-box;\n  width: 100%;\n  transition: all 0.2s ease-out;\n  outline: 0.1875rem solid transparent;\n  outline-offset: -0.5rem;\n  overflow: hidden;\n  font-family: ' + theme.fontFamily + ';\n  border: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.borderColor + ';\n  border-radius: ' + theme.borderRadius + ';\n}\n\n._1O2OSm9.e9BVmgw {\n    border-color: ' + theme.focusBorderColor + ';\n    outline: 0.1875rem solid ' + theme.focusOutlineColor + ';\n    outline-offset: -0.1875rem;\n    box-shadow: none;\n    box-shadow: initial;\n  }\n\n._1O2OSm9._3EiH_Ya {\n    border-color: ' + theme.errorBorderColor + ';\n  }\n\n._1O2OSm9._3EiH_Ya.e9BVmgw {\n      border-color: ' + theme.errorBorderColor + ';\n      outline-color: ' + theme.errorOutlineColor + ';\n    }\n\n._1O2OSm9._1OqwUtv {\n    cursor: not-allowed;\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n._1O2OSm9._2aLokPq {\n    font-size: ' + theme.mediumFontSize + ';\n    height: ' + theme.mediumHeight + ';\n  }\n\n._1O2OSm9.Out9bX7 {\n    font-size: ' + theme.largeFontSize + ';\n    height: ' + theme.largeHeight + ';\n  }\n\n._1O2OSm9._1xRYTYT {\n    display: inline-flex;\n    width: auto;\n  }\n\n/* stylelint-disable selector-max-type */\n\n._1gaBHbO,\ninput[type]._1gaBHbO {\n  animation: none 0s ease 0s 1 normal none running;\n  backface-visibility: visible;\n  background: transparent none repeat 0 0 / auto auto padding-box border-box scroll;\n  border: medium none currentColor;\n  border-collapse: separate;\n  border-image: none;\n  border-radius: 0;\n  border-spacing: 0;\n  bottom: auto;\n  box-shadow: none;\n  box-sizing: content-box;\n  caption-side: top;\n  clear: none;\n  clip: auto;\n  color: #000;\n  columns: auto;\n  column-count: auto;\n  column-fill: balance;\n  column-gap: normal;\n  column-rule: medium none currentColor;\n  column-span: 1;\n  column-width: auto;\n  content: normal;\n  counter-increment: none;\n  counter-reset: none;\n  cursor: auto;\n  direction: ltr;\n  display: inline;\n  empty-cells: show;\n  float: none;\n  font-family: serif;\n  font-size: medium;\n  font-style: normal;\n  font-variant: normal;\n  font-weight: normal;\n  font-stretch: normal;\n  line-height: normal;\n  height: auto;\n  hyphens: none;\n  left: auto;\n  letter-spacing: normal;\n  list-style: disc outside none;\n  margin: 0;\n  max-height: none;\n  max-width: none;\n  min-height: 0;\n  min-width: 0;\n  opacity: 1;\n  orphans: 2;\n  outline: medium none invert;\n  overflow: visible;\n  overflow-x: visible;\n  overflow-y: visible;\n  padding: 0;\n  page-break-after: auto;\n  page-break-before: auto;\n  page-break-inside: auto;\n  perspective: none;\n  perspective-origin: 50% 50%;\n  position: static;\n  right: auto;\n  tab-size: 8;\n  table-layout: auto;\n  text-align: left;\n  text-align-last: auto;\n  text-decoration: none;\n  text-indent: 0;\n  text-shadow: none;\n  text-transform: none;\n  top: auto;\n  transform: none;\n  transform-origin: 50% 50% 0;\n  transform-style: flat;\n  transition: none 0s ease 0s;\n  unicode-bidi: normal;\n  vertical-align: baseline;\n  visibility: visible;\n  white-space: normal;\n  widows: 2;\n  width: auto;\n  word-spacing: normal;\n  z-index: auto;\n  all: initial;\n  text-align: start;\n  direction: inherit;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  line-height: 1; /* reset global line height */\n  border: 0;\n  height: initial;\n  margin: 0;\n  flex: 1;\n  min-width: 0.0625rem;\n  box-sizing: border-box;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: ' + theme.fontWeight + ';\n  color: ' + theme.color + ';\n  background: ' + theme.background + ';\n  padding: ' + theme.padding + ';\n}\n\n[dir="ltr"] ._1gaBHbO,\n[dir="ltr"] input[type]._1gaBHbO {\n  text-align: left;\n}\n\n[dir="rtl"] ._1gaBHbO,\n[dir="rtl"] input[type]._1gaBHbO {\n  text-align: right;\n}\n\n._1gaBHbO::-ms-clear, input[type]._1gaBHbO::-ms-clear {\n    display: none;\n  }\n\n._1gaBHbO:-ms-input-placeholder, input[type]._1gaBHbO:-ms-input-placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n._1gaBHbO::-ms-input-placeholder, input[type]._1gaBHbO::-ms-input-placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n._1gaBHbO::placeholder, input[type]._1gaBHbO::placeholder {\n    color: ' + theme.placeholderColor + ';\n  }\n\n/* stylelint-enable selector-max-type */\n\n.Ej-deqA {\n  flex: 0 0 ' + theme.arrowsContainerWidth + ';\n  display: flex;\n  flex-direction: column;\n}\n\n.Ej-deqA._1OqwUtv {\n    cursor: not-allowed;\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n._260mBCr {\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  text-align: center;\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ' + theme.arrowsBackgroundColor + ';\n  border-top: none;\n  -webkit-border-end: none;\n          border-inline-end: none;\n  -webkit-border-start: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.arrowsBorderColor + ';\n          border-inline-start: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.arrowsBorderColor + ';\n  border-bottom: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.arrowsBorderColor + ';\n  color: ' + theme.arrowsColor + ';\n}\n\n[dir="ltr"] ._260mBCr {\n  text-align: center;\n  border-right: none;\n  border-left: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.arrowsBorderColor + ';\n}\n\n[dir="rtl"] ._260mBCr {\n  text-align: center;\n  border-left: none;\n  border-right: ' + theme.borderWidth + ' ' + theme.borderStyle + ' ' + theme.arrowsBorderColor + ';\n}\n\n._260mBCr:last-child {\n    border-bottom: none;\n  }\n\n._260mBCr:hover {\n    background-color: ' + theme.arrowsHoverBackgroundColor + ';\n  }\n\n._260mBCr:active {\n    box-shadow: ' + theme.arrowsActiveBoxShadow + ';\n  }\n\n/* stylelint-enable selector-max-class */\n';
    };

    return tmpl.call(theme, theme);
  },
  'inputContainer': '_1O2OSm9',
  'focus': 'e9BVmgw',
  'invalid': '_3EiH_Ya',
  'disabled': '_1OqwUtv',
  'medium': '_2aLokPq',
  'large': 'Out9bX7',
  'inline': '_1xRYTYT',
  'input': '_1gaBHbO',
  'arrowContainer': 'Ej-deqA',
  'arrow': '_260mBCr'
};

import theme from './theme';

import FormPropTypes from '../../utils/FormPropTypes';
import FormField from '../FormField';

var keyDirections = {
  ArrowUp: 1,
  ArrowDown: -1

  /**
  ---
  category: components/forms
  ---
  **/
};var NumberInput = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(NumberInput, _Component);

  function NumberInput(props) {
    _classCallCheck(this, NumberInput);

    var _this = _possibleConstructorReturn(this, (NumberInput.__proto__ || Object.getPrototypeOf(NumberInput)).call(this));

    _this._input = null;
    _this.state = {
      focus: false
    };

    _this.applyStep = function (dir) {
      var d = Decimal.parse(_this._input.value || '0', _this.locale);
      if (_this.step.isNaN()) return d;

      if (!d.mod(_this.step).equals(0)) {
        // case when value is between steps, so we snap to the next step
        var steps = d.div(_this.step);

        if (dir > 0) {
          d = steps.floor().times(_this.step);
        } else {
          d = steps.ceil().times(_this.step);
        }
      }

      // then we add the step
      if (dir > 0) {
        d = d.plus(_this.step);
      } else {
        d = d.minus(_this.step);
      }

      // case when value is less than minimum
      if (d.lt(_this.min)) {
        return _this.min;
      }

      // case when value is more than maximum
      if (d.gt(_this.max)) {
        return _this.max;
      }

      return d;
    };

    _this.handleRef = function (element) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      _this._input = element;
      _this.props.inputRef.apply(_this, [element].concat(args));
    };

    _this.handleFocus = function (event) {
      _this.setState({ focus: true });
      _this.props.onFocus(event);
    };

    _this.handleBlur = function (event) {
      var decimalValue = _this.getDecimalValue(event.target.value);

      // case when value is less than minimum
      if (decimalValue.lt(_this.min)) {
        decimalValue = _this.min;
      }

      // case when value is more than maximum
      if (decimalValue.gt(_this.max)) {
        decimalValue = _this.max;
      }

      var formattedString = decimalValue.isNaN() ? _this._input.value : _this.formatValue(decimalValue, _this.locale);
      if (!_this.isControlled()) _this._input.value = formattedString;

      _this.setState({ focus: false });

      _this.props.onChange(event, formattedString, _this.normalizeValue(decimalValue));
      _this.props.onBlur(event);
    };

    _this.handleChange = function (event) {
      var decimalValue = _this.getDecimalValue(event.target.value);
      _this.props.onChange(event, event.target.value, _this.normalizeValue(decimalValue));
    };

    _this.handleKeyDown = function (event) {
      _this.props.onKeyDown(event);

      var dir = keyDirections[event.key];
      if (!dir) return;

      event.preventDefault();
      _this.handleStep(event, dir);
    };

    _this.handleArrowClick = function (event, step) {
      event.preventDefault();
      _this.handleStep(event, step);
      _this.focus();
    };

    _this.handleClickUp = function (event) {
      _this.handleArrowClick(event, 1);
    };

    _this.handleClickDown = function (event) {
      _this.handleArrowClick(event, -1);
    };

    _this._defaultId = generateElementId('NumberInput');
    return _this;
  }

  _createClass(NumberInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      if (!this._input.value) return;

      // If the locale or precision props change, update the input value accordingly
      var currentLocale = this.getLocale(this.props, this.context);
      var nextLocale = this.getLocale(nextProps, nextContext);
      var currentPrecision = this.getPrecision(this.props);
      var nextPrecision = this.getPrecision(nextProps);
      if (currentLocale === nextLocale && deepEqual(currentPrecision, nextPrecision)) return;

      var decimalValue = Decimal.parse(this._input.value, currentLocale);
      if (decimalValue.isNaN()) return;

      var formattedString = this.formatValue(decimalValue, nextLocale, nextPrecision);
      this._input.value = formattedString;
      nextProps.onChange(null, formattedString, this.normalizeValue(decimalValue, nextPrecision));
    }

    // Replicate the arrow behavior commonly seen in inputs of type number

  }, {
    key: 'focus',
    value: function focus() {
      this._input.focus();
    }
  }, {
    key: 'getLocale',
    value: function getLocale(props, context) {
      return props.locale || context.locale || Locale.browserLocale();
    }

    // Return the current precision, either from props if given, or from the
    // input value itself

  }, {
    key: 'getPrecision',
    value: function getPrecision(props) {
      var decimalPrecision = props.decimalPrecision,
          significantDigits = props.significantDigits;

      if (decimalPrecision != null) return { decimalPrecision: decimalPrecision };
      if (significantDigits != null) return { significantDigits: significantDigits };

      if (this._input) {
        var precisionFromInput = this.getDecimals(this._input.value).length;
        if (precisionFromInput > 0) return { decimalPrecision: precisionFromInput };
      }

      return {};
    }

    // Return the portion of the given string that follows the decimal separator

  }, {
    key: 'getDecimals',
    value: function getDecimals(string) {
      var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.locale;

      var _Decimal$getDelimiter = Decimal.getDelimiters(locale),
          decimal = _Decimal$getDelimiter.decimal;

      var match = string.match(new RegExp('\\' + decimal + '(\\d+?)$'));
      return match ? match[1] : '';
    }
  }, {
    key: 'getDecimalFromNormalizedString',
    value: function getDecimalFromNormalizedString(value) {
      // For some reason Decimal.parse treats null as 0, so we have to check for it here
      return Decimal.parse(value === null ? NaN : value, Locale.defaultLocale);
    }
  }, {
    key: 'getDecimalValue',
    value: function getDecimalValue(value) {
      return Decimal.parse(value, this.locale);
    }
  }, {
    key: 'isControlled',
    value: function isControlled() {
      return typeof this.props.value !== 'undefined';
    }
  }, {
    key: 'shouldFormatValueOnRender',
    value: function shouldFormatValueOnRender() {
      return this.isControlled() && typeof this.props.value === 'number' || this.props.value instanceof Number;
    }
  }, {
    key: 'conditionalFormat',
    value: function conditionalFormat(value) {
      return this.shouldFormatValueOnRender() ? this.formatValue(this.getDecimalValue(value), this.locale) : value;
    }
  }, {
    key: 'formatValue',
    value: function formatValue(decimal, locale) {
      var precision = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.precision;
      var decimalPrecision = precision.decimalPrecision,
          significantDigits = precision.significantDigits;

      if (parseInt(decimalPrecision) >= 0) return decimal.toFixed(decimalPrecision, locale);
      if (parseInt(significantDigits) >= 1) return decimal.toPrecision(significantDigits, locale);
      return locale ? decimal.toLocaleString(locale) : decimal.toString();
    }
  }, {
    key: 'normalizeValue',
    value: function normalizeValue(decimal) {
      var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.precision;

      if (decimal.isNaN()) return null;
      var value = decimal;
      if (value.lt(this.min)) value = this.min;
      if (value.gt(this.max)) value = this.max;
      return this.formatValue(value, void 0, precision);
    }
  }, {
    key: 'handleStep',
    value: function handleStep(event, step) {
      if (this.props.disabled || this.props.readOnly) return;

      var decimalValue = this.applyStep(step);
      if (!decimalValue.isNaN()) {
        var formattedString = decimalValue.toLocaleString(this.locale);
        if (!this.isControlled()) this._input.value = formattedString;
        this.props.onChange(event, formattedString, this.normalizeValue(decimalValue));
      }
    }
  }, {
    key: 'renderArrows',
    value: function renderArrows() {
      return React.createElement(
        'span',
        { className: styles.arrowContainer },
        React.createElement(
          'span',
          {
            className: styles.arrow,
            onMouseDown: this.handleClickUp,
            role: 'presentation'
          },
          React.createElement(IconArrowOpenUp, null)
        ),
        React.createElement(
          'span',
          {
            className: styles.arrow,
            onMouseDown: this.handleClickDown,
            role: 'presentation'
          },
          React.createElement(IconArrowOpenDown, null)
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          size = _props.size,
          showArrows = _props.showArrows,
          placeholder = _props.placeholder,
          value = _props.value,
          disabled = _props.disabled,
          readOnly = _props.readOnly,
          required = _props.required,
          width = _props.width,
          inline = _props.inline;


      return React.createElement(
        FormField,
        Object.assign({}, pickProps(this.props, FormField.propTypes), {
          id: this.id
        }),
        React.createElement(
          'span',
          {
            className: classnames(styles.inputContainer, (_classnames = {}, _defineProperty(_classnames, styles.invalid, this.invalid), _defineProperty(_classnames, styles.disabled, disabled), _defineProperty(_classnames, styles[size], size), _defineProperty(_classnames, styles.focus, this.state.focus), _defineProperty(_classnames, styles.inline, inline), _classnames)),
            style: width ? { width: width } : null
          },
          React.createElement('input', Object.assign({}, omitProps(this.props, NumberInput.propTypes), {
            className: styles.input,
            onChange: this.handleChange,
            onKeyDown: this.handleKeyDown,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            type: 'text',
            inputMode: 'numeric',
            value: this.conditionalFormat(value),
            defaultValue: this.defaultValue,
            placeholder: placeholder,
            ref: this.handleRef,
            id: this.id,
            required: required,
            'aria-required': required,
            'aria-invalid': this.invalid ? 'true' : null,
            disabled: disabled || readOnly,
            'aria-disabled': disabled || readOnly ? 'true' : null
          })),
          showArrows ? this.renderArrows() : null
        )
      );
    }
  }, {
    key: 'min',
    get: function get() {
      return this.getDecimalFromNormalizedString(this.props.min);
    }
  }, {
    key: 'max',
    get: function get() {
      return this.getDecimalFromNormalizedString(this.props.max);
    }
  }, {
    key: 'step',
    get: function get() {
      return this.getDecimalFromNormalizedString(this.props.step);
    }
  }, {
    key: 'defaultValue',
    get: function get() {
      var defaultValue = this.props.defaultValue;

      // If defaultValue is a string, parse it as an en-US number

      var decimalValue = this.getDecimalFromNormalizedString(defaultValue);

      // If it can be parsed as a number, format it according to the current
      // locale. Otherwise just return it as-is
      return decimalValue.isNaN() ? defaultValue : this.formatValue(decimalValue, this.locale);
    }
  }, {
    key: 'locale',
    get: function get() {
      return this.getLocale(this.props, this.context);
    }
  }, {
    key: 'precision',
    get: function get() {
      return this.getPrecision(this.props);
    }
  }, {
    key: 'invalid',
    get: function get() {
      return this.props.messages && this.props.messages.findIndex(function (message) {
        return message.type === 'error';
      }) >= 0;
    }
  }, {
    key: 'id',
    get: function get() {
      return this.props.id || this._defaultId;
    }
  }, {
    key: 'focused',
    get: function get() {
      return isActiveElement(this._input);
    }
  }, {
    key: 'value',
    get: function get() {
      return this._input.value;
    }
  }]);

  NumberInput.displayName = 'NumberInput'
  ;
  return NumberInput;
}(Component), _class2.propTypes = {
  label: PropTypes.node.isRequired,
  id: PropTypes.string,
  showArrows: PropTypes.bool,
  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  min: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Specify the number of digits to display after the decimal separator. If
   * the input has more digits after the decimal separator, it will be
   * rounded on blur. If it has less, trailing zeros will be added on blur.
   *
   * Pass either decimalPrecision or significantDigits, not both.
   */
  decimalPrecision: CustomPropTypes.xor(PropTypes.number, 'significantDigits'),
  /**
   * Specify the number of significant digits. If the input has more
   * significant digits, it will be rounded on blur. If it has less, traling
   * zeros will be added on blur.
   *
   * Pass either decimalPrecision or significantDigits, not both.
   */
  significantDigits: CustomPropTypes.xor(PropTypes.number, 'decimalPrecision'),
  /**
  * object with shape: `{
  * text: PropTypes.string,
  * type: PropTypes.oneOf(['error', 'hint', 'success', 'screenreader-only'])
  *   }`
  */
  messages: PropTypes.arrayOf(FormPropTypes.message),
  /**
    A standard language id
  **/
  locale: PropTypes.string,
  size: PropTypes.oneOf(['medium', 'large']),
  layout: PropTypes.oneOf(['stacked', 'inline']),
  width: PropTypes.string,
  inline: PropTypes.bool,
  /**
  * Html placeholder text to display when the input has no value. This should be hint text, not a label
  * replacement.
  */
  placeholder: PropTypes.string,
  /**
   * Whether or not to disable the input
   */
  disabled: PropTypes.bool,
  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool,
  required: PropTypes.bool,
  /**
  * a function that provides a reference to the actual input element
  */
  inputRef: PropTypes.func,
  /**
  * value to set on initial render
  */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
  * The selected value (must be accompanied by an `onChange` prop). If this
  * is a number, it will be formatted according to the current locale. If a
  * string is given, it should already be in the correct format for the
  * current locale.
  */
  value: CustomPropTypes.controllable(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),
  /**
  * Called whenever the value of the input changes. The second argument is
  * the string value of the input; the third argument is a normalized string
  * value obtained by parsing the input string according to the current
  * locale, removing thousands separators, using the period `.` as decimal
  * separator, and rounding to the specified precision. This third argument
  * is `null` if the input value cannot be parsed.
  *
  * `onChange` is called on blur, as the value is formatted when the
  * component loses focus. In this case, `onChange` is always called *before*
  * `onBlur`.
  */
  onChange: PropTypes.func,
  onKeyDown: PropTypes.func,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func
}, _class2.contextTypes = {
  locale: PropTypes.string
}, _class2.defaultProps = {
  showArrows: true,
  step: 1,
  min: null,
  max: null,
  inline: false,
  size: 'medium',
  messages: [],
  disabled: false,
  readOnly: false,
  layout: 'stacked',
  inputRef: function inputRef(input) {},
  onChange: function onChange(event, value, normalizedValue) {},
  onKeyDown: function onKeyDown(event) {},
  onFocus: function onFocus(event) {},
  onBlur: function onBlur(event) {}
}, _temp)) || _class);


export default NumberInput;