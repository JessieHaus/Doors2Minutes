var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp2;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import themeable from '@instructure/ui-themeable';

import View from '@instructure/ui-layout/lib/components/View';
import Spinner from '@instructure/ui-elements/lib/components/Spinner';

import getOptionId from '../utils/getOptionId';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._1cUNkws {\n  box-sizing: border-box;\n  overflow: auto;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n._114D6ep {\n  padding: ' + theme.padding + ';\n  background: ' + theme.background + ';\n  display: flex;\n  align-items: center;\n  font-family: ' + theme.fontFamily + ';\n  font-weight: ' + theme.fontWeight + ';\n  line-height: ' + theme.lineHeight + ';\n  font-size: ' + theme.mediumFontSize + ';\n  transition: background 0.2s;\n  outline: none;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n._114D6ep._2uXddlL {\n    font-size: ' + theme.smallFontSize + ';\n  }\n\n._114D6ep._1se6sjk {\n    font-size: ' + theme.mediumFontSize + ';\n  }\n\n._114D6ep._3itjh2i {\n    font-size: ' + theme.largeFontSize + ';\n  }\n\n._114D6ep.ULOKnzR:not(._2CYOoqP) {\n    background: ' + theme.highlightedBackground + ';\n  }\n\n._114D6ep._18R0Vdr:not(._2CYOoqP) {\n    background: ' + theme.activeBackground + ';\n  }\n\n._114D6ep._941NgMx:not(._2CYOoqP) {\n    cursor: not-allowed;\n    pointer-events: none;\n    opacity: 0.5;\n  }\n\n._114D6ep._2CYOoqP {\n    cursor: not-allowed;\n    pointer-events: none;\n    font-weight: ' + theme.groupFontWeight + ';\n  }\n\n._114D6ep._1PcXwvj {\n    -webkit-padding-start: ' + theme.groupPadding + ';\n            padding-inline-start: ' + theme.groupPadding + ';\n  }\n\n[dir="ltr"] ._114D6ep._1PcXwvj {\n    padding-left: ' + theme.groupPadding + ';\n  }\n\n[dir="rtl"] ._114D6ep._1PcXwvj {\n    padding-right: ' + theme.groupPadding + ';\n  }\n\n._2ZH_VoT {\n  color: ' + theme.labelColor + ';\n}\n\n.ULOKnzR:not(._2CYOoqP) ._2ZH_VoT {\n  color: ' + theme.activeLabelColor + ';\n}\n\n._18R0Vdr:not(._2CYOoqP) ._2ZH_VoT {\n  color: ' + theme.activeLabelColor + ';\n}\n\n._2Hnmy_Z {\n  -webkit-margin-end: ' + theme.iconPaddingEnd + ';\n          margin-inline-end: ' + theme.iconPaddingEnd + ';\n  -webkit-margin-start: 0;\n          margin-inline-start: 0;\n}\n\n[dir="ltr"] ._2Hnmy_Z {\n  margin-right: ' + theme.iconPaddingEnd + ';\n  margin-left: 0;\n}\n\n[dir="rtl"] ._2Hnmy_Z {\n  margin-left: ' + theme.iconPaddingEnd + ';\n  margin-right: 0;\n}\n\n.b8eiAul {\n  z-index: ' + theme.zIndex + ';\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'optionsList': '_1cUNkws',
  'option': '_114D6ep',
  'small': '_2uXddlL',
  'medium': '_1se6sjk',
  'large': '_3itjh2i',
  'highlighted': 'ULOKnzR',
  'groupLabel': '_2CYOoqP',
  'selected': '_18R0Vdr',
  'disabled': '_941NgMx',
  'groupItem': '_1PcXwvj',
  'label': '_2ZH_VoT',
  'icon': '_2Hnmy_Z',
  'container': 'b8eiAul'
};

import theme from './theme';

/**
---
parent: Select
---
**/
var SelectOptionsList = (_dec = themeable(theme, styles), _dec(_class = (_temp2 = _class2 = function (_Component) {
  _inherits(SelectOptionsList, _Component);

  function SelectOptionsList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SelectOptionsList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SelectOptionsList.__proto__ || Object.getPrototypeOf(SelectOptionsList)).call.apply(_ref, [this].concat(args))), _this), _this.optionHeight = 5, _this.handleClick = function (event, option) {
      if (option.disabled || option.groupLabel) {
        event.preventDefault();
        return;
      }
      _this.props.onSelect(event, option);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SelectOptionsList, [{
    key: 'renderStaticOption',
    value: function renderStaticOption(message) {
      var _props = this.props,
          size = _props.size,
          onStaticClick = _props.onStaticClick;


      return React.createElement(
        'li',
        { // eslint-disable-line
          tabIndex: '-1',
          role: 'option',
          'aria-disabled': 'true',
          'aria-selected': 'false',
          className: classnames(styles.option, _defineProperty({}, styles[size], size)),
          onClick: onStaticClick
        },
        React.createElement(
          'span',
          { className: styles.label },
          message
        )
      );
    }
  }, {
    key: 'renderIcon',
    value: function renderIcon(icon) {
      if (typeof icon !== 'undefined' && icon !== null) {
        var Icon = icon;
        return React.createElement(
          'span',
          { className: styles.icon },
          React.createElement(Icon, null)
        );
      }
    }
  }, {
    key: 'renderOptions',
    value: function renderOptions() {
      var _this2 = this;

      var _props2 = this.props,
          options = _props2.options,
          optionsId = _props2.optionsId,
          loadingText = _props2.loadingText,
          emptyOption = _props2.emptyOption,
          selectedOption = _props2.selectedOption,
          onHighlightOption = _props2.onHighlightOption,
          size = _props2.size,
          highlightedIndex = _props2.highlightedIndex;


      if (loadingText) {
        return this.renderStaticOption(React.createElement(Spinner, { size: 'x-small', title: loadingText }));
      }

      if (options.length === 0) {
        return this.renderStaticOption(emptyOption);
      }

      return options.map(function (option, index) {
        var _classnames2;

        var children = option.children,
            id = option.id,
            disabled = option.disabled,
            icon = option.icon,
            groupLabel = option.groupLabel,
            groupItem = option.groupItem;

        var selected = getOptionId(selectedOption) === id;
        var handlers = {
          onMouseEnter: function onMouseEnter() {
            return onHighlightOption(index);
          },
          onClick: function onClick(event) {
            return _this2.handleClick(event, option);
          }
          /* eslint-disable jsx-a11y/role-has-required-aria-props */
        };return React.createElement(
          'li',
          Object.assign({}, handlers, {
            role: 'option',
            key: id,
            id: optionsId + '_' + id,
            className: classnames(styles.option, (_classnames2 = {}, _defineProperty(_classnames2, styles.selected, selected), _defineProperty(_classnames2, styles[size], size), _defineProperty(_classnames2, styles.highlighted, index === highlightedIndex), _defineProperty(_classnames2, styles.disabled, disabled || groupLabel), _defineProperty(_classnames2, styles.groupLabel, groupLabel), _defineProperty(_classnames2, styles.groupItem, groupItem), _classnames2)),
            tabIndex: '-1',
            'aria-selected': selected ? 'true' : 'false',
            'aria-disabled': disabled || groupLabel ? 'true' : null
          }),
          React.createElement(
            'span',
            { className: styles.label },
            icon && _this2.renderIcon(icon),
            children
          )
        );
        /* eslint-enable jsx-a11y/role-has-required-aria-props */
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props3 = this.props,
          optionsId = _props3.optionsId,
          menuRef = _props3.menuRef,
          visibleOptionsCount = _props3.visibleOptionsCount,
          maxWidth = _props3.maxWidth,
          props = _objectWithoutProperties(_props3, ['optionsId', 'menuRef', 'visibleOptionsCount', 'maxWidth']);

      return React.createElement(
        View,
        {
          style: props.style // must pass the style prop for positioning
          , className: styles.container,
          maxWidth: maxWidth || 0,
          borderWidth: 'small',
          borderRadius: 'medium',
          shadow: 'resting',
          background: 'default'
        },
        React.createElement(
          'ul',
          {
            className: styles.optionsList,
            id: optionsId,
            onKeyDown: this.props.onKeyDown,
            onKeyUp: this.props.onKeyUp,
            onBlur: this.props.onBlur,
            tabIndex: '-1',
            ref: function ref(el) {
              menuRef(el);
              if (el) {
                // store the height of the options
                _this3.optionHeight = el.querySelector('li').clientHeight;
              }
            },
            role: 'listbox',
            style: {
              maxHeight: visibleOptionsCount * this.optionHeight + 'px',
              display: this.props.expanded ? 'block' : 'none'
            }
          },
          this.renderOptions()
        )
      );
    }
  }]);

  SelectOptionsList.displayName = 'SelectOptionsList'
  ;
  return SelectOptionsList;
}(Component), _class2.propTypes = {
  /**
  * the selected value
  */
  selectedOption: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  })]),
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
    children: PropTypes.node,
    disabled: PropTypes.bool,
    icon: PropTypes.func,
    groupLabel: PropTypes.bool
  })),
  /**
   * id for options list element
   */
  optionsId: PropTypes.string,
  /**
  * a function that provides a reference to the internal options list element
  */
  menuRef: PropTypes.func,
  /**
   * The amount of options that are visible without scrolling
   */
  visibleOptionsCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
   * Give the Spinner a title to be read by screenreaders. Disables menu
   * interaction and renders a Spinner in its place.
   */
  loadingText: PropTypes.string,
  /**
   * The menu content to render when no options are present or are filtered away
   */
  emptyOption: PropTypes.node,
  /**
   * Callback fired when an option gets highlighted
   */
  onHighlightOption: PropTypes.func,
  /**
   * Callback fired on the option selection
   */
  onSelect: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /**
   * Options dropdown can be wider than input if maxWidth is provided
   */
  maxWidth: PropTypes.string,
  /**
   * Callback fired when the empty option is selected by click
   */
  onStaticClick: PropTypes.func,
  onBlur: PropTypes.func,
  highlightedIndex: PropTypes.number,
  expanded: PropTypes.bool
}, _class2.defaultProps = {
  selectedOption: null,
  options: [],
  visibleOptionsCount: 8,
  loadingText: null,
  emptyOption: '---',
  size: 'medium',
  expanded: false,
  menuRef: function menuRef(el) {},
  onHighlightOption: function onHighlightOption(event) {},
  onSelect: function onSelect(event, selectedOption) {},
  onStaticClick: function onStaticClick(event) {}
}, _temp2)) || _class);


export default SelectOptionsList;