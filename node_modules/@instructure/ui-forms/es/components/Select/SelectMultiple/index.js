var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp, _initialiseProps;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import themeable from '@instructure/ui-themeable';
import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import isActiveElement from '@instructure/ui-utils/lib/dom/isActiveElement';
import containsActiveElement from '@instructure/ui-utils/lib/dom/containsActiveElement';
import warning from '@instructure/ui-utils/lib/warning';
import deepEqual from '@instructure/ui-utils/lib/deepEqual';

import Tag from '@instructure/ui-elements/lib/components/Tag';
import SelectField from '../SelectField';
import getOptionId from '../utils/getOptionId';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.AsabaQs {\n  margin-top: calc(' + theme.tagTopMargin + ' + 0.125rem);\n  -webkit-margin-start: ' + theme.tagStartMargin + ';\n          margin-inline-start: ' + theme.tagStartMargin + ';\n  -webkit-margin-end: 0;\n          margin-inline-end: 0;\n}\n\n[dir="ltr"] .AsabaQs {\n  margin-left: ' + theme.tagStartMargin + ';\n  margin-right: 0;\n}\n\n[dir="rtl"] .AsabaQs {\n  margin-right: ' + theme.tagStartMargin + ';\n  margin-left: 0;\n}\n\n  .AsabaQs:last-of-type {\n    margin-bottom: ' + theme.tagTopMargin + ';\n  }\n';
    };

    return tmpl.call(theme, theme);
  },
  'tag': 'AsabaQs'
};

import theme from './theme';

var optionType = PropTypes.shape({
  label: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired,
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  dismissible: PropTypes.bool,
  children: PropTypes.node
});

/**
---
parent: Select
---
**/
var SelectMultiple = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(SelectMultiple, _Component);

  function SelectMultiple(props) {
    _classCallCheck(this, SelectMultiple);

    var _this = _possibleConstructorReturn(this, (SelectMultiple.__proto__ || Object.getPrototypeOf(SelectMultiple)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      filterText: '',
      selectedOption: _this.getSelectedOptionFromProps(_this.props.selectedOption || _this.props.defaultSelectedOption, _this.props.options)
    };

    _this.state.filteredOptions = _this.getFilteredOptions(_this.props, '');
    return _this;
  }

  _createClass(SelectMultiple, [{
    key: 'getSelectedOptionFromProps',
    value: function getSelectedOptionFromProps() {
      var selectedOption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      return selectedOption.map(function (option) {
        if (typeof option === 'string') {
          var foundOption = options.find(function (o) {
            return getOptionId(o) === option;
          });
          warning(foundOption, '[Select] The option (' + option + ') doesn\'t correspond to an option\'s id or (in case of no id) value');

          return foundOption;
        }

        return option;
      }).filter(function (option) {
        return option;
      });
    }
  }, {
    key: 'getFilteredOptions',
    value: function getFilteredOptions(_ref, filterText) {
      var filter = _ref.filter,
          options = _ref.options;
      var selectedOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.selectedOption;

      var filteredOptions = filter(options, filterText);
      var selectedIds = selectedOption.map(function (o) {
        return getOptionId(o);
      });
      return filteredOptions.filter(function (o) {
        return !selectedIds.includes(getOptionId(o));
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var updateOptions = this.props.options !== nextProps.options;
      var updateSelectedOption = this.props.selectedOption !== nextProps.selectedOption && !deepEqual(this.props.selectedOption, nextProps.selectedOption);

      if ((updateSelectedOption || updateOptions) && !this.props.disabled && !this.props.readOnly) {
        this.setState(function (prevState) {
          var selectedOption = updateSelectedOption ? _this2.getSelectedOptionFromProps(nextProps.selectedOption, nextProps.options) : prevState.selectedOption;

          return {
            filteredOptions: _this2.getFilteredOptions(nextProps, prevState.filterText, selectedOption),
            selectedOption: selectedOption
          };
        });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var _this3 = this;

      // When we provide a default value or values (either via the selectedOption
      // or defaultSelectedOption prop) and we update the options, if the default
      // value or values match the updated options, we should update the input values
      if (this.props.options !== prevProps.options) {
        // only search the updated options
        var amendedOptions = this.props.options.filter(function (option) {
          return !prevProps.options.find(function (prevOption) {
            return deepEqual(prevOption, option);
          });
        });

        var selectedOption = this.getSelectedOptionFromProps(this.props.selectedOption || this.props.defaultSelectedOption, amendedOptions);

        if (selectedOption && selectedOption.length > 0) {
          this.setState(function (prevState, props) {
            var matches = _this3.matchSelectedOptions(prevState, selectedOption);
            _this3.cleanInput();

            return _this3.amendMatchesToState(prevState, props, matches, function (selectedOption) {
              props.onChange(null, selectedOption);
            });
          });
        }
      }

      if (!deepEqual(this.state.filteredOptions, prevState.filteredOptions)) {
        this.props.onOptionsChange(this.state.filteredOptions);
      }
    }
  }, {
    key: 'renderTags',
    value: function renderTags() {
      var _this4 = this;

      return this.state.selectedOption.filter(function (option) {
        return option;
      }).map(function (tag, index) {
        var isDismissible = tag.dismissible !== false;
        var dismissibleProps = {};
        if (isDismissible) {
          dismissibleProps = {
            dismissible: true,
            onClick: function onClick(event) {
              return _this4.dismiss(event, tag);
            }
          };
        }

        return React.createElement(Tag, Object.assign({
          className: styles.tag,
          key: tag.label,
          title: tag.label,
          text: _this4.props.formatSelectedOption(tag, index),
          size: _this4.props.size,
          disabled: _this4.props.disabled,
          readOnly: _this4.props.readOnly
        }, dismissibleProps));
      });
    }
  }, {
    key: 'renderInputs',
    value: function renderInputs() {
      var _this5 = this;

      return this.state.selectedOption.filter(function (option) {
        return option;
      }).map(function (tag, index) {
        return React.createElement('input', {
          type: 'hidden',
          key: tag.label,
          name: _this5.props.name,
          value: tag.value
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this6 = this;

      return React.createElement(
        SelectField,
        Object.assign({}, omitProps(this.props, SelectMultiple.propTypes), {
          ref: function ref(el) {
            _this6._field = el;
          },
          inputRef: this.handleInputRef,
          editable: this.props.editable,
          options: this.state.filteredOptions,
          size: this.props.size,
          disabled: this.props.disabled,
          readOnly: this.props.readOnly,
          onSelect: this.handleSelect,
          onStaticClick: this.focus,
          onClose: this.handleClose,
          onInputChange: this.handleInputChange,
          onKeyDown: this.handleKeyDown,
          optionsMaxWidth: this.props.optionsMaxWidth,
          closeOnSelect: this.props.closeOnSelect
        }),
        this.renderTags(),
        this.renderInputs()
      );
    }
  }, {
    key: 'focused',
    get: function get() {
      return containsActiveElement(this._field);
    }
  }, {
    key: 'value',
    get: function get() {
      return this.state.selectedOption.map(function (selected) {
        return selected && selected.value;
      });
    }
  }, {
    key: 'isControlled',
    get: function get() {
      return !!this.props.selectedOption;
    }
  }]);

  SelectMultiple.displayName = 'SelectMultiple'
  ;
  return SelectMultiple;
}(Component), _class2.propTypes = {
  /**
  * The options to render in the menu
  */
  options: PropTypes.arrayOf(optionType),
  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: PropTypes.func,
  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  selectedOption: CustomPropTypes.controllable(PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, optionType])), 'onChange', 'defaultSelectedOption'),
  /**
  * value to set on initial render, meant for an uncontrolled component
  */
  defaultSelectedOption: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, optionType])),
  /**
  * Determines whether the user can type in the input
  */
  editable: PropTypes.bool,
  /**
   * Optional name for the FormField
   */
  name: PropTypes.string,
  /**
   * The size used for input and menu options
   */
  size: PropTypes.oneOf(['small', 'medium', 'large']),
  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: PropTypes.string,
  /**
   * The filter function applied to the options when the value of the input changes
   */
  filter: PropTypes.func,
  /**
   * The format function called for each Tag to render its contents
   */
  formatSelectedOption: PropTypes.func,
  /**
   * Whether or not to disable the input and tags
   */
  disabled: PropTypes.bool,
  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool,
  /**
   * Callback fired when the menu is closed
   */
  onClose: PropTypes.func,
  /**
   * Callback fired when one of the menu options gets selected
   */
  onChange: PropTypes.func,
  /**
   * Callback fired on the onChange of the internal input
   */
  onInputChange: PropTypes.func,
  /**
   * Callback fired when the options displayed in the menu change
   */
  onOptionsChange: PropTypes.func,
  /**
   * Callback fired on the onKeyDown of the internal input
   */
  onKeyDown: PropTypes.func,
  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: PropTypes.bool
}, _class2.defaultProps = {
  inputRef: function inputRef() {},
  formatSelectedOption: function formatSelectedOption(tag) {
    return tag.children || tag.label;
  },
  onClose: function onClose() {},
  onChange: function onChange(event, selectedOption) {},
  onInputChange: function onInputChange(event) {},
  onOptionsChange: function onOptionsChange(filteredOptions) {},
  onKeyDown: function onKeyDown(event) {},
  closeOnSelect: true
}, _initialiseProps = function _initialiseProps() {
  var _this7 = this;

  this._input = null;

  this.focus = function () {
    _this7._input && _this7._input.focus();
  };

  this.cleanInput = function () {
    if (_this7._input.value !== '') {
      _this7._input.value = '';
      _this7.props.onInputChange(null, '');
    }
  };

  this.matchSelectedOptions = function (state, selectedOption) {
    if (selectedOption) {
      // find options with values that match curent selected values
      return state.filteredOptions.filter(function (option) {
        return selectedOption.find(function (selected) {
          return selected.value === option.value;
        });
      });
    } else {
      // find an option with a label that matches input's value
      return [state.filteredOptions.find(function (option) {
        return option.label.toLowerCase() === _this7._input.value.toLowerCase();
      })].filter(function (value) {
        return value;
      });
    }
  };

  this.amendMatchesToState = function (state, props, matches, onChange) {
    if (matches && matches.length > 0) {
      var selectedOption = [].concat(_toConsumableArray(state.selectedOption), _toConsumableArray(matches));

      if (typeof onChange === 'function') {
        onChange(selectedOption);
      }

      return {
        filterText: '',
        filteredOptions: _this7.getFilteredOptions(props, '', selectedOption),
        selectedOption: selectedOption
      };
    }
    return {
      filterText: '',
      filteredOptions: _this7.getFilteredOptions(props, '', state.selectedOption)
    };
  };

  this.handleClose = function (event) {
    return _this7.setState(function (prevState, props) {
      var matches = _this7.matchSelectedOptions(prevState);
      _this7.cleanInput();

      return _this7.amendMatchesToState(prevState, props, matches, function (selectedOption) {
        props.onChange(event, selectedOption);
      });
    }, _this7.props.onClose);
  };

  this.handleInputChange = function (event, value) {
    _this7.props.onInputChange(event, value);
    var filterText = value.toLowerCase();
    if (_this7.state.filterText !== filterText) {
      _this7.setState(function (prevState, props) {
        return {
          filterText: filterText,
          filteredOptions: _this7.getFilteredOptions(props, filterText)
        };
      });
    }
  };

  this.handleKeyDown = function (event) {
    var _state = _this7.state,
        filterText = _state.filterText,
        selectedOption = _state.selectedOption,
        length = _state.selectedOption.length;

    // If the user pressed backspace while focusing on input, input is emtpy and there's selectedOptions

    if ((event.key === 'Backspace' || event.key === 'Delete') && length > 0 && filterText === '' && isActiveElement(_this7._input)) {
      _this7.dismiss(event, selectedOption[length - 1]);
    }

    _this7.props.onKeyDown(event);
  };

  this.handleSelect = function (event, newOption) {
    _this7.cleanInput();

    var newSelectedOption = [].concat(_toConsumableArray(_this7.state.selectedOption), [newOption]);

    _this7.setState(function (prevState, props) {
      var selectedOption = _this7.isControlled ? prevState.selectedOption : newSelectedOption;

      return {
        filterText: '',
        filteredOptions: _this7.getFilteredOptions(props, '', selectedOption),
        selectedOption: selectedOption
      };
    }, _this7.focus);

    _this7.props.onChange(event, newSelectedOption);
  };

  this.dismiss = function (event, tag) {
    event.preventDefault(); // to prevent expanding the menu onClick

    var tagId = getOptionId(tag);
    var newSelectedOption = _this7.state.selectedOption.filter(function (o) {
      return getOptionId(o) !== tagId;
    });

    _this7.setState(function (prevState, props) {
      var selectedOption = _this7.isControlled ? prevState.selectedOption : newSelectedOption;

      return {
        filteredOptions: _this7.getFilteredOptions(props, prevState.filterText, selectedOption),
        selectedOption: selectedOption
      };
    }, _this7.focus);

    _this7.props.onChange(event, newSelectedOption);
  };

  this.handleInputRef = function (node) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this7._input = node;
    _this7.props.inputRef.apply(_this7, [node].concat(args));
  };
}, _temp)) || _class);


export default SelectMultiple;