/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Children } from 'react';
import warning from '@instructure/ui-utils/lib/warning';

/**
---
parent: Select
id: parseOptions
---
*/
export default function parseOptions(children) {
  var options = Children.map(children, function (child) {
    var _child$props = child.props,
        label = _child$props.label,
        children = _child$props.children;

    if (child.type === 'optgroup') {
      var group = [];
      group.push(React.createElement(
        'option',
        Object.assign({}, child.props, {
          value: label,
          groupLabel: true,
          disabled: true
        }),
        label
      ));
      Children.forEach(children, function (option, index) {
        group.push(React.createElement(
          'option',
          Object.assign({}, option.props, { groupItem: true }),
          option.props.children
        ));
      });
      return group;
    } else {
      return child;
    }
  });
  return Children.map(options, function (option) {
    var _option$props = option.props,
        label = _option$props.label,
        id = _option$props.id,
        value = _option$props.value,
        children = _option$props.children,
        disabled = _option$props.disabled,
        icon = _option$props.icon,
        groupLabel = _option$props.groupLabel,
        groupItem = _option$props.groupItem;


    warning(typeof value === 'string', '[Select] The value prop in <option> must be a string');

    return {
      id: id || value,
      label: label || children,
      children: children || label,
      icon: icon || null,
      disabled: disabled || null,
      groupLabel: groupLabel || null,
      groupItem: groupItem || null,
      value: value
    };
  }) || [];
}