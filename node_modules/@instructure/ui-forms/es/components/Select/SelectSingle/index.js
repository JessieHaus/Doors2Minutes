var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';

import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import isActiveElement from '@instructure/ui-utils/lib/dom/isActiveElement';
import warning from '@instructure/ui-utils/lib/warning';
import deepEqual from '@instructure/ui-utils/lib/deepEqual';

import SelectField from '../SelectField';
import getOptionId from '../utils/getOptionId';

var optionType = PropTypes.shape({
  label: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired,
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  children: PropTypes.node
});

/**
---
parent: Select
---
**/
var SelectSingle = (_temp = _class = function (_Component) {
  _inherits(SelectSingle, _Component);

  function SelectSingle(props) {
    _classCallCheck(this, SelectSingle);

    var _this = _possibleConstructorReturn(this, (SelectSingle.__proto__ || Object.getPrototypeOf(SelectSingle)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      filterText: '',
      filteredOptions: props.options,
      selectedOption: _this.getSelectedOptionFromProps(_this.props.selectedOption || _this.props.defaultSelectedOption)
    };
    return _this;
  }

  _createClass(SelectSingle, [{
    key: 'getSelectedOptionFromProps',
    value: function getSelectedOptionFromProps(selectedOption) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.options;

      if (typeof selectedOption === 'string') {
        var foundOption = options.find(function (o) {
          return getOptionId(o) === selectedOption;
        });

        warning(foundOption, '[Select] The selectedOption is a string but doesn\'t correspond to an option');

        return foundOption;
      }

      return selectedOption;
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.state.selectedOption) {
        this._input.value = this.state.selectedOption.label;
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.options !== nextProps.options) {
        this.setState({
          filteredOptions: nextProps.filter(nextProps.options, this.state.filterText)
        });
      }

      // When the component is controlled and selectedOption changes, update the input and state
      if (!this.props.disabled && !this.props.readOnly) {
        var oldId = getOptionId(this.props.selectedOption);
        var newId = getOptionId(nextProps.selectedOption);
        if (newId !== null && newId !== oldId) {
          var selectedOption = this.getSelectedOptionFromProps(nextProps.selectedOption, nextProps.options);
          this.setState({ selectedOption: selectedOption });

          if (this._input.value !== selectedOption.label) {
            this._input.value = selectedOption.label;
            this.props.onInputChange(null, this._input.value);
          }
        } else if (newId === null && newId !== oldId) {
          this.setState({ selectedOption: null });
          this._input.value = '';
          this.props.onInputChange(null, this._input.value);
        }
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      // When we provide a default value (either via the selectedOption or
      // defaultSelectedOption prop) and we update the options, if the default
      // value matches the updated options, we should update the input value
      if (this.props.options !== prevProps.options) {
        var selectedOption = this.getSelectedOptionFromProps(this.props.selectedOption || this.props.defaultSelectedOption);

        if (!this.state.selectedOption && selectedOption) {
          this.setState(function (prevState, props) {
            var match = _this2.matchSelectedOption(prevState, selectedOption);
            if (match) {
              _this2._input.value = match.label;
            } else {
              _this2._input.value = '';
            }
            return { selectedOption: match || selectedOption };
          });
        }
      }

      if (!deepEqual(this.state.filteredOptions, prevState.filteredOptions)) {
        this.props.onOptionsChange(this.state.filteredOptions);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(SelectField, Object.assign({}, omitProps(this.props, SelectSingle.propTypes), {
        editable: this.props.editable,
        inputRef: this.handleInputRef,
        options: this.state.filteredOptions,
        selectedOption: this.state.selectedOption,
        disabled: this.props.disabled,
        readOnly: this.props.readOnly,
        onSelect: this.handleSelect,
        onStaticClick: this.focus,
        onClose: this.handleClose,
        onInputChange: this.handleInputChange,
        optionsMaxWidth: this.props.optionsMaxWidth,
        closeOnSelect: this.props.closeOnSelect
      }));
    }
  }, {
    key: 'focused',
    get: function get() {
      return isActiveElement(this._input);
    }
  }, {
    key: 'value',
    get: function get() {
      var selected = this.state.selectedOption;
      return selected && selected.value;
    }
  }]);

  SelectSingle.displayName = 'SelectSingle'
  ;
  return SelectSingle;
}(Component), _class.propTypes = {
  /**
  * The options to render in the menu
  */
  options: PropTypes.arrayOf(optionType),
  /**
  * a function that provides a reference to the internal input element
  */
  inputRef: PropTypes.func,
  /**
  * the selected value (must be accompanied by an `onChange` prop)
  */
  selectedOption: CustomPropTypes.controllable(PropTypes.oneOfType([PropTypes.string, optionType]), 'onChange', 'defaultSelectedOption'),
  /**
   * Options dropdown can be wider than input if optionsMaxWidth is provided
   */
  optionsMaxWidth: PropTypes.string,
  /**
  * value to set on initial render, meant for an uncontrolled component
  */
  defaultSelectedOption: PropTypes.oneOfType([PropTypes.string, optionType]),
  /**
  * Determines whether the user can type in the input
  */
  editable: PropTypes.bool,
  /**
  * for non-multiple Select, allows the user to empty selection
  */
  allowEmpty: PropTypes.bool,
  /**
   * Whether or not to disable the input
   */
  disabled: PropTypes.bool,
  /**
   * Works just like disabled but keeps the same styles as if it were active
   */
  readOnly: PropTypes.bool,
  /**
   * The filter function applied to the options when writting on the input
   */
  filter: PropTypes.func,
  /**
   * Callback fired when the menu is closed
   */
  onClose: PropTypes.func,
  /**
   * Callback fired when one of the menu options gets selected
   */
  onChange: PropTypes.func,
  /**
   * Callback fired when on the onChange of the internal input
   */
  onInputChange: PropTypes.func,
  /**
   * Callback fired when the options displayed in the menu change
   */
  onOptionsChange: PropTypes.func,
  /**
  * should the menu be closed when a selection happens
  */
  closeOnSelect: PropTypes.bool
}, _class.defaultProps = {
  inputRef: function inputRef(node) {},
  onClose: function onClose() {},
  onChange: function onChange(event, selectedOption) {},
  onInputChange: function onInputChange(event, value) {},
  onOptionsChange: function onOptionsChange(filteredOptions) {},
  closeOnSelect: true
}, _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this._input = null;

  this.focus = function () {
    _this3._input && _this3._input.focus();
  };

  this.matchSelectedOption = function (state, selectedOption) {
    var inputValue = _this3._input.value;

    var match = void 0;
    if (selectedOption) {
      // find option with a value that matches curent selected value
      match = state.filteredOptions.find(function (option) {
        return option.value === selectedOption.value;
      });
    } else {
      // find option with a label that matches input's value
      match = state.filteredOptions.find(function (option) {
        return option.label.toLowerCase() === inputValue.toLowerCase();
      });
    }

    return match;
  };

  this.handleClose = function (event, newSelectedOption) {
    return _this3.setState(function (prevState, props) {
      var inputValue = _this3._input.value;
      var match = _this3.matchSelectedOption(prevState, newSelectedOption);
      var selectedOption = newSelectedOption || prevState.selectedOption;

      if (match) {
        _this3._input.value = match.label;

        if (!selectedOption || getOptionId(match) !== getOptionId(selectedOption)) {
          props.onChange(event, match);
        }
      } else if (selectedOption) {
        if (props.allowEmpty && _this3._input.value === '') {
          props.onChange(event, null);
          return {
            filterText: '',
            filteredOptions: props.options,
            selectedOption: null
          };
        } else {
          // reset the value to the last valid value
          _this3._input.value = selectedOption.label;
        }
      } else {
        // clean wrong values
        _this3._input.value = '';
      }

      if (_this3._input.value !== inputValue) {
        _this3.props.onInputChange(null, _this3._input.value);
      }

      return {
        filterText: '',
        filteredOptions: props.options,
        selectedOption: match || selectedOption
      };
    }, _this3.props.onClose);
  };

  this.handleInputChange = function (event, value) {
    _this3.props.onInputChange(event, value);

    var filterText = value.toLowerCase();
    if (_this3.state.filterText !== filterText) {
      _this3.setState(function (prevState, props) {
        return {
          filterText: filterText,
          filteredOptions: props.filter(_this3.props.options, filterText)
        };
      });
    }
  };

  this.handleSelect = function (event, selectedOption) {
    if (_this3._input.value !== selectedOption.label) {
      _this3._input.value = selectedOption.label;
      _this3.props.onInputChange(null, _this3._input.value);
    }

    _this3.setState({
      filterText: '',
      filteredOptions: _this3.props.options,
      selectedOption: selectedOption
    }, function () {
      return _this3.focus();
    });

    _this3.props.onChange(event, selectedOption);
  };

  this.handleInputRef = function (node) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this3._input = node;
    _this3.props.inputRef.apply(_this3, [node].concat(args));
  };
}, _temp);


export default SelectSingle;