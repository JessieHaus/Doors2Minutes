var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React from 'react';
import IconHeart from '@instructure/ui-icons/lib/Line/IconHeart';
import IconApple from '@instructure/ui-icons/lib/Line/IconApple';
import IconBank from '@instructure/ui-icons/lib/Line/IconBank';
/* eslint-disable instructure-ui/no-relative-package-imports */
import Button from '../../../../../ui-buttons/lib/components/Button';
import AccessibleContent from '../../../../../ui-a11y/lib/components/AccessibleContent';
/* eslint-disable instructure-ui/no-relative-package-imports */
import Select from '../index';

export var sizeSmall = function sizeSmall() {
  return React.createElement(
    Select,
    {
      size: 'small',
      label: 'Small',
      assistiveText: '3 options available. Use arrow keys to navigate options.'
    },
    React.createElement(
      'option',
      { value: 'foo' },
      'Foo'
    ),
    React.createElement(
      'option',
      { value: 'bar' },
      'Bar'
    ),
    React.createElement(
      'option',
      { value: 'baz' },
      'Baz'
    )
  );
};

export var sizeMedium = function sizeMedium() {
  return React.createElement(
    Select,
    {
      size: 'medium',
      label: 'Medium',
      assistiveText: '3 options available. Use arrow keys to navigate options.'
    },
    React.createElement(
      'option',
      { value: 'foo' },
      'Foo'
    ),
    React.createElement(
      'option',
      { value: 'bar' },
      'Bar'
    ),
    React.createElement(
      'option',
      { value: 'baz' },
      'Baz'
    )
  );
};

export var sizeLarge = function sizeLarge() {
  return React.createElement(
    Select,
    {
      size: 'large',
      label: 'Large',
      assistiveText: '3 options available. Use arrow keys to navigate options.'
    },
    React.createElement(
      'option',
      { value: 'foo' },
      'Foo'
    ),
    React.createElement(
      'option',
      { value: 'bar' },
      'Bar'
    ),
    React.createElement(
      'option',
      { value: 'baz' },
      'Baz'
    )
  );
};

export var layoutStacked = function layoutStacked() {
  return React.createElement(
    Select,
    {
      label: 'Stacked',
      layout: 'stacked',
      assistiveText: '3 options available. Use arrow keys to navigate options.'
    },
    React.createElement(
      'option',
      { value: 'foo' },
      'Foo'
    ),
    React.createElement(
      'option',
      { value: 'bar' },
      'Bar'
    ),
    React.createElement(
      'option',
      { value: 'baz' },
      'Baz'
    )
  );
};

export var layoutInline = function layoutInline() {
  return React.createElement(
    Select,
    {
      label: 'Inline',
      layout: 'inline',
      assistiveText: '3 options available. Use arrow keys to navigate options.'
    },
    React.createElement(
      'option',
      { value: 'foo' },
      'Foo'
    ),
    React.createElement(
      'option',
      { value: 'bar' },
      'Bar'
    ),
    React.createElement(
      'option',
      { value: 'baz' },
      'Baz'
    )
  );
};

export var layoutDisabled = function layoutDisabled() {
  return React.createElement(
    Select,
    {
      disabled: true,
      label: 'Disabled',
      assistiveText: '3 options available. Use arrow keys to navigate options.'
    },
    React.createElement(
      'option',
      { value: 'foo' },
      'Foo'
    ),
    React.createElement(
      'option',
      { value: 'bar' },
      'Bar'
    ),
    React.createElement(
      'option',
      { value: 'baz' },
      'Baz'
    )
  );
};

export var withIcon = function withIcon() {
  return React.createElement(
    Select,
    {
      label: 'Options with icons',
      assistiveText: '3 options available. Use arrow keys to navigate options.'
    },
    React.createElement(
      'option',
      { value: 'foo', icon: IconHeart },
      'Foo'
    ),
    React.createElement(
      'option',
      { value: 'bar', icon: IconApple },
      'Bar'
    ),
    React.createElement(
      'option',
      { value: 'baz', icon: IconBank },
      'Baz'
    )
  );
};

export var withOptGroup = function withOptGroup() {
  return React.createElement(
    Select,
    { label: 'Option Group Select' },
    React.createElement(
      'optgroup',
      { label: 'Group One' },
      React.createElement(
        'option',
        { value: 'item1' },
        'Item One'
      ),
      React.createElement(
        'option',
        { value: 'item2' },
        'Item Two'
      )
    ),
    React.createElement(
      'optgroup',
      { label: 'Group Two' },
      React.createElement(
        'option',
        { value: 'item3' },
        'Item Three'
      )
    ),
    React.createElement(
      'optgroup',
      { label: 'Group Three', icon: IconHeart },
      React.createElement(
        'option',
        { value: 'item4' },
        'Item Four'
      ),
      React.createElement(
        'option',
        { value: 'item5' },
        'Item Five'
      )
    )
  );
};

export var error = function error() {
  return React.createElement(
    Select,
    {
      layout: 'inline',
      label: 'Choose a snack',
      messages: [{ text: 'You need to make a selection', type: 'error' }] },
    React.createElement(
      'option',
      { value: 'apples' },
      'Apples'
    ),
    React.createElement(
      'option',
      { value: 'oranges' },
      'Oranges'
    ),
    React.createElement(
      'option',
      { value: 'bananas' },
      'Bananas'
    ),
    React.createElement(
      'option',
      { value: 'candy', disabled: true },
      'Candy'
    )
  );
};

export var success = function success() {
  return React.createElement(
    Select,
    {
      label: 'Choose a snack',
      messages: [{ text: 'Great job choosing something healthy!', type: 'success' }] },
    React.createElement(
      'option',
      { value: 'apples' },
      'Apples'
    ),
    React.createElement(
      'option',
      { value: 'oranges' },
      'Oranges'
    ),
    React.createElement(
      'option',
      { value: 'bananas' },
      'Bananas'
    ),
    React.createElement(
      'option',
      { value: 'candy', disabled: true },
      'Candy'
    )
  );
};

var AutocompleteExample = function (_React$Component) {
  _inherits(AutocompleteExample, _React$Component);

  function AutocompleteExample() {
    _classCallCheck(this, AutocompleteExample);

    return _possibleConstructorReturn(this, (AutocompleteExample.__proto__ || Object.getPrototypeOf(AutocompleteExample)).apply(this, arguments));
  }

  _createClass(AutocompleteExample, [{
    key: 'render',
    value: function render() {
      var options = ['Alabama', 'Alaska', 'American Samoa', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'District Of Columbia', 'Federated States Of Micronesia', 'Florida', 'Georgia', 'Guam', 'Hawaii', 'Idaho', 'Illinois'];

      return React.createElement(
        Select,
        Object.assign({}, this.props, {
          assistiveText: 'Start typing to search. Press the down arrow to navigate results.',
          formatSelectedOption: function formatSelectedOption(tag) {
            return React.createElement(
              AccessibleContent,
              { alt: 'Remove ' + tag.label },
              tag.label
            );
          }
        }),
        options.map(function (label, index) {
          return React.createElement(
            'option',
            { key: label, value: '' + index },
            label
          );
        })
      );
    }
  }]);

  AutocompleteExample.displayName = 'AutocompleteExample'
  ;
  return AutocompleteExample;
}(React.Component);

export var singleAutocomplete = function singleAutocomplete() {
  return React.createElement(AutocompleteExample, {
    label: 'Choose a state',
    name: 'state',
    defaultOption: '12',
    editable: true
  });
};

export var multipleAutocomplete = function multipleAutocomplete() {
  return React.createElement(AutocompleteExample, {
    label: 'Choose a few states',
    name: 'states',
    defaultOption: ["0", "12", "15"],
    editable: true,
    multiple: true
  });
};

var PersistentExample = function (_React$Component2) {
  _inherits(PersistentExample, _React$Component2);

  function PersistentExample() {
    _classCallCheck(this, PersistentExample);

    var _this2 = _possibleConstructorReturn(this, (PersistentExample.__proto__ || Object.getPrototypeOf(PersistentExample)).apply(this, arguments));

    _this2.handleChange = function (e, opts) {
      var options = [].concat(_toConsumableArray(_this2.persistentOptions), _toConsumableArray(opts.slice(_this2.persistentOptions.length)));
      console.log(options); // eslint-disable-line no-console
      _this2.setState({ options: options });
    };

    _this2.clear = function () {
      _this2.setState({
        options: [].concat(_toConsumableArray(_this2.persistentOptions))
      });
    };

    _this2.persistentOptions = [{ label: 'Apples', value: '0', dismissible: false }, { label: 'Bananas', value: '1', dismissible: false }];
    _this2.state = {
      options: [].concat(_toConsumableArray(_this2.persistentOptions))
    };
    return _this2;
  }

  _createClass(PersistentExample, [{
    key: 'getOptionLabel',
    value: function getOptionLabel() {
      var options = this.state.options;

      return options.map(function (o) {
        return o.label;
      }).join(', ');
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'div',
        null,
        React.createElement(
          Select,
          Object.assign({
            multiple: true,
            label: 'Choose some fruit',
            editable: true
          }, this.props, {
            selectedOption: this.state.options,
            onChange: this.handleChange
          }),
          React.createElement(
            'option',
            { value: '0' },
            'Apples'
          ),
          React.createElement(
            'option',
            { value: '1' },
            'Bananas'
          ),
          React.createElement(
            'option',
            { value: '2' },
            'Oranges'
          ),
          React.createElement(
            'option',
            { value: '3' },
            'Mangoes'
          ),
          React.createElement(
            'option',
            { value: '4' },
            'Pears'
          ),
          React.createElement(
            'option',
            { value: '5' },
            'Cherries'
          )
        ),
        React.createElement(
          'div',
          null,
          'Value selected: ',
          this.getOptionLabel()
        ),
        React.createElement('br', null),
        React.createElement(
          Button,
          { onClick: this.clear },
          'Clear Selections'
        )
      );
    }
  }]);

  PersistentExample.displayName = 'PersistentExample'
  ;
  return PersistentExample;
}(React.Component);

export var persistentOptions = function persistentOptions() {
  return React.createElement(PersistentExample, null);
};