var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React from 'react';
import IconFolder from '@instructure/ui-icons/lib/Line/IconFolder';
import IconImage from '@instructure/ui-icons/lib/Line/IconImage';
import IconBlueprint from '@instructure/ui-icons/lib/Line/IconBlueprint';

/* eslint-disable instructure-ui/no-relative-package-imports */
import Billboard from '../../../../../ui-billboard/lib/components/Billboard';
/* eslint-disable instructure-ui/no-relative-package-imports */
import FileDrop from '../index';

export var textAsLabel = function textAsLabel() {
  return React.createElement(FileDrop, {
    accept: 'image/*',
    onDropAccepted: function onDropAccepted(_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          file = _ref2[0];

      console.log('File accepted ' + file.name);
    } // eslint-disable-line no-console
    , onDropRejected: function onDropRejected(_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          file = _ref4[0];

      console.log('File rejected ' + file.name);
    } // eslint-disable-line no-console
    , label: 'Upload your image here'
  });
};

export var componentAsLabel = function componentAsLabel() {
  return React.createElement(FileDrop, {
    allowMultiple: false,
    accept: '.pdf',
    onDropAccepted: function onDropAccepted(_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
          file = _ref6[0];

      console.log('File accepted ' + file.name);
    } // eslint-disable-line no-console
    , onDropRejected: function onDropRejected(_ref7) {
      var _ref8 = _slicedToArray(_ref7, 1),
          file = _ref8[0];

      console.log('File rejected ' + file.name);
    } // eslint-disable-line no-console
    , label: React.createElement(Billboard, {
      size: 'small',
      heading: 'Upload your file here',
      message: 'Allows only one pdf',
      hero: React.createElement(IconFolder, null)
    })
  });
};

export var acceptsType = function acceptsType() {
  return React.createElement(FileDrop, {
    allowMultiple: false,
    accept: '.png',
    onDropAccepted: function onDropAccepted(_ref9) {
      var _ref10 = _slicedToArray(_ref9, 1),
          file = _ref10[0];

      console.log('File accepted ' + file.name);
    } // eslint-disable-line no-console
    , onDropRejected: function onDropRejected(_ref11) {
      var _ref12 = _slicedToArray(_ref11, 1),
          file = _ref12[0];

      console.log('File rejected ' + file.name);
    } // eslint-disable-line no-console
    , label: React.createElement(Billboard, {
      size: 'medium',
      heading: 'Upload your Image here',
      message: 'Allows only one png',
      hero: React.createElement(IconImage, null)
    })
  });
};

export var allowMultiple = function allowMultiple() {
  return React.createElement(FileDrop, {
    allowMultiple: true,
    accept: '.pdf',
    onDropAccepted: function onDropAccepted(_ref13) {
      var _ref14 = _slicedToArray(_ref13, 1),
          file = _ref14[0];

      console.log('File accepted ' + file.name);
    } // eslint-disable-line no-console
    , onDropRejected: function onDropRejected(_ref15) {
      var _ref16 = _slicedToArray(_ref15, 1),
          file = _ref16[0];

      console.log('File rejected ' + file.name);
    } // eslint-disable-line no-console
    , label: React.createElement(Billboard, {
      size: 'large',
      heading: 'Upload your files here',
      message: 'Allows more than one',
      hero: React.createElement(IconBlueprint, null)
    })
  });
};

export var disabled = function disabled() {
  return React.createElement(FileDrop, {
    allowMultiple: true,
    accept: '.pdf',
    onDropAccepted: function onDropAccepted(_ref17) {
      var _ref18 = _slicedToArray(_ref17, 1),
          file = _ref18[0];

      console.log('File accepted ' + file.name);
    } // eslint-disable-line no-console
    , onDropRejected: function onDropRejected(_ref19) {
      var _ref20 = _slicedToArray(_ref19, 1),
          file = _ref20[0];

      console.log('File rejected ' + file.name);
    } // eslint-disable-line no-console
    , label: React.createElement(Billboard, {
      size: 'medium',
      heading: 'Upload your files here',
      message: 'Allows more than one',
      hero: React.createElement(IconBlueprint, null),
      disabled: true
    }),
    disabled: true
  });
};