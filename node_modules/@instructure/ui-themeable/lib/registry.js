'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRegisteredThemes = exports.generateComponentTheme = exports.getTheme = exports.generateTheme = exports.getRegisteredComponent = exports.getRegisteredComponents = exports.registerComponentTheme = exports.getRegisteredTheme = exports.registerTheme = exports.makeTheme = exports.setDefaultTheme = exports.getDefaultThemeKey = exports.setRegistry = exports.getRegistry = undefined;
exports.clearRegistry = clearRegistry;

var _warning = require('@instructure/ui-utils/lib/warning');

var _warning2 = _interopRequireDefault(_warning);

var _mergeDeep = require('@instructure/ui-utils/lib/mergeDeep');

var _mergeDeep2 = _interopRequireDefault(_mergeDeep);

var _isEmpty = require('@instructure/ui-utils/lib/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _uid = require('@instructure/ui-utils/lib/uid');

var _uid2 = _interopRequireDefault(_uid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; } /*
                                                                                                                                                                                                                   * The MIT License (MIT)
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Copyright (c) 2015 - present Instructure, Inc.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * Permission is hereby granted, free of charge, to any person obtaining a copy
                                                                                                                                                                                                                   * of this software and associated documentation files (the "Software"), to deal
                                                                                                                                                                                                                   * in the Software without restriction, including without limitation the rights
                                                                                                                                                                                                                   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                                                                                                                                                                                                   * copies of the Software, and to permit persons to whom the Software is
                                                                                                                                                                                                                   * furnished to do so, subject to the following conditions:
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * The above copyright notice and this permission notice shall be included in all
                                                                                                                                                                                                                   * copies or substantial portions of the Software.
                                                                                                                                                                                                                   *
                                                                                                                                                                                                                   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                                                                                                                                                                                                   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                                                                                                                                                                                                   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                                                                                                                                                                                                   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                                                                                                                                                                                                   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                                                                                                                                                                                                   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                                                                                                                                                                                                   * SOFTWARE.
                                                                                                                                                                                                                   */

/**
* ---
* category: utilities/themes
* ---
* A global theme registry
* @module registry
*/


var DEFAULT_THEME_KEY = '@@themeableDefaultTheme';
var GLOBAL_THEME_REGISTRY = 'GLOBAL_THEME_REGISTRY';

var makeRegistry = function makeRegistry() {
  return {
    defaultThemeKey: null,
    components: _defineProperty({}, DEFAULT_THEME_KEY, {}),
    themes: {},
    registered: [] // the theme keys in the order they are registered
  };
};

var validateRegistry = function validateRegistry(registry) {
  var defaultRegistry = makeRegistry();

  if (typeof registry === 'undefined') {
    return defaultRegistry;
  }

  var valid = true;

  Object.keys(defaultRegistry).forEach(function (key) {
    if (typeof registry[key] === 'undefined') {
      valid = false;
    }
  });

  (0, _warning2.default)(valid, '[themeable] Invalid global theme registry!');

  return registry;
};

global[GLOBAL_THEME_REGISTRY] = validateRegistry(global[GLOBAL_THEME_REGISTRY]);

/**
* Get the global theme registry
* @return {object} The theme registry
*/
var getRegistry = exports.getRegistry = function getRegistry() {
  return global[GLOBAL_THEME_REGISTRY];
};

/**
* Set the global theme registry
*/
var setRegistry = exports.setRegistry = function setRegistry(registry) {
  global[GLOBAL_THEME_REGISTRY] = registry;
};

/**
* Clear the global theme registry
*/
function clearRegistry() {
  setRegistry(makeRegistry());
}

/**
* Get the default theme key
* @return {String} the default theme key
*/
var getDefaultThemeKey = exports.getDefaultThemeKey = function getDefaultThemeKey() {
  var _getRegistry = getRegistry(),
      defaultThemeKey = _getRegistry.defaultThemeKey,
      registered = _getRegistry.registered;

  return defaultThemeKey || registered[registered.length - 1] || DEFAULT_THEME_KEY;
};

/**
* Get the default theme key
* @param {String} the default theme key
* @param {Object} overrides for the theme variables
* @param {Boolean} is the theme immutable/can it be overridden?
*/
var setDefaultTheme = exports.setDefaultTheme = function setDefaultTheme(themeKey, overrides, immutable) {
  var registry = getRegistry();
  var theme = registry.themes[themeKey];

  if (!theme) {
    (0, _warning2.default)(theme, '[themeable] Could not find theme: \'' + themeKey + '\' in the registry.');
    theme = {};
  }

  registry.defaultThemeKey = themeKey;
  registry.overrides = overrides;

  return Object.assign({}, theme, {
    immutable: !!immutable
  });
};

/**
 * Wraps a theme and provides a method to set as default and toggle between a11y and base
 *
 * @param {String} themeKey
 * @param {Object} options Provide the base theme and an optional accessible version
 */
var makeTheme = exports.makeTheme = function makeTheme(_ref) {
  var key = _ref.key,
      variables = _ref.variables,
      a11y = _ref.a11y,
      immutable = _ref.immutable,
      description = _ref.description;

  return {
    key: key || (0, _uid2.default)(),
    variables: variables,
    immutable: immutable,
    description: description,
    use: function use() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          accessible = _ref2.accessible,
          overrides = _ref2.overrides;

      if (accessible) {
        (0, _warning2.default)(a11y, '[themeable] No accessible theme provided for ' + key + '.');
        setDefaultTheme(a11y.key, null, true);
      } else {
        (0, _warning2.default)(variables, 'Invalid theme.');
        setDefaultTheme(key, overrides, false);
      }
    }
  };
};

var registerTheme = exports.registerTheme = function registerTheme(theme) {
  var registry = getRegistry();
  var registeredTheme = void 0;

  if (theme.key && registry.themes[theme.key]) {
    registeredTheme = registry.themes[theme.key];
  } else {
    registeredTheme = makeTheme(theme);
    registry.themes[registeredTheme.key] = registeredTheme;
    registry.registered.push(registeredTheme.key);
  }

  return registeredTheme;
};

var getRegisteredTheme = exports.getRegisteredTheme = function getRegisteredTheme(themeKey) {
  var defaultTheme = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!themeKey) return defaultTheme;

  var theme = getRegistry().themes[themeKey];
  if (theme) {
    return theme;
  } else {
    (0, _warning2.default)(theme, '[themeable] Could not find theme: \'' + themeKey + '\' in the registry.');
    return defaultTheme;
  }
};

var getVariablesWithOverrides = function getVariablesWithOverrides(themeKey, overrides) {
  var theme = getRegisteredTheme(themeKey);
  var variables = theme.variables || {};
  var overridesIsEmpty = (0, _isEmpty2.default)(overrides);

  if (!overridesIsEmpty && theme.immutable) {
    (0, _warning2.default)(false, '[themeable] Theme, \'%s\', is immutable. Cannot apply overrides: %o', theme.key, overrides);
    return variables;
  }

  var variablesIsEmpty = (0, _isEmpty2.default)(variables);
  if (!variablesIsEmpty && !overridesIsEmpty) return (0, _mergeDeep2.default)(variables, overrides);
  if (variablesIsEmpty) return overrides || {};
  return variables;
};

/**
* Merge theme variables for 'themeKey' with the defaults (and overrides)
* @private
* @param {String} themeKey
* @param {Object} variable Theme overrides
* @return {Object} A merged variables object
*/
var mergeWithDefaultThemeVariables = function mergeWithDefaultThemeVariables(themeKey, overrides) {
  var variables = void 0;

  if (themeKey) {
    variables = getVariablesWithOverrides(themeKey, overrides);
  } else {
    // fall back to defaults, but still apply overrides
    var defaultOverrides = getRegistry().overrides;
    var defaultOverridesIsEmpty = (0, _isEmpty2.default)(defaultOverrides);
    if (!defaultOverridesIsEmpty && !(0, _isEmpty2.default)(overrides)) {
      variables = (0, _mergeDeep2.default)(defaultOverrides, overrides);
    } else if (defaultOverridesIsEmpty) {
      variables = overrides;
    } else {
      variables = defaultOverrides;
    }
  }

  return getVariablesWithOverrides(getDefaultThemeKey(), variables);
};

/**
 * Wraps a component theme function to merge its return values with the return
 * values of the default function
 * @private
 * @param {Function} componentThemeFunction
 * @param {String} themeKey
 * @return {Object} A wrapped theme object
 */
var makeComponentTheme = function makeComponentTheme(componentThemeFunction, themeKey) {
  return function (variables) {
    var theme = {};

    if (typeof componentThemeFunction === 'function') {
      theme = componentThemeFunction(variables);
    }

    // so that the components for the themeKey can
    // just specify overrides we merge them with defaults here
    var defaultComponentTheme = {};

    if (typeof componentThemeFunction[themeKey] === 'function') {
      defaultComponentTheme = componentThemeFunction[themeKey](variables);
    }

    if (!(0, _isEmpty2.default)(defaultComponentTheme) && !(0, _isEmpty2.default)(theme)) {
      theme = Object.assign({}, theme, defaultComponentTheme);
    } else if ((0, _isEmpty2.default)(theme)) {
      theme = defaultComponentTheme;
    }

    return theme;
  };
};

/**
* Register a component theme function
*
* @param {String} key The theme key for the component (e.g., [Link.theme])
* @param {Function} componentThemeFunction The function to use for preparing this component's theme
*/
var registerComponentTheme = exports.registerComponentTheme = function registerComponentTheme(componentKey, componentThemeFunction) {
  var _getRegistry2 = getRegistry(),
      components = _getRegistry2.components;

  if (typeof componentThemeFunction !== 'function') {
    return;
  }

  components[DEFAULT_THEME_KEY][componentKey] = componentThemeFunction;

  Object.keys(componentThemeFunction).forEach(function (themeKey) {
    if (!components.hasOwnProperty(themeKey)) {
      // eslint-disable-line no-prototype-builtins
      components[themeKey] = {};
    }

    components[themeKey][componentKey] = makeComponentTheme(componentThemeFunction, themeKey);
  });
};

var getRegisteredComponents = exports.getRegisteredComponents = function getRegisteredComponents(themeKey) {
  var _getRegistry3 = getRegistry(),
      components = _getRegistry3.components;

  var t = themeKey || getDefaultThemeKey();

  // fall back to the default component theme functions
  return Object.assign({}, components[DEFAULT_THEME_KEY], components[t]);
};

var getRegisteredComponent = exports.getRegisteredComponent = function getRegisteredComponent(themeKey, componentKey) {
  var _getRegistry4 = getRegistry(),
      components = _getRegistry4.components;

  return components[themeKey] && components[themeKey][componentKey] || components[DEFAULT_THEME_KEY][componentKey];
};

/**
* Generate themes for all registered [@themeable](#themeable) components,
* to be used by [`<ApplyTheme />`](#ApplyTheme).
*
* @param {String} themeKey The theme to use (for global theme variables across components)
* @param {Object} overrides theme variable overrides (usually for user defined values)
* @return {Object} A theme config to use with `<ApplyTheme />`
*/
var generateTheme = exports.generateTheme = function generateTheme(themeKey, overrides) {
  var registry = getRegistry();

  (0, _warning2.default)(registry.registered.length > 0, '[themeable] No themes have been registered. ' + 'Import a theme from @instructure/ui-themes or register a custom theme with registerTheme ' + '(see @instructure/ui-themeable/lib/registry.js).');

  var components = getRegisteredComponents(themeKey);
  var theme = {};

  var variables = mergeWithDefaultThemeVariables(themeKey, overrides);

  Object.getOwnPropertySymbols(components).forEach(function (componentKey) {
    theme[componentKey] = components[componentKey](variables);
  });

  return theme;
};

/**
* Return theme variables for themeKey.
*
* @param {String} themeKey The theme to use to generate the variables
* @return {Object} A theme config to use with `<ApplyTheme />`
*/
var getTheme = exports.getTheme = function getTheme(themeKey) {
  return getRegisteredTheme(themeKey).variables || {};
};

/**
 * Generate theme variables for a @themeable component.
 * If no themeKey is provided, the default theme will be generated.
 *
 * @param {Symbol} key The theme key for the component (e.g., [Link.theme])
 * @param {String} themeKey The theme to use to generate the variables (falls back to the default theme)
 * @param {Object} overrides overrides for component level theme variables (usually user defined)
 * @return {Object} A theme config for the component
 */
var generateComponentTheme = exports.generateComponentTheme = function generateComponentTheme(componentKey, themeKey, overrides) {
  var t = themeKey || getDefaultThemeKey();
  var theme = getRegisteredTheme(t);

  var componentTheme = {};
  var cachedComponentTheme = theme[componentKey];

  if (cachedComponentTheme) {
    // use the cached component theme if it exists
    componentTheme = cachedComponentTheme;
  } else {
    var variables = mergeWithDefaultThemeVariables(themeKey);
    var componentThemeFunction = getRegisteredComponent(t, componentKey);

    if (typeof componentThemeFunction === 'function') {
      try {
        componentTheme = componentThemeFunction(variables);
      } catch (e) {
        if (process.env.NODE_ENV !== 'production') {
          console.error(e); // eslint-disable-line no-console
        }
      }
    }
  }

  if ((0, _isEmpty2.default)(overrides)) {
    return theme[componentKey] = componentTheme;
  } else if (theme.immutable) {
    (0, _warning2.default)(false, '[themeable] Theme \'%s\' is immutable. Cannot apply overrides for \'%s\': %o', t, componentKey.toString(), overrides);
    return componentTheme;
  } else {
    return Object.assign({}, componentTheme, overrides);
  }
};

var getRegisteredThemes = exports.getRegisteredThemes = function getRegisteredThemes() {
  return getRegistry().themes;
};