var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import PropTypes from 'prop-types';

import getDisplayName from '@instructure/ui-utils/lib/react/getDisplayName';
import shallowEqual from '@instructure/ui-utils/lib/shallowEqual';
import isEmpty from '@instructure/ui-utils/lib/isEmpty';
import warning from '@instructure/ui-utils/lib/warning';
import generateElementId from '@instructure/ui-utils/lib/dom/generateElementId';
import deepEqual from '@instructure/ui-utils/lib/deepEqual';
import findDOMNode from '@instructure/ui-utils/lib/dom/findDOMNode';

import { ThemeContextTypes, getThemeContext } from './ThemeContextTypes';

import applyVariablesToNode from './utils/applyVariablesToNode';
import getCssText from './utils/getCssText';
import setTextDirection from './utils/setTextDirection';

import { generateComponentTheme, generateTheme, registerComponentTheme } from './registry';

import StyleSheet from './StyleSheet';

/**
* ---
* category: utilities/themes
* ---
* A decorator or higher order component that makes a component `themeable`.
*
* As a HOC:
*
* ```js
* import themeable from '@instructure/ui-themeable'
* import styles from 'styles.css'
* import theme from 'theme.js'
*
* class Example extends React.Component {
*   render () {
*     return <div className={styles.root}>Hello</div>
*   }
* }
*
* export default themeable(theme, styles)(Example)
* ```
*
* Note: in the above example, the CSS file must be transformed into a JS object
* via [babel](#babel-plugin-themeable-styles) or [webpack](#ui-presets) loader.
*
* Themeable components inject their themed styles into the document when they are mounted.
*
* After the initial mount, a themeable component's theme can be configured explicitly
* via its `theme` prop or passed via React context using the [ApplyTheme](#ApplyTheme) component.
*
* Themeable components register themselves with the [global theme registry](#registry)
* when they are imported into the application, so you will need to be sure to import them
* before you mount your application so that the default themed styles can be generated and injected.
*
* @param {function} theme - A function that generates the component theme variables.
* @param {object} styles - The component styles object.
* @return {function} composes the themeable component.
*/

var emptyObj = {};

export default function themeable(theme) {
  var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return function (ComposedComponent) {
    var _class, _temp2;

    var displayName = getDisplayName(ComposedComponent);

    var contextKey = Symbol(displayName);
    var componentId = generateElementId(displayName);

    var template = typeof styles.template === 'function' ? styles.template : function () {
      warning(false, '[themeable] Invalid styles for: %O', displayName);
      return '';
    };

    registerComponentTheme(contextKey, theme);

    var getThemeFromContext = function getThemeFromContext(context) {
      var themeContext = getThemeContext(context);
      if (themeContext && themeContext.theme && themeContext.theme[contextKey]) {
        return Object.assign({}, themeContext.theme[contextKey], {
          immutable: themeContext.immutable
        });
      } else {
        return emptyObj;
      }
    };

    var generateThemeForContextKey = function generateThemeForContextKey(themeKey, overrides) {
      return generateComponentTheme(contextKey, themeKey, overrides);
    };

    var ThemeableComponent = (_temp2 = _class = function (_ComposedComponent) {
      _inherits(ThemeableComponent, _ComposedComponent);

      function ThemeableComponent() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ThemeableComponent);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ThemeableComponent.__proto__ || Object.getPrototypeOf(ThemeableComponent)).call.apply(_ref, [this].concat(args))), _this), _this._themeCache = null, _this._instanceId = generateElementId(displayName), _temp), _possibleConstructorReturn(_this, _ret);
      }
      // For testing purposes


      _createClass(ThemeableComponent, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          if (!StyleSheet.mounted(componentId)) {
            var defaultTheme = generateThemeForContextKey();
            var cssText = getCssText(template, defaultTheme, componentId);
            StyleSheet.mount(componentId, cssText);
          }

          if (_get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentWillMount', this)) {
            _get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentWillMount', this).call(this);
          }
        }
      }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.applyTheme();

          setTextDirection();

          if (_get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentDidMount', this)) {
            _get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentDidMount', this).call(this);
          }
        }
      }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
          var themeContextWillChange = !deepEqual(getThemeContext(this.context), getThemeContext(nextContext));
          if (themeContextWillChange) return true;

          if (_get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'shouldComponentUpdate', this)) {
            return _get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'shouldComponentUpdate', this).call(this, nextProps, nextState, nextContext);
          }

          return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState) || !shallowEqual(this.context, nextContext);
        }
      }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate(nextProps, nextState, nextContext) {
          if (!deepEqual(nextProps.theme, this.props.theme) || !deepEqual(getThemeFromContext(nextContext), getThemeFromContext(this.context))) {
            this._themeCache = null;
          }

          if (_get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentWillUpdate', this)) {
            _get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentWillUpdate', this).call(this, nextProps, nextState, nextContext);
          }
        }
      }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState, prevContext) {
          if (!deepEqual(prevProps.theme, this.props.theme) || !deepEqual(getThemeFromContext(prevContext), getThemeFromContext(this.context))) {
            this.applyTheme();
          }

          if (_get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentDidUpdate', this)) {
            _get(ThemeableComponent.prototype.__proto__ || Object.getPrototypeOf(ThemeableComponent.prototype), 'componentDidUpdate', this).call(this, prevProps, prevState, prevContext);
          }
        }
      }, {
        key: 'applyTheme',
        value: function applyTheme(DOMNode) {
          var defaultTheme = generateThemeForContextKey();

          applyVariablesToNode(DOMNode || findDOMNode(this), // eslint-disable-line react/no-find-dom-node
          this.theme, defaultTheme, componentId, template, // for IE 11
          this.scope // for IE 11
          );
        }
      }, {
        key: 'scope',
        get: function get() {
          return this._instanceId;
        }
      }, {
        key: 'theme',
        get: function get() {
          if (this._themeCache !== null) {
            return this._themeCache;
          }

          var theme = getThemeFromContext(this.context);

          if (this.props.theme) {
            if (!theme) {
              theme = this.props.theme;
            } else if (theme.immutable) {
              warning(false, '[themeable] Parent theme is immutable. Cannot apply theme: %O', this.props.theme);
            } else {
              theme = isEmpty(theme) ? this.props.theme : Object.assign({}, theme, this.props.theme);
            }
          }

          // pass in the component theme as overrides
          this._themeCache = generateThemeForContextKey(null, theme);

          return this._themeCache;
        }
      }]);

      return ThemeableComponent;
    }(ComposedComponent), _class.displayName = displayName, _class.componentId = componentId, _class.theme = contextKey, _class.contextTypes = Object.assign({}, ComposedComponent.contextTypes, ThemeContextTypes), _class.propTypes = Object.assign({}, ComposedComponent.propTypes, {
      theme: PropTypes.object // eslint-disable-line react/forbid-prop-types
    }), _class.generateTheme = generateThemeForContextKey, _temp2);


    return ThemeableComponent;
  };
}

/**
* Utility to generate a theme for all themeable components that have been registered.
* This theme can be applied using the [ApplyTheme](#ApplyTheme) component.
*
* @param {String} themeKey The theme to use (for global theme variables across components)
* @param {Object} overrides theme variable overrides (usually for dynamic/user defined values)
* @return {Object} A theme config to use with `<ApplyTheme />`
*/
themeable.generateTheme = generateTheme;