var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import PropTypes from 'prop-types';

export var SHADOW_TYPES = {
  resting: 'resting',
  above: 'above',
  topmost: 'topmost'
};

export var STACKING_TYPES = {
  deepest: 'deepest',
  below: 'below',
  resting: 'resting',
  above: 'above',
  topmost: 'topmost'
};

export var BORDER_WIDTHS = {
  '0': '0',
  none: 'none',
  small: 'small',
  medium: 'medium',
  large: 'large'
};

export var BORDER_RADII = {
  '0': '0',
  none: 'none',
  small: 'small',
  medium: 'medium',
  large: 'large'
};

export var BACKGROUNDS = {
  default: 'default',
  inverse: 'inverse',
  transparent: 'transparent'
};

export var SIZES = {
  xSmall: 'x-small',
  small: 'small',
  medium: 'medium',
  large: 'large',
  xLarge: 'x-large'
};

export var SPACING = {
  '0': '0',
  none: 'none',
  auto: 'auto',
  xxxSmall: 'xxx-small',
  xxSmall: 'xx-small',
  xSmall: 'x-small',
  small: 'small',
  medium: 'medium',
  large: 'large',
  xLarge: 'x-large',
  xxLarge: 'xx-large'

  /**
   * ---
   * category: utilities/themes
   * ---
   * Custom prop types for themeable React components.
   * @module ThemeablePropTypes
   */
};export default {
  shadow: PropTypes.oneOf(Object.values(SHADOW_TYPES)),
  stacking: PropTypes.oneOf(Object.values(STACKING_TYPES)),
  borderWidth: shorthandPropType(Object.values(BORDER_WIDTHS)),
  borderRadius: shorthandPropType(Object.values(BORDER_RADII)),
  background: PropTypes.oneOf(Object.values(BACKGROUNDS)),
  size: PropTypes.oneOf(Object.values(SIZES)),
  spacing: shorthandPropType(Object.values(SPACING))
};

export function shorthandPropType(validValues) {
  return function (props, propName, componentName, location) {
    var propValue = props[propName];

    if (typeof propValue === 'undefined') {
      return;
    }

    var propValueType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);

    if (propValueType !== 'string') {
      return new Error('Invalid ' + location + ' `' + propName + '` of type `' + propValueType + '` supplied to `' + componentName + '`, expected ' + 'a string.');
    }

    var propValues = propValue.split(' ');
    var valuesLength = propValues.length;
    if (valuesLength > 0 && valuesLength < 5) {
      for (var i = 0; i < valuesLength; i++) {
        var valueIndex = validValues.indexOf(propValues[i]);
        if (valueIndex === -1) {
          return new Error('Invalid ' + location + ' `' + propName + '` `' + propValues[i] + '` supplied to `' + componentName + '`, expected ' + ('a one of `' + validValues.join(', ') + '`.'));
        }
      }
    } else {
      return new Error('Invalid ' + location + ' `' + propName + '` `' + propValue + '` supplied to `' + componentName + '`, expected ' + ('between one and four of the following valid values: `' + validValues.join(', ') + '`.'));
    }
  };
}