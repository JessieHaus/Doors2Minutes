'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressCircle = exports.ProgressBar = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp; /*
                    * The MIT License (MIT)
                    *
                    * Copyright (c) 2015 - present Instructure, Inc.
                    *
                    * Permission is hereby granted, free of charge, to any person obtaining a copy
                    * of this software and associated documentation files (the "Software"), to deal
                    * in the Software without restriction, including without limitation the rights
                    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                    * copies of the Software, and to permit persons to whom the Software is
                    * furnished to do so, subject to the following conditions:
                    *
                    * The above copyright notice and this permission notice shall be included in all
                    * copies or substantial portions of the Software.
                    *
                    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                    * SOFTWARE.
                    */


var _ProgressBar = require('./ProgressBar');

Object.defineProperty(exports, 'ProgressBar', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ProgressBar).default;
  }
});

var _ProgressCircle = require('./ProgressCircle');

Object.defineProperty(exports, 'ProgressCircle', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ProgressCircle).default;
  }
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ThemeablePropTypes = require('@instructure/ui-themeable/lib/utils/ThemeablePropTypes');

var _ThemeablePropTypes2 = _interopRequireDefault(_ThemeablePropTypes);

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _ProgressCircle2 = _interopRequireDefault(_ProgressCircle);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
---
category: components
---
**/
var Progress = (_temp = _class = function (_Component) {
  _inherits(Progress, _Component);

  function Progress() {
    _classCallCheck(this, Progress);

    return _possibleConstructorReturn(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).apply(this, arguments));
  }

  _createClass(Progress, [{
    key: 'render',
    value: function render() {
      var variant = this.props.variant;
      var childVariant = variant === 'bar-inverse' || variant === 'circle-inverse' ? 'inverse' : 'default';

      if (variant === 'circle' || variant === 'circle-inverse') {
        return _react2.default.createElement(_ProgressCircle2.default, Object.assign({}, this.props, { variant: childVariant }));
      } else {
        return _react2.default.createElement(_ProgressBar2.default, Object.assign({}, this.props, { variant: childVariant }));
      }
    }
  }]);

  Progress.displayName = 'Progress'
  ;
  return Progress;
}(_react.Component), _class.propTypes = {
  /**
  * A label is required for accessibility
  */
  label: _propTypes2.default.string.isRequired,
  /**
  * Different-sized progress bars and circles
  */
  size: _propTypes2.default.oneOf(['x-small', 'small', 'medium', 'large']),
  /**
  * Maximum value (defaults to 100)
  */
  valueMax: _propTypes2.default.number,
  /**
  * Receives the progress of the event
  */
  valueNow: _propTypes2.default.number,
  /**
  * A function that returns the current value formatted for screen readers
  */
  formatValueText: _propTypes2.default.func,
  /**
  * A function to format the displayed value. If null the value will not display.
  */
  formatDisplayedValue: _propTypes2.default.func,
  /**
  * Animate the progress meter to the current value when the component
  * has mounted
  */
  animateOnMount: _propTypes2.default.bool,
  /**
  * The bar changes to your theme's success color when complete
  */
  successColor: _propTypes2.default.bool,
  /**
  * Choose either a progress bar or circle. The `-inverse` variants are for
  * when you need the Progress component to appear on inverse backgrounds
  */
  variant: _propTypes2.default.oneOf(['bar', 'circle', 'bar-inverse', 'circle-inverse']),
  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: _ThemeablePropTypes2.default.spacing
}, _class.defaultProps = {
  formatValueText: function formatValueText(valueNow, valueMax) {
    return valueNow + ' / ' + valueMax;
  },
  size: 'medium',
  animateOnMount: false,
  valueMax: 100,
  valueNow: 0,
  variant: 'bar',
  successColor: true
}, _temp);
exports.default = Progress;