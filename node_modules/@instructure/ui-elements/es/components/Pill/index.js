var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import View from '@instructure/ui-layout/lib/components/View';

import themeable from '@instructure/ui-themeable';
import ThemeablePropTypes from '@instructure/ui-themeable/lib/utils/ThemeablePropTypes';
import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n/* Variables are defined in ./theme.js */\n\n._1Vf2GGN {\n  align-items: center;\n  font-family: ' + theme.fontFamily + ';\n  background: ' + theme.background + ';\n  box-sizing: border-box;\n  padding: ' + theme.padding + ';\n  border-width: ' + theme.borderWidth + ';\n  border-style: ' + theme.borderStyle + ';\n  height: ' + theme.height + ';\n  border-radius: 1rem;\n}\n\n._35WcX_v {\n  box-sizing: border-box;\n  text-transform: ' + theme.textTransformStyle + ';\n  font-size: ' + theme.textFontSize + ';\n  font-weight: ' + theme.textFontWeight + ';\n  letter-spacing: 0.0625rem;\n  min-width: 0.0625rem;\n  max-width: ' + theme.maxWidth + ';\n  flex: 1 0 auto;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n[dir="ltr"] ._35WcX_v {\n  text-align: center;\n}\n\n[dir="rtl"] ._35WcX_v {\n  text-align: center;\n}\n\n._3VOLf15 {\n  border-color: ' + theme.color + ';\n}\n\n._3VOLf15 ._35WcX_v {\n    color: ' + theme.color + ';\n  }\n\n._9KPV9fP {\n  border-color: ' + theme.primaryColor + ';\n}\n\n._9KPV9fP ._35WcX_v {\n    color: ' + theme.primaryColor + ';\n  }\n\n._2VreXFZ {\n  border-color: ' + theme.successColor + ';\n}\n\n._2VreXFZ ._35WcX_v {\n    color: ' + theme.successColor + ';\n  }\n\n._2_Ghu_k {\n  border-color: ' + theme.dangerColor + ';\n}\n\n._2_Ghu_k ._35WcX_v {\n    color: ' + theme.dangerColor + ';\n  }\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': '_1Vf2GGN',
  'text': '_35WcX_v',
  'default': '_3VOLf15',
  'primary': '_9KPV9fP',
  'success': '_2VreXFZ',
  'danger': '_2_Ghu_k'
};

import theme from './theme';

/**
---
category: components
---
**/

var Pill = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(Pill, _Component);

  function Pill() {
    _classCallCheck(this, Pill);

    return _possibleConstructorReturn(this, (Pill.__proto__ || Object.getPrototypeOf(Pill)).apply(this, arguments));
  }

  _createClass(Pill, [{
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          margin = _props.margin,
          text = _props.text,
          variant = _props.variant,
          as = _props.as,
          elementRef = _props.elementRef;


      var props = omitProps(this.props, Object.assign({}, Pill.propTypes, View.propTypes));

      var classes = classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles[variant], variant), _classnames));

      return React.createElement(
        View,
        Object.assign({}, props, {
          className: classes,
          as: as,
          elementRef: elementRef,
          margin: margin,
          title: text,
          display: 'inline-flex'
        }),
        React.createElement(
          'span',
          { className: styles.text },
          text
        )
      );
    }
  }]);

  Pill.displayName = 'Pill'
  ;
  return Pill;
}(Component), _class2.propTypes = {
  text: PropTypes.node.isRequired,
  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing,
  variant: PropTypes.oneOf(['default', 'success', 'danger', 'primary']),
  elementRef: PropTypes.func,
  as: CustomPropTypes.elementType
}, _class2.defaultProps = {
  variant: 'default'
}, _temp)) || _class);


export default Pill;