var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

import themeable from '@instructure/ui-themeable';
import debounce from '@instructure/ui-utils/lib/debounce';
import addResizeListener from '@instructure/ui-utils/lib/dom/addResizeListener';
import canUseDOM from '@instructure/ui-utils/lib/dom/canUseDOM';
import safeCloneElement from '@instructure/ui-utils/lib/react/safeCloneElement';
import ensureSingleChild from '@instructure/ui-utils/lib/react/ensureSingleChild';
import getDisplayName from '@instructure/ui-utils/lib/react/getDisplayName';
import warning from '@instructure/ui-utils/lib/warning';

import { truncate as _truncate } from './utils/Truncator';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*\n  imported from styles.css \n */\n\n/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 - present Instructure, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n.ieDCYcK {\n  display: block;\n  overflow: hidden;\n  word-wrap: break-word;\n  font-family: ' + theme.fontFamily + ';\n}\n\n.hMWqTud {\n  height: 100%;\n}\n\n._3gyfcr- {\n  visibility: hidden;\n  max-height: 0;\n  display: block;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'truncated': 'ieDCYcK',
  'auto': 'hMWqTud',
  'spacer': '_3gyfcr-'
};

import theme from './theme';

/**
---
category: components/typography
---
**/
var TruncateText = (_dec = themeable(theme, styles), _dec(_class = (_temp = _class2 = function (_Component) {
  _inherits(TruncateText, _Component);

  function TruncateText(props) {
    _classCallCheck(this, TruncateText);

    var _this = _possibleConstructorReturn(this, (TruncateText.__proto__ || Object.getPrototypeOf(TruncateText)).call(this, props));

    _this.update = function () {
      if (_this._ref) {
        _this.setState(_this.initialState);
      }
    };

    _this.state = _this.initialState;
    return _this;
  }

  _createClass(TruncateText, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.checkChildren();
      this._text = ensureSingleChild(this.props.children);

      this.truncate();

      if (this.props.debounce === 0) {
        this._resizeListener = addResizeListener(this._ref, this.update);
      } else {
        this._debounced = debounce(this.update, this.props.debounce, { leading: true, trailing: true });
        this._resizeListener = addResizeListener(this._ref, this._debounced);
      }
    }
  }, {
    key: 'componentWillUnMount',
    value: function componentWillUnMount() {
      if (this._resizeListener) {
        this._resizeListener.remove();
      }

      if (this._debounced) {
        this._debounced.cancel();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props !== nextProps) {
        this.setState(this.initialState);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var _state = this.state,
          isTruncated = _state.isTruncated,
          needsSecondRender = _state.needsSecondRender,
          truncatedText = _state.truncatedText;


      if (prevProps !== this.props) {
        this.checkChildren();
        this._text = ensureSingleChild(this.props.children);
      }

      if (!needsSecondRender && (isTruncated || this._prevTruncatedState)) {
        this.props.onUpdate(isTruncated, truncatedText);
        this._prevTruncatedState = isTruncated;
      } else {
        this.truncate();
      }
    }
  }, {
    key: 'checkChildren',
    value: function checkChildren() {
      var text = ensureSingleChild(this.props.children);

      React.Children.forEach(text.props.children, function (child) {
        if (child.props) {
          React.Children.forEach(child.props.children, function (grandChild) {
            if (grandChild.props) {
              // currently we don't support node trees deeper than 2 levels
              // truncation will still occur on their text content, but their actual node structure will be lost
              warning(false, '[' + getDisplayName(TruncateText) + '] Some children are too deep in the node tree and will not render.');
            }
          });
        }
      });
    }
  }, {
    key: 'truncate',
    value: function truncate() {
      if (!this.state.needsSecondRender) {
        return;
      }

      if (canUseDOM) {
        var result = _truncate(this._stage, Object.assign({}, this.props, {
          parent: this._ref,
          lineHeight: this.theme.lineHeight
        }));
        if (result) {
          var element = this.renderChildren(result.isTruncated, result.data, result.constraints.width);
          this.setState({
            needsSecondRender: false,
            isTruncated: result.isTruncated,
            truncatedElement: element,
            truncatedText: result.text
          });
        }
      } else {
        // if dom isn't available, use original children
        this.setState({
          needsSecondRender: false,
          isTruncated: false,
          truncatedElement: this._text,
          truncatedText: this._ref.textContent
        });
      }
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren(truncated, data, width) {
      if (!truncated) {
        return this._text;
      }

      var childElements = [];
      // iterate over each node used in the truncated string
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        var element = this._text.props.children[i];
        var nodeText = item.join('');

        if (element && element.props) {
          // if node is an html element and not just a string
          childElements.push(safeCloneElement(element, element.props, nodeText));
        } else {
          childElements.push(nodeText);
        }
      }
      // this spacer element is set to the max width the full text could potentially be
      // without this, text in `width: auto` elements won't expand to accomodate more text, once truncated
      childElements.push(React.createElement('span', { className: styles.spacer, style: { width: width || null } }));

      var children = React.Children.map(childElements, function (child) {
        return child;
      });
      return this._text.props ? safeCloneElement(this._text, this._text.props, children) : children;
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames,
          _this2 = this;

      var truncatedElement = this.state.truncatedElement;
      var _props = this.props,
          maxLines = _props.maxLines,
          children = _props.children;


      return React.createElement(
        'span',
        {
          className: classNames((_classNames = {}, _defineProperty(_classNames, styles.truncated, true), _defineProperty(_classNames, styles.auto, maxLines === 'auto'), _classNames)),
          ref: function ref(el) {
            _this2._ref = el;
          }
        },
        truncatedElement ? null : React.createElement(
          'span',
          { ref: function ref(el) {
              _this2._stage = el;
            } },
          ensureSingleChild(children)
        ),
        truncatedElement
      );
    }
  }, {
    key: 'initialState',
    get: function get() {
      return {
        isTruncated: false,
        needsSecondRender: true,
        truncatedElement: null,
        truncatedText: null
      };
    }
  }]);

  TruncateText.displayName = 'TruncateText'
  ;
  return TruncateText;
}(Component), _class2.propTypes = {
  /**
  * The content to be truncated.
  */
  children: PropTypes.node.isRequired,
  /**
  * Number of lines to allow before truncating. `auto` will fit to parent
  */
  maxLines: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  /**
  * Where to place the ellipsis within the string
  */
  position: PropTypes.oneOf(['end', 'middle']),
  /**
  * Add ellipsis after words or after any character
  */
  truncate: PropTypes.oneOf(['character', 'word']),
  /**
  * A string to use as the ellipsis
  */
  ellipsis: PropTypes.string,
  /**
  * Characters to ignore at truncated end of string
  */
  ignore: PropTypes.arrayOf(PropTypes.string),
  /**
  * Debounce delay in milliseconds
  */
  debounce: PropTypes.number,
  /**
  * Callback when truncated text has changed
  */
  onUpdate: PropTypes.func
}, _class2.defaultProps = {
  maxLines: 1,
  ellipsis: '\u2026',
  truncate: 'character',
  position: 'end',
  ignore: [' ', '.', ','],
  debounce: 0,
  onUpdate: function onUpdate(truncated, text) {}
}, _temp)) || _class);


export default TruncateText;