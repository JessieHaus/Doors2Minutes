var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp2;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import View from '@instructure/ui-layout/lib/components/View';
import addEventListener from '@instructure/ui-utils/lib/dom/addEventListener';

import themeable from '@instructure/ui-themeable';
import ThemeablePropTypes from '@instructure/ui-themeable/lib/utils/ThemeablePropTypes';
import { omitProps } from '@instructure/ui-utils/lib/react/passthroughProps';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._2HZqebU {\n  height: 2.5em;\n  border-style: solid;\n  border-color: ' + theme.borderColor + ';\n  box-sizing: border-box;\n  background-color: ' + theme.background + ';\n  background-position: center;\n  background-size: cover;\n  background-clip: content-box;\n  background-repeat: no-repeat;\n  overflow: hidden;\n  line-height: 0;\n  text-align: center;\n}\n\n[dir="ltr"] ._2HZqebU {\n  text-align: center;\n}\n\n[dir="rtl"] ._2HZqebU {\n  text-align: center;\n}\n\n  ._2HZqebU._2ofoqDq {\n    font-size: inherit;\n    border-width: ' + theme.borderWidthSmall + ';\n  }\n\n  ._2HZqebU.PwlCY4Q {\n    font-size: 0.75rem;\n    border-width: ' + theme.borderWidthSmall + ';\n  }\n\n  ._2HZqebU._2nFjkPY {\n    font-size: 1rem;\n    border-width: ' + theme.borderWidthSmall + ';\n  }\n\n  ._2HZqebU.TpUraNY {\n    font-size: 1.25rem;\n    border-width: ' + theme.borderWidthMedium + ';\n  }\n\n  ._2HZqebU._2N-73UQ {\n    font-size: 1.5rem;\n    border-width: ' + theme.borderWidthMedium + ';\n  }\n\n  ._2HZqebU.xEMNe1t {\n    font-size: 1.75rem;\n    border-width: ' + theme.borderWidthMedium + ';\n  }\n\n._2pPSUzK {\n  color: ' + theme.color + ';\n  line-height: 2.375em;\n  font-family: ' + theme.fontFamily + ';\n  font-weight: ' + theme.fontWeight + ';\n  letter-spacing: 0.0313em;\n}\n\n._5uCQHH4 {\n  width: 2.5em;\n  position: relative;\n  border-radius: 100%;\n  overflow: hidden;\n}\n\n._2SRSmh6 {\n  width: 3em;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': '_2HZqebU',
  'auto': '_2ofoqDq',
  'x-small': 'PwlCY4Q',
  'small': '_2nFjkPY',
  'medium': 'TpUraNY',
  'large': '_2N-73UQ',
  'x-large': 'xEMNe1t',
  'initials': '_2pPSUzK',
  'circle': '_5uCQHH4',
  'rectangle': '_2SRSmh6'
};

import theme from './theme';

/**
---
category: components
---
**/

var Avatar = (_dec = themeable(theme, styles), _dec(_class = (_temp2 = _class2 = function (_Component) {
  _inherits(Avatar, _Component);

  function Avatar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Avatar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Avatar.__proto__ || Object.getPrototypeOf(Avatar)).call.apply(_ref, [this].concat(args))), _this), _this.state = { loaded: false }, _this._image = null, _this._listeners = [], _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Avatar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.src) {
        this._image = new Image();
        this._image.src = this.props.src;

        this._listeners.push(addEventListener(this._image, 'load', function () {
          _this2.setState({ loaded: true });
        }));
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._listeners.forEach(function (listener) {
        listener.remove();
      });
    }
  }, {
    key: 'makeInitialsFromName',
    value: function makeInitialsFromName() {
      var name = this.props.name;

      if (!name || typeof name !== 'string') {
        return;
      }
      name = name.trim();
      if (name.length === 0) {
        return;
      }

      if (name.match(/\s+/)) {
        var names = name.split(/\s+/);
        return (names[0][0] + names[names.length - 1][0]).toUpperCase();
      } else {
        return name[0].toUpperCase();
      }
    }
  }, {
    key: 'renderInitials',
    value: function renderInitials() {
      return React.createElement(
        'span',
        { className: styles.initials, 'aria-hidden': 'true' },
        this.makeInitialsFromName()
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      return React.createElement(
        View,
        Object.assign({}, omitProps(this.props, Object.assign({}, Avatar.propTypes, View.propTypes)), {
          style: {
            backgroundImage: this.state.loaded ? 'url(\'' + this.props.src + '\')' : undefined // eslint-disable-line no-undefined
          },
          className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles[this.props.size], true), _defineProperty(_classnames, styles[this.props.variant], true), _classnames)),
          'aria-label': this.props.alt ? this.props.alt : null,
          role: this.props.alt ? 'img' : null,
          as: this.props.as,
          elementRef: this.props.elementRef,
          margin: this.props.margin,
          display: this.props.inline ? 'inline-block' : 'block'
        }),
        !this.state.loaded && this.renderInitials()
      );
    }
  }]);

  Avatar.displayName = 'Avatar'
  ;
  return Avatar;
}(Component), _class2.propTypes = {
  name: PropTypes.string.isRequired,
  /*
  * URL of the image to display as the background image
  */
  src: PropTypes.string,
  /*
  * Accessible label
  */
  alt: PropTypes.string,
  size: PropTypes.oneOf(['auto', 'x-small', 'small', 'medium', 'large', 'x-large']),
  variant: PropTypes.oneOf(['circle', 'rectangle']),
  /**
  * Valid values are `0`, `none`, `auto`, `xxx-small`, `xx-small`, `x-small`,
  * `small`, `medium`, `large`, `x-large`, `xx-large`. Apply these values via
  * familiar CSS-like shorthand. For example: `margin="small auto large"`.
  */
  margin: ThemeablePropTypes.spacing,
  inline: PropTypes.bool
}, _class2.defaultProps = {
  size: 'medium',
  variant: 'circle',
  inline: true
}, _temp2)) || _class);
export { Avatar as default };