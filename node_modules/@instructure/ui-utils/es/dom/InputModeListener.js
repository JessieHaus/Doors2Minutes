var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import addEventListener from './addEventListener';
import canUseDOM from './canUseDOM';

export var MODES = {
  keyboard: 'keyboard',
  pointer: 'pointer'
};

var InputModeListener = function () {
  function InputModeListener() {
    var _this = this;

    _classCallCheck(this, InputModeListener);

    this._listeners = [];
    this._initialized = false;
    this._mode = MODES.keyboard;

    this.onInitialPointerMove = function (event) {
      // Work around a Safari quirk that fires a mousemove on <html> whenever the
      // window blurs, even if you're tabbing out of the page. ¯\_(ツ)_/¯
      if (event.target.nodeName.toLowerCase() === 'html') {
        return;
      }
      _this._mode = MODES.pointer;
      _this._listeners.forEach(function (listener) {
        return listener.remove();
      });
    };

    this.onKeyDown = function () {
      _this._mode = MODES.keyboard;
    };

    this.onPointerDown = function () {
      _this._mode = MODES.pointer;
    };

    this.init = function () {
      if (!canUseDOM || _this._initialized) return;
      addEventListener(document, 'keydown', _this.onKeyDown, true);
      addEventListener(document, 'mousedown', _this.onPointerDown, true);
      addEventListener(document, 'pointerdown', _this.onPointerDown, true);
      addEventListener(document, 'touchstart', _this.onPointerDown, true);
      _this.addInitialPointerMoveListeners();
      _this._initialized = true;
    };

    this.init();
  }

  _createClass(InputModeListener, [{
    key: 'addInitialPointerMoveListeners',
    value: function addInitialPointerMoveListeners() {
      this._listeners.push(addEventListener(document, 'mousemove', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'mousedown', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'mouseup', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'pointermove', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'pointerdown', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'pointerup', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'touchmove', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'touchstart', this.onInitialPointerMove, true));
      this._listeners.push(addEventListener(document, 'touchend', this.onInitialPointerMove, true));
    }
  }, {
    key: 'isKeyboardMode',
    value: function isKeyboardMode() {
      this.init();
      return this._mode === MODES.keyboard;
    }
  }, {
    key: 'mode',
    get: function get() {
      this.init();
      return this._mode;
    }
  }]);

  return InputModeListener;
}();

export default new InputModeListener();