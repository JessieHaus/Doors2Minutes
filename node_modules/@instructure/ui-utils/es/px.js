var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import getFontSize from './dom/getFontSize';
import parseUnit from './parseUnit';

/**
 * ---
 * category: utilities
 * ---
 * Converts a unit value size combination (em, rem, px) to a number representing px
 *
 * Example inputs:
 *  - '100rem'
 *  - '20em'
 *  - '40px'
 *
 * @module px
 *
 * @param {String} val
 * @param {DomNode} el - containing element, for context measure is em (defaults to document.body)
 * @returns {Number} Returns numerical representation of pixels
*/
export default function px(val, el) {
  var container = el || document.body;

  if (!val || typeof val === 'number') {
    return val;
  }

  var _parseUnit = parseUnit(val),
      _parseUnit2 = _slicedToArray(_parseUnit, 2),
      num = _parseUnit2[0],
      unit = _parseUnit2[1];

  if (unit === 'rem') {
    return num * getFontSize();
  } else if (unit === 'em') {
    return num * getFontSize(container);
  } else {
    return num;
  }
}