var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import getDisplayName from './getDisplayName';
import warning from '../warning';

/**
* ---
* category: utilities/react
* ---
* Deprecate React component props. Warnings will display in the console when deprecated
* props are used.
*
* ```js
*  class Example extends Component {
*    static propTypes = {
*      currentProp: PropTypes.func
*    }
*  }
*  export default deprecated('3.0.0', {
*    deprecatedProp: 'currentProp',
*    nowNonExistentProp: true
*  })(Example)
* ```
*
* @module deprecated
* @param {string} version
* @param {object} oldProps (if this argument is null or undefined, the entire component is deprecated)
* @param {string} message
* @return {function} React component with deprecated props behavior
*/
export default function deprecated(version, oldProps, message) {
  return function (ComposedComponent) {
    var _class, _temp;

    if (process.env.NODE_ENV === 'production') return ComposedComponent;

    var displayName = getDisplayName(ComposedComponent);

    var DeprecatedComponent = (_temp = _class = function (_ComposedComponent) {
      _inherits(DeprecatedComponent, _ComposedComponent);

      function DeprecatedComponent() {
        _classCallCheck(this, DeprecatedComponent);

        return _possibleConstructorReturn(this, (DeprecatedComponent.__proto__ || Object.getPrototypeOf(DeprecatedComponent)).apply(this, arguments));
      }

      _createClass(DeprecatedComponent, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (oldProps) {
            warnDeprecatedProps(displayName, version, this.props, oldProps, message);
          } else {
            warnDeprecatedComponent(version, displayName, message);
          }

          if (_get(DeprecatedComponent.prototype.__proto__ || Object.getPrototypeOf(DeprecatedComponent.prototype), 'componentDidMount', this)) {
            _get(DeprecatedComponent.prototype.__proto__ || Object.getPrototypeOf(DeprecatedComponent.prototype), 'componentDidMount', this).call(this);
          }
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps, nextContext) {
          if (oldProps) {
            warnDeprecatedProps(displayName, version, nextProps, oldProps, message);
          } else {
            warnDeprecatedComponent(version, displayName, message);
          }

          if (_get(DeprecatedComponent.prototype.__proto__ || Object.getPrototypeOf(DeprecatedComponent.prototype), 'componentWillReceiveProps', this)) {
            _get(DeprecatedComponent.prototype.__proto__ || Object.getPrototypeOf(DeprecatedComponent.prototype), 'componentWillReceiveProps', this).call(this, nextProps, nextContext);
          }
        }
      }]);

      return DeprecatedComponent;
    }(ComposedComponent), _class.displayName = displayName, _temp);


    return DeprecatedComponent;
  };
}

/**
 *
 * Trigger a console warning if the specified prop variant is deprecated
 *
 * @param {function} propType - validates the prop type. Returns null if valid, error otherwise
 * @param {array} deprecated - an array of the deprecated variant names
 * @param {string} message - additional information to display with the warning
 */
export var deprecatePropValues = function deprecatePropValues(propType) {
  var deprecated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var message = arguments[2];

  return function (props, propName, componentName) {
    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var isDeprecatedValue = deprecated.includes(props[propName]);
    warning(!isDeprecatedValue, '[' + componentName + '] The \'' + props[propName] + '\' value for the `' + propName + '` prop is deprecated. ' + (message || ''));
    return isDeprecatedValue ? null : propType.apply(undefined, [props, propName, componentName].concat(rest));
  };
};

function warnDeprecatedProps(componentName, version, props, oldProps, message) {
  Object.keys(oldProps).forEach(function (oldProp) {
    if (typeof props[oldProp] !== 'undefined') {
      var newProp = typeof oldProps[oldProp] === 'string' ? oldProps[oldProp] : null;

      warning(false, '[%s] `%s` was deprecated in %s%s. %s', componentName, oldProp, version, newProp ? '. Use `' + newProp + '` instead' : '', message || '');
    }
  });
}

export function warnDeprecatedComponent(version, componentName, message) {
  warning(false, '[%s] was deprecated in version %s. %s', componentName, version, message || '');
}

export function changedPackageWarning(prevPackage, newPackage) {
  return 'It has been moved from @instructure/' + prevPackage + ' to @instructure/' + newPackage + '.';
}