'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DIRECTION = exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2; /*
                     * The MIT License (MIT)
                     *
                     * Copyright (c) 2015 - present Instructure, Inc.
                     *
                     * Permission is hereby granted, free of charge, to any person obtaining a copy
                     * of this software and associated documentation files (the "Software"), to deal
                     * in the Software without restriction, including without limitation the rights
                     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                     * copies of the Software, and to permit persons to whom the Software is
                     * furnished to do so, subject to the following conditions:
                     *
                     * The above copyright notice and this permission notice shall be included in all
                     * copies or substantial portions of the Software.
                     *
                     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                     * SOFTWARE.
                     */

var _TextDirectionContextTypes = require('../../TextDirectionContextTypes');

Object.defineProperty(exports, 'DIRECTION', {
  enumerable: true,
  get: function get() {
    return _TextDirectionContextTypes.DIRECTION;
  }
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _getElementType = require('@instructure/ui-utils/lib/react/getElementType');

var _getElementType2 = _interopRequireDefault(_getElementType);

var _getTextDirection = require('../../utils/getTextDirection');

var _getTextDirection2 = _interopRequireDefault(_getTextDirection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
---
category: components/utilities
---
**/
var ApplyTextDirection = (_temp2 = _class = function (_Component) {
  _inherits(ApplyTextDirection, _Component);

  function ApplyTextDirection() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ApplyTextDirection);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ApplyTextDirection.__proto__ || Object.getPrototypeOf(ApplyTextDirection)).call.apply(_ref, [this].concat(args))), _this), _this._defaultDirection = (0, _getTextDirection2.default)(), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ApplyTextDirection, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return (0, _TextDirectionContextTypes.makeTextDirectionContext)(this.dir);
    }
  }, {
    key: 'render',
    value: function render() {
      var ElementType = (0, _getElementType2.default)(ApplyTextDirection, this.props);
      var children = this.props.children;


      return _react2.default.createElement(
        ElementType,
        { dir: this.dir },
        typeof children === 'function' ? children(this.dir, this.dir === _TextDirectionContextTypes.DIRECTION.rtl) : children
      );
    }
  }, {
    key: 'dir',
    get: function get() {
      var context = (0, _TextDirectionContextTypes.getTextDirectionContext)(this.context) || {};

      return this.props.dir || context.dir || this._defaultDirection;
    }
  }]);

  ApplyTextDirection.displayName = 'ApplyTextDirection'
  ;
  return ApplyTextDirection;
}(_react.Component), _class.propTypes = {
  /**
  * string 'ltr' or 'rtl' representing the document direction
  */
  dir: _propTypes2.default.oneOf(Object.values(_TextDirectionContextTypes.DIRECTION)),
  /**
  * a single child (children must be wrapped in a single component/element) or function
  * returning a child called with the following arguments:
  * @param {string} dir - the string value 'rtl' or 'ltr'
  * @param {Boolean} rtl - boolean value true if the direction is 'rtl'
  */
  children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
  /**
  * accepts only one child (children must be wrapped in a single component/element)
  */
  as: _CustomPropTypes2.default.elementType
}, _class.defaultProps = {
  as: 'span'
}, _class.childContextTypes = _TextDirectionContextTypes.TextDirectionContextTypes, _class.contextTypes = _TextDirectionContextTypes.TextDirectionContextTypes, _temp2);
exports.default = ApplyTextDirection;