'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawerTray = exports.DrawerContent = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _class, _class2, _temp2; /*
                                           * The MIT License (MIT)
                                           *
                                           * Copyright (c) 2015 - present Instructure, Inc.
                                           *
                                           * Permission is hereby granted, free of charge, to any person obtaining a copy
                                           * of this software and associated documentation files (the "Software"), to deal
                                           * in the Software without restriction, including without limitation the rights
                                           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                           * copies of the Software, and to permit persons to whom the Software is
                                           * furnished to do so, subject to the following conditions:
                                           *
                                           * The above copyright notice and this permission notice shall be included in all
                                           * copies or substantial portions of the Software.
                                           *
                                           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                           * SOFTWARE.
                                           */


var _DrawerContent = require('./DrawerContent');

Object.defineProperty(exports, 'DrawerContent', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_DrawerContent).default;
  }
});

var _DrawerTray = require('./DrawerTray');

Object.defineProperty(exports, 'DrawerTray', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_DrawerTray).default;
  }
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _bidirectional = require('@instructure/ui-i18n/lib/bidirectional');

var _bidirectional2 = _interopRequireDefault(_bidirectional);

var _uiThemeable = require('@instructure/ui-themeable');

var _uiThemeable2 = _interopRequireDefault(_uiThemeable);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _safeCloneElement = require('@instructure/ui-utils/lib/react/safeCloneElement');

var _safeCloneElement2 = _interopRequireDefault(_safeCloneElement);

var _matchComponentTypes = require('@instructure/ui-utils/lib/react/matchComponentTypes');

var _matchComponentTypes2 = _interopRequireDefault(_matchComponentTypes);

var _getBoundingClientRect = require('@instructure/ui-utils/lib/dom/getBoundingClientRect');

var _getBoundingClientRect2 = _interopRequireDefault(_getBoundingClientRect);

var _px = require('@instructure/ui-utils/lib/px');

var _px2 = _interopRequireDefault(_px);

var _warning = require('@instructure/ui-utils/lib/warning');

var _warning2 = _interopRequireDefault(_warning);

var _mirrorPlacement = require('../../utils/mirrorPlacement');

var _DrawerContent2 = _interopRequireDefault(_DrawerContent);

var _DrawerTray2 = _interopRequireDefault(_DrawerTray);

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.qBBtv5E {\n  position: relative;\n  height: 100%;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': 'qBBtv5E'
};


/**
---
category: components/layout
---
**/
var DrawerLayout = (_dec = (0, _bidirectional2.default)(), _dec2 = (0, _uiThemeable2.default)(_theme2.default, styles), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_Component) {
  _inherits(DrawerLayout, _Component);

  function DrawerLayout() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DrawerLayout);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DrawerLayout.__proto__ || Object.getPrototypeOf(DrawerLayout)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      shouldOverlayTray: false,
      trayWidth: 0,
      contentWidth: 0
    }, _this._content = null, _this.handleContentRef = function (el) {
      _this._content = el;
    }, _this.handleTrayContentRef = function (el) {
      _this._tray = el;
    }, _this.handleContentSizeChange = function (_ref2) {
      var width = _ref2.width;

      _this.setState(function (state, props) {
        var nextState = _this.getNextState(props.minWidth, state.trayWidth, width, state.shouldOverlayTray);

        if (state.shouldOverlayTray !== nextState.shouldOverlayTray) {
          _this.notifyOverlayTrayChange(nextState.shouldOverlayTray);
        }

        return nextState;
      });
    }, _this.handleTraySizeChange = function (_ref3) {
      var width = _ref3.width;

      _this.setState(function (state, props) {
        var nextState = _this.getNextState(props.minWidth, width, state.contentWidth, true);

        if (state.shouldOverlayTray !== nextState.shouldOverlayTray) {
          _this.notifyOverlayTrayChange(nextState.shouldOverlayTray);
        }

        return nextState;
      });
    }, _this.handleTrayTransitionEnter = function () {
      var width = 0;

      if (_this._tray) {
        width = (0, _getBoundingClientRect2.default)(_this._tray).width;
      }

      _this.handleTraySizeChange({ width: width });
    }, _this.handleTrayTransitionExit = function () {
      _this.handleTraySizeChange({ width: 0 });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DrawerLayout, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        shouldOverlayTray: this.state.shouldOverlayTray
      };
    }
  }, {
    key: 'shouldOverlayTray',
    value: function shouldOverlayTray(minWidth, trayWidth, contentWidth, trayIsOverlayed) {
      if (!this._content) return false;

      var minWidthPx = (0, _px2.default)(minWidth, this._content);

      if (trayIsOverlayed) {
        return contentWidth - trayWidth < minWidthPx;
      } else {
        return contentWidth < minWidthPx;
      }
    }
  }, {
    key: 'getNextState',
    value: function getNextState(minWidth, trayWidth, contentWidth, trayIsOverlayed) {
      var shouldOverlayTray = this.shouldOverlayTray(minWidth, trayWidth, contentWidth, trayIsOverlayed);

      return {
        trayWidth: trayWidth,
        contentWidth: contentWidth,
        shouldOverlayTray: shouldOverlayTray
      };
    }
  }, {
    key: 'notifyOverlayTrayChange',
    value: function notifyOverlayTrayChange(shouldOverlayTray) {
      var onOverlayTrayChange = this.props.onOverlayTrayChange;

      if (typeof onOverlayTrayChange === 'function') {
        onOverlayTrayChange(shouldOverlayTray);
      }
    }
  }, {
    key: 'renderChildren',
    value: function renderChildren() {
      var _this2 = this;

      var trayCount = 0;
      var contentCount = 0;

      var shouldOverlayTray = this.shouldOverlayTray(this.props.minWidth, this.state.trayWidth, this.state.contentWidth, this.state.shouldOverlayTray);

      var children = _react.Children.map(this.props.children, function (child, index) {
        if ((0, _matchComponentTypes2.default)(child, [_DrawerTray2.default])) {
          trayCount++;
          return (0, _safeCloneElement2.default)(child, {
            key: child.props.label,
            contentRef: _this2.handleTrayContentRef,
            onEnter: _this2.handleTrayTransitionEnter,
            onExit: _this2.handleTrayTransitionExit
          });
        } else if ((0, _matchComponentTypes2.default)(child, [_DrawerContent2.default])) {
          contentCount++;
          return _this2.state.trayWidth !== null ? (0, _safeCloneElement2.default)(child, {
            key: child.props.label,
            style: _this2.contentStyle,
            onSizeChange: _this2.handleContentSizeChange,
            contentRef: _this2.handleContentRef,
            shouldTransition: !shouldOverlayTray
          }) : null;
        } else {
          return child;
        }
      });

      (0, _warning2.default)(trayCount <= 1, '[DrawerLayout] Only one DrawerTray per DrawerLayout is supported.');
      (0, _warning2.default)(contentCount <= 1, '[DrawerLayout] Only one DrawerContent per DrawerLayout is supported.');

      return children;
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: styles.root },
        this.renderChildren()
      );
    }
  }, {
    key: 'trayProps',
    get: function get() {
      var tray = _react.Children.toArray(this.props.children).filter(function (child) {
        return (0, _matchComponentTypes2.default)(child, [_DrawerTray2.default]);
      })[0];
      return tray.props;
    }
  }, {
    key: 'trayPlacement',
    get: function get() {
      var placement = this.trayProps.placement;

      return this.rtl ? (0, _mirrorPlacement.mirrorHorizontalPlacement)(placement, ' ') : placement;
    }
  }, {
    key: 'contentMargin',
    get: function get() {
      var trayWidth = this.state.trayWidth || 0;
      return this.state.shouldOverlayTray ? 0 : trayWidth;
    }
  }, {
    key: 'contentStyle',
    get: function get() {
      var shouldOverlayTray = this.shouldOverlayTray(this.props.minWidth, this.state.trayWidth, this.state.contentWidth, this.state.shouldOverlayTray);
      var marginLeft = 0;
      var marginRight = 0;

      if (!shouldOverlayTray) {
        if (this.trayPlacement === 'start') {
          marginLeft = this.contentMargin;
        }

        if (this.trayPlacement === 'end') {
          marginRight = this.contentMargin;
        }
      }

      return {
        marginLeft: marginLeft + 'px',
        marginRight: marginRight + 'px'
      };
    }
  }]);

  DrawerLayout.displayName = 'DrawerLayout'
  ;
  return DrawerLayout;
}(_react.Component), _class2.propTypes = {
  /**
   * Exactly one of each of the following child types: `DrawerContent`, `DrawerTray`
   */
  children: _CustomPropTypes2.default.Children.oneOfEach([_DrawerContent2.default, _DrawerTray2.default]),
  /**
   * Min width for the `<DrawerContent />`
   */
  minWidth: _propTypes2.default.string,
  /**
   * Function called when the `<DrawerContent />` is resized and hits the `minWidth` breakpoint
   * Called with a boolean value, `true` if the tray is now overlaying the content or `false` if
   * it is side by side
   */
  onOverlayTrayChange: _propTypes2.default.func
}, _class2.defaultProps = {
  children: null,
  minWidth: '30rem',
  onOverlayTrayChange: function onOverlayTrayChange(shouldOverlayTray) {}
}, _class2.childContextTypes = {
  shouldOverlayTray: _propTypes2.default.bool
}, _temp2)) || _class) || _class);
exports.default = DrawerLayout;