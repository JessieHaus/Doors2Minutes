'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _class, _class2, _temp2; /*
                                           * The MIT License (MIT)
                                           *
                                           * Copyright (c) 2015 - present Instructure, Inc.
                                           *
                                           * Permission is hereby granted, free of charge, to any person obtaining a copy
                                           * of this software and associated documentation files (the "Software"), to deal
                                           * in the Software without restriction, including without limitation the rights
                                           * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                           * copies of the Software, and to permit persons to whom the Software is
                                           * furnished to do so, subject to the following conditions:
                                           *
                                           * The above copyright notice and this permission notice shall be included in all
                                           * copies or substantial portions of the Software.
                                           *
                                           * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                           * SOFTWARE.
                                           */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _bidirectional = require('@instructure/ui-i18n/lib/bidirectional');

var _bidirectional2 = _interopRequireDefault(_bidirectional);

var _Transition = require('@instructure/ui-motion/lib/components/Transition');

var _Transition2 = _interopRequireDefault(_Transition);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _uiThemeable = require('@instructure/ui-themeable');

var _uiThemeable2 = _interopRequireDefault(_uiThemeable);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _createChainedFunction = require('@instructure/ui-utils/lib/createChainedFunction');

var _createChainedFunction2 = _interopRequireDefault(_createChainedFunction);

var _Dialog = require('@instructure/ui-a11y/lib/components/Dialog');

var _Dialog2 = _interopRequireDefault(_Dialog);

var _Portal = require('@instructure/ui-portal/lib/components/Portal');

var _Portal2 = _interopRequireDefault(_Portal);

var _mirrorPlacement = require('../../../utils/mirrorPlacement');

var _theme = require('./theme');

var _theme2 = _interopRequireDefault(_theme);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.NYC47Q_ {\n  position: absolute;\n  background-color: ' + theme.background + ';\n  z-index: ' + theme.zIndex + ';\n  overflow-y: auto;\n  overflow-x: hidden;\n  box-sizing: content-box;\n}\n\n._17RmhMa {\n  box-shadow: ' + theme.boxShadow + ';\n}\n\n.ozptfsK {\n  border-width: 0;\n  border-color: ' + theme.borderColor + ';\n  border-style: ' + theme.borderStyle + ';\n}\n\n.jrlxMGd {\n  left: 0;\n}\n\n/* stylelint-disable-line property-blacklist */\n\n.jrlxMGd.ozptfsK {\n    border-right-width: ' + theme.borderWidth + '; /* stylelint-disable-line property-blacklist */\n    box-sizing: border-box;\n  }\n\n._1bULdXn {\n  right: 0;\n}\n\n/* stylelint-disable-line property-blacklist */\n\n._1bULdXn.ozptfsK {\n    border-left-width: ' + theme.borderWidth + '; /* stylelint-disable-line property-blacklist */\n    box-sizing: border-box;\n  }\n\n.jrlxMGd,\n._1bULdXn {\n  top: 0;\n  bottom: 0;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': 'NYC47Q_',
  'shadow': '_17RmhMa',
  'border': 'ozptfsK',
  'placement--start': 'jrlxMGd',
  'placement--end': '_1bULdXn'
};


/**
---
parent: DrawerLayout
---
**/

var DrawerTray = (_dec = (0, _bidirectional2.default)(), _dec2 = (0, _uiThemeable2.default)(_theme2.default, styles), _dec(_class = _dec2(_class = (_temp2 = _class2 = function (_Component) {
  _inherits(DrawerTray, _Component);

  function DrawerTray() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, DrawerTray);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DrawerTray.__proto__ || Object.getPrototypeOf(DrawerTray)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      transitioning: false,
      portalOpen: false
    }, _this.handleContentRef = function (node) {
      _this._content = node;
      if (typeof _this.props.contentRef === 'function') {
        _this.props.contentRef(node);
      }
    }, _this.handleTransitionEntered = function () {
      _this.setState({ transitioning: false });
    }, _this.handleTransitionExited = function () {
      _this.setState({
        transitioning: false
      });
    }, _this.handlePortalOpen = function (DOMNode) {
      // We apply the theme here because now we have a DOM node (provided by Portal)
      _this.applyTheme(DOMNode);
      _this.setState({
        portalOpen: true
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(DrawerTray, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (this.props.open !== prevProps.open) {
        this.setState({
          transitioning: true
        });
      }
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _props = this.props,
          children = _props.children,
          render = _props.render;


      if (typeof render === 'function') {
        return render();
      } else if (typeof children === 'function') {
        return children();
      } else {
        return children;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var _props2 = this.props,
          label = _props2.label,
          children = _props2.children,
          render = _props2.render,
          placement = _props2.placement,
          open = _props2.open,
          onOpen = _props2.onOpen,
          onClose = _props2.onClose,
          border = _props2.border,
          shadow = _props2.shadow,
          onEnter = _props2.onEnter,
          onEntering = _props2.onEntering,
          onEntered = _props2.onEntered,
          onExit = _props2.onExit,
          onExiting = _props2.onExiting,
          onExited = _props2.onExited,
          contentRef = _props2.contentRef,
          mountNode = _props2.mountNode,
          defaultFocusElement = _props2.defaultFocusElement,
          liveRegion = _props2.liveRegion,
          onDismiss = _props2.onDismiss,
          onTransition = _props2.onTransition,
          shouldReturnFocus = _props2.shouldReturnFocus,
          shouldCloseOnEscape = _props2.shouldCloseOnEscape,
          shouldCloseOnDocumentClick = _props2.shouldCloseOnDocumentClick,
          shouldContainFocus = _props2.shouldContainFocus,
          props = _objectWithoutProperties(_props2, ['label', 'children', 'render', 'placement', 'open', 'onOpen', 'onClose', 'border', 'shadow', 'onEnter', 'onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited', 'contentRef', 'mountNode', 'defaultFocusElement', 'liveRegion', 'onDismiss', 'onTransition', 'shouldReturnFocus', 'shouldCloseOnEscape', 'shouldCloseOnDocumentClick', 'shouldContainFocus']);

      var shouldOverlayTray = this.context.shouldOverlayTray;
      var portalOpen = this.state.portalOpen;

      var needsPortal = shouldOverlayTray && mountNode;

      var transitionIn = open;

      if (needsPortal && !portalOpen) {
        transitionIn = false;
      }

      var content = _react2.default.createElement(
        _Transition2.default,
        {
          'in': transitionIn,
          type: this.transition,
          onTransition: onTransition,
          onEnter: onEnter,
          onEntering: onEntering,
          onEntered: (0, _createChainedFunction2.default)(this.handleTransitionEntered, onEntered, onOpen),
          onExit: onExit,
          onExiting: onExiting,
          onExited: (0, _createChainedFunction2.default)(this.handleTransitionExited, onExited, onClose),
          unmountOnExit: true
        },
        _react2.default.createElement(
          'div',
          Object.assign({}, (0, _passthroughProps.omitProps)(props, DrawerTray.propTypes), {
            ref: this.handleContentRef,
            className: (0, _classnames3.default)((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles.border, border), _defineProperty(_classnames, styles.shadow, shadow && shouldOverlayTray), _defineProperty(_classnames, styles['placement--' + this.placement], true), _classnames))
          }),
          this.state.transitioning ? this.renderContent() : _react2.default.createElement(
            _Dialog2.default,
            {
              open: true,
              role: shouldOverlayTray ? 'dialog' : 'region',
              label: label,
              shouldReturnFocus: shouldReturnFocus,
              shouldContainFocus: shouldContainFocus && shouldOverlayTray,
              shouldCloseOnDocumentClick: shouldCloseOnDocumentClick && shouldOverlayTray,
              shouldCloseOnEscape: shouldCloseOnEscape && shouldOverlayTray,
              defaultFocusElement: defaultFocusElement,
              liveRegion: liveRegion,
              onDismiss: onDismiss,
              as: 'div'
            },
            this.renderContent()
          )
        )
      );

      if (needsPortal) {
        return _react2.default.createElement(
          _Portal2.default,
          {
            mountNode: mountNode,
            open: true,
            onOpen: this.handlePortalOpen
          },
          content
        );
      } else {
        return content;
      }
    }
  }, {
    key: 'placement',
    get: function get() {
      var placement = this.props.placement;

      return this.rtl ? (0, _mirrorPlacement.mirrorHorizontalPlacement)(placement, ' ') : placement;
    }
  }, {
    key: 'direction',
    get: function get() {
      return this.placement === 'end' ? 'right' : 'left';
    }
  }, {
    key: 'transition',
    get: function get() {
      return 'slide-' + this.direction;
    }
  }]);

  DrawerTray.displayName = 'DrawerTray'
  ;
  return DrawerTray;
}(_react.Component), _class2.propTypes = {
  label: _propTypes2.default.string.isRequired,
  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
  render: _propTypes2.default.func,
  /**
   * Placement of the `<DrawerTray />`
   */
  placement: _propTypes2.default.oneOf(['start', 'end']),

  /**
   * If the tray is open or closed.
   */
  open: _propTypes2.default.bool,

  /**
   * Called when the `<DrawerTray />` is opened
   */
  onOpen: _propTypes2.default.func,
  /**
   * Called when the `<DrawerTray />` is closed
   */
  onClose: _propTypes2.default.func,
  /**
   * Should the `<DrawerTray />` have a border
   */
  border: _propTypes2.default.bool,
  /**
   * Should the `<DrawerTray />` have a shadow
   */
  shadow: _propTypes2.default.bool,
  /**
   * Callback fired when the <DrawerTray /> transitions in/out
   */
  onTransition: _propTypes2.default.func,
  /**
   * Callback fired before the <DrawerTray /> transitions in
   */
  onEnter: _propTypes2.default.func,
  /**
   * Callback fired as the <DrawerTray /> begins to transition in
   */
  onEntering: _propTypes2.default.func,
  /**
   * Callback fired after the <DrawerTray /> finishes transitioning in
   */
  onEntered: _propTypes2.default.func,
  /**
   * Callback fired right before the <DrawerTray /> transitions out
   */
  onExit: _propTypes2.default.func,
  /**
   * Callback fired as the <DrawerTray /> begins to transition out
   */
  onExiting: _propTypes2.default.func,
  /**
   * Callback fired after the <DrawerTray /> finishes transitioning out
   */
  onExited: _propTypes2.default.func,
  /**
   * Ref function for the <DrawerTray /> content
   */
  contentRef: _propTypes2.default.func,
  /**
   * An element or a function returning an element to use as the mount node
   * for the `<DrawerTray />` when tray is overlaying content
   */
  mountNode: _propTypes2.default.oneOfType([_CustomPropTypes2.default.element, _propTypes2.default.func]),
  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<DrawerTray />` is open
   */
  liveRegion: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.element), _propTypes2.default.element, _propTypes2.default.func]),
  onDismiss: _propTypes2.default.func,
  shouldContainFocus: _propTypes2.default.bool,
  shouldReturnFocus: _propTypes2.default.bool,
  shouldCloseOnDocumentClick: _propTypes2.default.bool,
  shouldCloseOnEscape: _propTypes2.default.bool
}, _class2.defaultProps = {
  shouldContainFocus: true,
  shouldCloseOnEscape: true,
  shouldCloseOnDocumentClick: true,
  shouldReturnFocus: true,
  open: false,
  onOpen: function onOpen() {},
  shadow: true,
  border: true,
  placement: 'start',
  mountNode: null,
  onEnter: function onEnter() {},
  onEntering: function onEntering() {},
  onEntered: function onEntered() {},
  onExit: function onExit() {},
  onExiting: function onExiting() {},
  onExited: function onExited() {},
  contentRef: function contentRef(node) {}
}, _class2.contextTypes = {
  shouldOverlayTray: _propTypes2.default.bool
}, _temp2)) || _class) || _class);
exports.default = DrawerTray;