'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2; /*
                     * The MIT License (MIT)
                     *
                     * Copyright (c) 2015 - present Instructure, Inc.
                     *
                     * Permission is hereby granted, free of charge, to any person obtaining a copy
                     * of this software and associated documentation files (the "Software"), to deal
                     * in the Software without restriction, including without limitation the rights
                     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                     * copies of the Software, and to permit persons to whom the Software is
                     * furnished to do so, subject to the following conditions:
                     *
                     * The above copyright notice and this permission notice shall be included in all
                     * copies or substantial portions of the Software.
                     *
                     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                     * SOFTWARE.
                     */

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _findDOMNode = require('@instructure/ui-utils/lib/dom/findDOMNode');

var _findDOMNode2 = _interopRequireDefault(_findDOMNode);

var _deepEqual = require('@instructure/ui-utils/lib/deepEqual');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _getDisplayName = require('@instructure/ui-utils/lib/react/getDisplayName');

var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

var _warning = require('@instructure/ui-utils/lib/warning');

var _warning2 = _interopRequireDefault(_warning);

var _addElementQueryMatchListener = require('../../utils/addElementQueryMatchListener');

var _addElementQueryMatchListener2 = _interopRequireDefault(_addElementQueryMatchListener);

var _addMediaQueryMatchListener = require('../../utils/addMediaQueryMatchListener');

var _addMediaQueryMatchListener2 = _interopRequireDefault(_addMediaQueryMatchListener);

var _LayoutPropTypes = require('../../utils/LayoutPropTypes');

var _LayoutPropTypes2 = _interopRequireDefault(_LayoutPropTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
---
category: components/layout
---
**/
var Responsive = (_temp2 = _class = function (_Component) {
  _inherits(Responsive, _Component);

  function Responsive() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Responsive);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Responsive.__proto__ || Object.getPrototypeOf(Responsive)).call.apply(_ref, [this].concat(args))), _this), _this._matchListener = null, _this.state = {
      matches: []
    }, _this.updateMatches = function (matches, cb) {
      _this.setState({ matches: matches }, function () {
        if (typeof cb === 'function') {
          cb();
        }
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Responsive, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      (0, _warning2.default)(this.props.render || this.props.children, '[' + (0, _getDisplayName2.default)(Responsive) + '] must have either a `render` prop or `children` prop.');
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._matchListener = this.addMatchListener(this.props.query, this.updateMatches);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.removeMatchListener();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _props = this.props,
          match = _props.match,
          query = _props.query;


      if (match !== nextProps.match || !(0, _deepEqual2.default)(query, nextProps.query)) {
        this.removeMatchListener();
        this._matchListener = this.addMatchListener(nextProps.query, this.updateMatches, nextProps.match);
      }
    }
  }, {
    key: 'addMatchListener',
    value: function addMatchListener(query, updateMatches) {
      var match = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props.match;

      var matchListener = match === 'element' ? _addElementQueryMatchListener2.default : _addMediaQueryMatchListener2.default;

      return matchListener(query, (0, _findDOMNode2.default)(this), updateMatches);
    }
  }, {
    key: 'removeMatchListener',
    value: function removeMatchListener() {
      if (this._matchListener) {
        this._matchListener.remove();
      }
    }
  }, {
    key: 'mergeProps',
    value: function mergeProps(matches, props) {
      if (!props) {
        return null;
      }

      var mergedProps = {};

      matches.forEach(function (match) {
        var matchProps = props[match];
        // Iterate over the props for the current match. If that the prop is
        // already in `mergedProps` that means that the prop was defined for
        // multiple breakpoints, and more than one of those breakpoints is being
        // currently applied so we throw a warning.
        Object.keys(matchProps).forEach(function (prop) {
          (0, _warning2.default)(!(prop in mergedProps), '[' + (0, _getDisplayName2.default)(Responsive) + '] The prop `' + prop + '` is defined at 2 or more breakpoints ' + ('which are currently applied at the same time. Its current value, `' + mergedProps[prop] + '`, ') + ('will be overwritten as `' + matchProps[prop] + '`.'));
        });

        mergedProps = Object.assign(mergedProps, matchProps);
      });

      return mergedProps;
    }
  }, {
    key: 'render',
    value: function render() {
      var matches = this.state.matches;
      var _props2 = this.props,
          props = _props2.props,
          render = _props2.render,
          children = _props2.children;

      // Render via the children or render method, whichever is supplied. If
      // both are supplied, give preference to children.

      var renderFunc = children || render;
      return renderFunc(this.mergeProps(matches, props), matches);
    }
  }]);

  Responsive.displayName = 'Responsive'
  ;
  return Responsive;
}(_react.Component), _class.propTypes = {
  /**
   * Specifies if the `<Responsive />` component should use element or media queries
   */
  match: _propTypes2.default.oneOf(['element', 'media']),
  /**
   * Consists of an object where the keys define the names of breakpoints. The values are query objects
   * with keys representing the breakpoint condition and values representing a breakpoint value as a
   * string or number. Ex. `{small: { maxWidth: 400 }, large: { minWidth: '600em'}}`
   */
  query: _propTypes2.default.objectOf(_LayoutPropTypes2.default.validQuery).isRequired,
  /**
   * Consists of an object where the keys match the breakpoint names used in the query. The values
   * are objects with keys representing prop names and values representing prop values Ex.
   * `{small: { myProp: 'fillscreen' }, large: { myProp: 'fillcontainer' }}`
   */
  props: _propTypes2.default.objectOf(_propTypes2.default.object),
  /**
   * Function called on render with the following form `(props, matches) => {...}` where the props
   * are the current props to be applied and matches is an array of current matches from the query
   * prop. Either this or a `children` prop function must be supplied.
   */
  render: _propTypes2.default.func,
  /**
   * Function that takes the same form and arguments as the render prop. Either this or a `render`
   * prop function must be supplied.
   */
  children: _propTypes2.default.func
}, _class.defaultProps = {
  match: 'element',
  props: null
}, _temp2);
exports.default = Responsive;