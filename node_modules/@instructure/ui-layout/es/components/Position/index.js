var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _class2, _temp2, _dec, _class3, _class4, _temp3;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import themeable from '@instructure/ui-themeable';
import ComponentIdentifier, { pick } from '@instructure/ui-utils/lib/react/ComponentIdentifier';
import safeCloneElement from '@instructure/ui-utils/lib/react/safeCloneElement';
import addPositionChangeListener from '@instructure/ui-utils/lib/dom/addPositionChangeListener';
import shallowEqual from '@instructure/ui-utils/lib/shallowEqual';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import debounce from '@instructure/ui-utils/lib/debounce';
import deepEqual from '@instructure/ui-utils/lib/deepEqual';

import Portal from '@instructure/ui-portal/lib/components/Portal';

import calculateElementPosition from '../../utils/calculateElementPosition';
import LayoutPropTypes from '../../utils/LayoutPropTypes';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n._3JqNuAx {\n  z-index: ' + theme.zIndex + ';\n  box-sizing: border-box;\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': '_3JqNuAx'
};

import theme from './theme';

var PositionTarget = (_temp = _class = function (_ComponentIdentifier) {
  _inherits(PositionTarget, _ComponentIdentifier);

  function PositionTarget() {
    _classCallCheck(this, PositionTarget);

    return _possibleConstructorReturn(this, (PositionTarget.__proto__ || Object.getPrototypeOf(PositionTarget)).apply(this, arguments));
  }

  return PositionTarget;
}(ComponentIdentifier), _class.displayName = 'PositionTarget', _temp);
var PositionContent = (_temp2 = _class2 = function (_ComponentIdentifier2) {
  _inherits(PositionContent, _ComponentIdentifier2);

  function PositionContent() {
    _classCallCheck(this, PositionContent);

    return _possibleConstructorReturn(this, (PositionContent.__proto__ || Object.getPrototypeOf(PositionContent)).apply(this, arguments));
  }

  return PositionContent;
}(ComponentIdentifier), _class2.displayName = 'PositionContent', _class2.propTypes = {
  children: PropTypes.node,
  placement: LayoutPropTypes.placement
}, _temp2);

/**
---
category: components/utilities
---
**/

var Position = (_dec = themeable(theme, styles), _dec(_class3 = (_temp3 = _class4 = function (_Component) {
  _inherits(Position, _Component);

  function Position(props) {
    _classCallCheck(this, Position);

    var _this3 = _possibleConstructorReturn(this, (Position.__proto__ || Object.getPrototypeOf(Position)).call(this, props));

    _this3._timeouts = [];

    _this3.handlePortalOpen = function () {
      _this3.position();

      if (_this3.props.trackPosition) {
        _this3.startTracking();
      }

      _this3._timeouts.push(setTimeout(function () {
        if (_this3.state.positioned && typeof _this3.props.onPositioned === 'function') {
          _this3.props.onPositioned({
            top: _this3.state.style.top,
            left: _this3.state.style.left,
            placement: _this3.state.placement
          });
        }
      }, 0));
    };

    _this3.position = function () {
      _this3.setState(Object.assign({
        positioned: true
      }, _this3.calculatePosition(_this3.props)));
    };

    _this3.state = Object.assign({
      positioned: false
    }, _this3.calculatePosition(props));

    _this3.position = debounce(_this3.position, 0, { leading: false, trailing: true });
    return _this3;
  }

  _createClass(Position, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
      return !deepEqual(this.state, nextState) || !shallowEqual(this.props, nextProps) || !shallowEqual(this.context, nextContext);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      this.position();

      if (this.props.trackPosition !== prevProps.trackPosition) {
        this.props.trackPosition ? this.startTracking() : this.stopTracking();
      }

      var _state = this.state,
          style = _state.style,
          placement = _state.placement;


      if (style && prevState.style && (placement !== prevState.placement || style.top !== prevState.style.top || style.left !== prevState.style.left)) {
        this.props.onPositionChanged({
          top: style.top,
          left: style.left,
          placement: placement
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.position.cancel();
      this.stopTracking();
      this._timeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: 'calculatePosition',
    value: function calculatePosition(props) {
      return calculateElementPosition(this._content, this._target, {
        placement: props.placement,
        offsetX: props.offsetX,
        offsetY: props.offsetY,
        constrain: props.constrain,
        container: props.mountNode,
        over: props.over
      });
    }
  }, {
    key: 'startTracking',
    value: function startTracking() {
      this._listener = this._listener || addPositionChangeListener(this._target, this.position);
    }
  }, {
    key: 'stopTracking',
    value: function stopTracking() {
      if (this._listener) {
        this._listener.remove();
        this._listener = null;
      }
    }
  }, {
    key: 'renderContent',
    value: function renderContent() {
      var _this4 = this;

      var content = pick(Position.Content, this.props.children);

      if (content && React.Children.count(content.props.children) > 0) {
        var _classnames;

        content = safeCloneElement(content, {
          ref: function ref(el) {
            _this4._content = el;
          },
          style: Object.assign({}, content.props.style, this.state.style),
          className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, content.props.className, content.props.className), _classnames))
        });

        content = React.createElement(
          Portal,
          { open: true, onOpen: this.handlePortalOpen, mountNode: this.props.mountNode, insertAt: this.props.insertAt },
          content
        );
      }

      return content;
    }
  }, {
    key: 'renderTarget',
    value: function renderTarget() {
      var _this5 = this;

      var target = pick(Position.Target, this.props.children);
      if (target) {
        target = safeCloneElement(target, {
          ref: function ref(el) {
            _this5._target = el;
          }
        });
      } else if (this.props.target) {
        this._target = this.props.target;
      }

      return target;
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        'span',
        null,
        this.renderTarget(),
        this.renderContent()
      );
    }
  }]);

  Position.displayName = 'Position'
  ;
  return Position;
}(Component), _class4.Target = PositionTarget, _class4.Content = PositionContent, _class4.propTypes = {
  /**
   * The children to be rendered within the `<Position />`
   */
  children: PropTypes.node,

  /**
   * The target to be used when not using `<PositionTarget />`
   */
  target: PropTypes.oneOfType([CustomPropTypes.element, PropTypes.func]),

  /**
   * Whether or not you want the content to position over the `<PositionTarget />`
   */
  over: PropTypes.bool,

  /**
   * The placement of the content in relation to the trigger
   */
  placement: LayoutPropTypes.placement,

  /**
   * The horizontal offset for the positioned content
   */
  offsetX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * The vertical offset for the positioned content
   */
  offsetY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
   * Callback fired when the position changes
   */
  onPositionChanged: PropTypes.func,

  /**
   * Callback fired when `<Position />` content has been mounted and is initially positioned
   */
  onPositioned: PropTypes.func,

  /**
   * Whether or not position of the target should be tracked or just set statically on render
   */
  trackPosition: PropTypes.bool,

  /**
   * An element or a function returning an element to use as the mount node
   * for the `<Position />` (defaults to `document.body`)
   */
  mountNode: PropTypes.oneOfType([CustomPropTypes.element, PropTypes.func]),

  /**
   * Insert the element at the 'top' of the mountNode or at the 'bottom'
   */
  insertAt: PropTypes.oneOf(['bottom', 'top']),

  constrain: PropTypes.oneOf(['window', 'scroll-parent', 'parent', 'none'])
}, _class4.defaultProps = {
  trackPosition: true,
  placement: 'bottom center',
  offsetX: 0,
  offsetY: 0,
  mountNode: null,
  target: null,
  insertAt: 'bottom',
  over: false,
  onPositioned: function onPositioned(position) {},
  onPositionChanged: function onPositionChanged(position) {},
  constrain: 'window'
}, _temp3)) || _class3);


export default Position;
export { PositionTarget, PositionContent };