var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _dec3, _class, _class2, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import classnames from 'classnames';

import themeable from '@instructure/ui-themeable';
import getShorthandPropValue from '@instructure/ui-themeable/lib/utils/getShorthandPropValue';
import ThemeablePropTypes from '@instructure/ui-themeable/lib/utils/ThemeablePropTypes';
import { mirrorShorthandEdges, mirrorShorthandCorners } from '@instructure/ui-themeable/lib/utils/mirrorShorthand';
import bidirectional, { DIRECTION } from '@instructure/ui-i18n/lib/bidirectional';

import warning from '@instructure/ui-utils/lib/warning';
import CustomPropTypes from '@instructure/ui-utils/lib/react/CustomPropTypes';
import deprecated from '@instructure/ui-utils/lib/react/deprecated';
import getDisplayName from '@instructure/ui-utils/lib/react/getDisplayName';
import getElementType from '@instructure/ui-utils/lib/react/getElementType';
import { omitProps, pickProps } from '@instructure/ui-utils/lib/react/passthroughProps';

var styles = {
  template: function template(theme) {
    var tmpl = function tmpl() {
      return '/*  imported from styles.css  */\n\n.Qk3pbeC {\n  box-sizing: border-box;\n  font-family: ' + theme.fontFamily + ';\n}\n\n._3h9wKo0 {\n  display: block;\n}\n\n._2pP0aF7 {\n  display: inline-block;\n  vertical-align: middle;\n}\n\n._2h685H6 {\n  display: flex;\n}\n\n._2TxwXla {\n  display: inline-flex;\n  vertical-align: middle;\n}\n\n._1bCRQar {\n  text-align: start;\n}\n\n[dir="ltr"] ._1bCRQar {\n  text-align: left;\n}\n\n[dir="rtl"] ._1bCRQar {\n  text-align: right;\n}\n\n.qptcdqS {\n  text-align: center;\n}\n\n[dir="ltr"] .qptcdqS {\n  text-align: center;\n}\n\n[dir="rtl"] .qptcdqS {\n  text-align: center;\n}\n\n._2Dpl211 {\n  text-align: end;\n}\n\n[dir="ltr"] ._2Dpl211 {\n  text-align: right;\n}\n\n[dir="rtl"] ._2Dpl211 {\n  text-align: left;\n}\n\n._2_f1B5a {\n  outline: 0.0625rem dashed ' + theme.debugOutlineColor + ';\n}\n\n._5hIwkDP {\n  border-style: ' + theme.borderStyle + ';\n  border-color: ' + theme.borderColor + ';\n}\n\n._5hIwkDP.TJj0oxH {\n    border-color: ' + theme.borderColorInverse + ';\n  }\n\n.tHHiw2Q {\n  color: ' + theme.color + ';\n  background: ' + theme.background + ';\n}\n\n.TJj0oxH {\n  color: ' + theme.colorInverse + ';\n  background: ' + theme.backgroundInverse + ';\n}\n\n._1GrtubW {\n  max-width: ' + theme.xSmallMaxWidth + ';\n}\n\n._20YQF3a {\n  max-width: ' + theme.smallMaxWidth + ';\n}\n\n._2cMq0dV {\n  max-width: ' + theme.mediumMaxWidth + ';\n}\n\n._1RA2RJh {\n  max-width: ' + theme.largeMaxWidth + ';\n}\n\n._3uGX0Y4 {\n  max-width: 100vw;\n}\n\n._2jdv_Bv {\n  z-index: ' + theme.stackingTopmost + ';\n}\n\n._1usWDB3 {\n  z-index: ' + theme.stackingAbove + ';\n}\n\n._3-iKSxr {}\n\n._1JqvPwg {\n  z-index: ' + theme.stackingBelow + ';\n}\n\n._3Ul1Ljz {\n  z-index: ' + theme.stackingDeepest + ';\n}\n\n.xeqWbcc {\n  box-shadow: ' + theme.shadowTopmost + ';\n}\n\n.VVbUAIi {\n  box-shadow: ' + theme.shadowResting + ';\n}\n\n._3CQUMcA {\n  box-shadow: ' + theme.shadowAbove + ';\n}\n';
    };

    return tmpl.call(theme, theme);
  },
  'root': 'Qk3pbeC',
  'display--block': '_3h9wKo0',
  'display--inline-block': '_2pP0aF7',
  'display--flex': '_2h685H6',
  'display--inline-flex': '_2TxwXla',
  'textAlign--start': '_1bCRQar',
  'textAlign--center': 'qptcdqS',
  'textAlign--end': '_2Dpl211',
  'debug': '_2_f1B5a',
  'border': '_5hIwkDP',
  'background--inverse': 'TJj0oxH',
  'background--default': 'tHHiw2Q',
  'size--x-small': '_1GrtubW',
  'size--small': '_20YQF3a',
  'size--medium': '_2cMq0dV',
  'size--large': '_1RA2RJh',
  'size--fullscreen': '_3uGX0Y4',
  'stacking--topmost': '_2jdv_Bv',
  'stacking--above': '_1usWDB3',
  'stacking--resting': '_3-iKSxr',
  'stacking--below': '_1JqvPwg',
  'stacking--deepest': '_3Ul1Ljz',
  'shadow--topmost': 'xeqWbcc',
  'shadow--resting': 'VVbUAIi',
  'shadow--above': '_3CQUMcA'
};

import theme from './theme';

/**
---
category: components/layout
---
**/
var View = (_dec = deprecated('5.4.0', {
  size: 'maxWidth'
}), _dec2 = bidirectional(), _dec3 = themeable(theme, styles), _dec(_class = _dec2(_class = _dec3(_class = (_temp = _class2 = function (_Component) {
  _inherits(View, _Component);

  function View(props) {
    _classCallCheck(this, View);

    var _this = _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this, props));

    _this.handleElementRef = function (el) {
      if (typeof _this.props.elementRef === 'function') {
        _this.props.elementRef(el);
      }
      _this._element = el;
    };

    _this.verifySpanMargin(props);
    _this._element = null;
    return _this;
  }

  _createClass(View, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.verifySpanMargin(nextProps);
    }
  }, {
    key: 'verifySpanMargin',
    value: function verifySpanMargin(props) {
      var as = props.as,
          display = props.display,
          margin = props.margin;


      warning(!((as === 'span' || typeof as === 'undefined') && display === 'auto' && margin && margin !== 'none' && margin !== '0'), '[' + this.displayName + '] element of type \'span\' and display \'auto\' is inline ' + 'and will allow for horizontal margins only');
    }
  }, {
    key: 'render',
    value: function render() {
      var _classnames;

      var _props = this.props,
          children = _props.children,
          textAlign = _props.textAlign,
          background = _props.background,
          display = _props.display,
          debug = _props.debug,
          width = _props.width,
          height = _props.height,
          minWidth = _props.minWidth,
          minHeight = _props.minHeight,
          maxWidth = _props.maxWidth,
          maxHeight = _props.maxHeight,
          stacking = _props.stacking,
          shadow = _props.shadow,
          size = _props.size,
          className = _props.className;


      var ElementType = getElementType(View, this.props);

      return React.createElement(
        ElementType,
        Object.assign({}, omitProps(this.props, View.propTypes), {
          className: classnames((_classnames = {}, _defineProperty(_classnames, styles.root, true), _defineProperty(_classnames, styles.border, this.hasBorder), _defineProperty(_classnames, styles.debug, debug), _defineProperty(_classnames, styles['textAlign--' + textAlign], textAlign), _defineProperty(_classnames, styles['background--' + background], background), _defineProperty(_classnames, styles['display--' + display], display && display !== 'auto'), _defineProperty(_classnames, styles['size--' + size], size && size !== 'auto'), _defineProperty(_classnames, styles['stacking--' + stacking], stacking), _defineProperty(_classnames, styles['shadow--' + shadow], shadow), _defineProperty(_classnames, className, className), _classnames)),
          style: Object.assign({}, this.spacingStyle, this.borderStyle, {
            width: width,
            height: height,
            minWidth: minWidth,
            minHeight: minHeight,
            maxWidth: maxWidth,
            maxHeight: maxHeight
          }, this.styleProps),
          ref: this.handleElementRef
        }),
        children
      );
    }
  }, {
    key: 'displayName',
    get: function get() {
      return getDisplayName(View);
    }
  }, {
    key: 'hasBorder',
    get: function get() {
      var borderWidth = this.props.borderWidth;

      return borderWidth && borderWidth !== '0' && borderWidth !== 'none';
    }
  }, {
    key: 'borderStyle',
    get: function get() {
      var _props2 = this.props,
          borderRadius = _props2.borderRadius,
          borderWidth = _props2.borderWidth;


      if (this.dir === DIRECTION.rtl) {
        borderRadius = mirrorShorthandCorners(borderRadius);
        borderWidth = mirrorShorthandEdges(borderWidth);
      }

      return {
        borderRadius: getShorthandPropValue(this.displayName, this.theme, borderRadius, 'borderRadius'),
        borderWidth: getShorthandPropValue(this.displayName, this.theme, borderWidth, 'borderWidth')
      };
    }
  }, {
    key: 'spacingStyle',
    get: function get() {
      var _props3 = this.props,
          margin = _props3.margin,
          padding = _props3.padding;


      if (this.dir === 'rtl') {
        margin = mirrorShorthandEdges(margin);
        padding = mirrorShorthandEdges(padding);
      }

      return {
        margin: getShorthandPropValue(this.displayName, this.theme, margin, 'margin'),
        padding: getShorthandPropValue(this.displayName, this.theme, padding, 'padding')
      };
    }
  }, {
    key: 'styleProps',
    get: function get() {
      var style = this.props.style; // eslint-disable-line react/prop-types

      return pickProps(style, {}, [
      // Position/calculateElementPosition:
      'top', 'left', 'position', 'display', 'transform', 'overflow', 'minWidth', 'minHeight',
      // Img:
      'filter',
      // FlexItem:
      'flexBasis',
      // Avatar:
      'backgroundImage']);
    }
  }]);

  View.displayName = 'View'
  ;
  return View;
}(Component), _class2.propTypes = {
  /**
  * The element to render as the component root, `span` by default
  */
  as: CustomPropTypes.elementType,

  /**
  * provides a reference to the underlying html element
  */
  elementRef: PropTypes.func,

  /**
  * By default the display prop is 'auto', meaning it takes on the
  * display rules of the html element it's rendered as (see `as` prop).
  */
  display: PropTypes.oneOf(['auto', 'block', 'inline-block', 'flex', 'inline-flex']),

  /**
  * Set the margin using familiar CSS shorthand
  */
  margin: ThemeablePropTypes.spacing,

  /**
  * Set the padding using familiar CSS shorthand
  */
  padding: ThemeablePropTypes.spacing,

  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  maxWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  minWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /**
  * The children to render inside the `<View />`
  */
  children: PropTypes.node,

  /**
  * Designates the text alignment within the `<View />`
  */
  textAlign: PropTypes.oneOf(['start', 'center', 'end']),

  /**
  * Accepts the familiar CSS shorthand to designate border widths corresponding
  * to edges
  */
  borderWidth: ThemeablePropTypes.borderWidth,

  /**
  * Accepts the familiar CSS shorthand to designate border radii corresponding
  * to corners
  */
  borderRadius: ThemeablePropTypes.borderWidth,

  /**
  * Designates the background style of the `<View />`
  */
  background: PropTypes.oneOf(['default', 'inverse', 'transparent']),

  /**
  * Controls the shadow depth for the `<View />`
  */
  shadow: ThemeablePropTypes.shadow,

  /**
  * Controls the z-index depth for the `<View />`
  */
  stacking: ThemeablePropTypes.stacking,

  /**
  * Activate a dotted outline around the component to make building your
  * layout easier
  */
  debug: PropTypes.bool
}, _class2.defaultProps = {
  display: 'auto'
  // Note:
  // - `as` will default to type span via getElementType, so for consistency and
  // compatibility with Container we are leaving it undefined here. Otherwise
  // it modifies behavior for consuming components because of the logic around
  // default props in getElementType
  // - `textAlign` is undefined by default so that View can inherit text alignment
  // from parents
  // - Any props used to set inline styles should be undefined so that they
  // don't break consuming components' CSS
}, _temp)) || _class) || _class) || _class);


export default View;