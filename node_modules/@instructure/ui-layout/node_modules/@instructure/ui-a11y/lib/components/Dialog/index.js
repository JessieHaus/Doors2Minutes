'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp2; /*
                                    * The MIT License (MIT)
                                    *
                                    * Copyright (c) 2015 - present Instructure, Inc.
                                    *
                                    * Permission is hereby granted, free of charge, to any person obtaining a copy
                                    * of this software and associated documentation files (the "Software"), to deal
                                    * in the Software without restriction, including without limitation the rights
                                    * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                                    * copies of the Software, and to permit persons to whom the Software is
                                    * furnished to do so, subject to the following conditions:
                                    *
                                    * The above copyright notice and this permission notice shall be included in all
                                    * copies or substantial portions of the Software.
                                    *
                                    * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                                    * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                                    * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                                    * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                                    * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                                    * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                                    * SOFTWARE.
                                    */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _passthroughProps = require('@instructure/ui-utils/lib/react/passthroughProps');

var _findDOMNode = require('@instructure/ui-utils/lib/dom/findDOMNode');

var _findDOMNode2 = _interopRequireDefault(_findDOMNode);

var _deprecated = require('@instructure/ui-utils/lib/react/deprecated');

var _deprecated2 = _interopRequireDefault(_deprecated);

var _warning = require('@instructure/ui-utils/lib/warning');

var _warning2 = _interopRequireDefault(_warning);

var _requestAnimationFrame = require('@instructure/ui-utils/lib/dom/requestAnimationFrame');

var _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);

var _getElementType = require('@instructure/ui-utils/lib/react/getElementType');

var _getElementType2 = _interopRequireDefault(_getElementType);

var _CustomPropTypes = require('@instructure/ui-utils/lib/react/CustomPropTypes');

var _CustomPropTypes2 = _interopRequireDefault(_CustomPropTypes);

var _FocusRegionManager = require('../../utils/FocusRegionManager');

var _FocusRegionManager2 = _interopRequireDefault(_FocusRegionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
---
category: components/utilities
---
**/

var Dialog = (_dec = (0, _deprecated2.default)('5.0.0', {
  applicationElement: true
}, 'Elements outside of the `<Dialog />` are now hidden from screen readers by default. ' + 'Use the `ignore` prop to specify any elements that should not be hidden'), _dec(_class = (_temp2 = _class2 = function (_Component) {
  _inherits(Dialog, _Component);

  function Dialog() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Dialog);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Dialog.__proto__ || Object.getPrototypeOf(Dialog)).call.apply(_ref, [this].concat(args))), _this), _this._raf = [], _this._focusRegion = null, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Dialog, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.open) {
        this.focus();
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _props = this.props,
          open = _props.open,
          shouldContainFocus = _props.shouldContainFocus;


      if (open && !prevProps.open || open && shouldContainFocus && !prevProps.shouldContainFocus) {
        this.focus();
      } else if (!open && prevProps.open || !open && !shouldContainFocus && prevProps.shouldContainFocus) {
        this.blur();
      }

      if (this._focusRegion) {
        this._focusRegion.updateElement(this.contentElement);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.props.open) {
        this.blur();
      }

      this._raf.forEach(function (request) {
        return request.cancel();
      });
      this._raf = [];
    }
  }, {
    key: 'focus',
    value: function focus() {
      var _this2 = this;

      var _props2 = this.props,
          open = _props2.open,
          contentElement = _props2.contentElement,
          options = _objectWithoutProperties(_props2, ['open', 'contentElement']);

      if (!open || !this.contentElement) {
        (0, _warning2.default)(false, '[Dialog] Can\'t focus a Dialog that isn\'t open.');
      }

      this._raf.push((0, _requestAnimationFrame2.default)(function () {
        _this2._focusRegion = _FocusRegionManager2.default.focusRegion(_this2.contentElement, Object.assign({}, options));
      }));
    }
  }, {
    key: 'blur',
    value: function blur() {
      if (this._focusRegion) {
        _FocusRegionManager2.default.blurRegion(this.contentElement, this._focusRegion.id);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var ElementType = (0, _getElementType2.default)(Dialog, this.props);
      return this.props.open ? _react2.default.createElement(
        ElementType,
        Object.assign({}, (0, _passthroughProps.omitProps)(this.props, Dialog.propTypes), {
          ref: function ref(el) {
            _this3._root = el;
          },
          role: this.props.label ? 'dialog' : null,
          'aria-label': this.props.label,
          className: this.props.className // eslint-disable-line react/prop-types
        }),
        this.props.children
      ) : null;
    }
  }, {
    key: 'contentElement',
    get: function get() {
      var contentElement = (0, _findDOMNode2.default)(this.props.contentElement);

      if (!contentElement) {
        contentElement = (0, _findDOMNode2.default)(this._root);
      }

      return contentElement;
    }
  }, {
    key: 'focused',
    get: function get() {
      return this.contentElement && this._focusRegion && _FocusRegionManager2.default.isFocused(this.contentElement, this._focusRegion.id);
    }
  }]);

  Dialog.displayName = 'Dialog'
  ;
  return Dialog;
}(_react.Component), _class2.propTypes = {
  /**
   * The children to be rendered within the `<Dialog />`
   */
  children: _propTypes2.default.node,

  /**
  * The element to render as the component root, `span` by default
  */
  as: _CustomPropTypes2.default.elementType,

  display: _propTypes2.default.oneOf(['auto', 'block', 'inline-block']),

  label: _propTypes2.default.string,

  /**
   * Whether or not the `<Dialog />` is open
   */
  open: _propTypes2.default.bool,

  /**
   * Function called when tab focus leaves the `<Dialog />` focusable content. This only
   * occurs when `shouldContainFocus` is set to false.
   */
  onBlur: _propTypes2.default.func,

  onDismiss: _propTypes2.default.func,

  /**
   * An element or a function returning an element to focus by default
   */
  defaultFocusElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),

  /**
   * An element or a function returning an element that wraps the content of the `<Dialog />`
   */
  contentElement: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.func]),

  /**
   * An element, function returning an element, or array of elements that will not be hidden from
   * the screen reader when the `<Dialog />` is open
   */
  liveRegion: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.element), _propTypes2.default.element, _propTypes2.default.func]),
  shouldContainFocus: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.oneOf(['keyboard', 'screenreader'])]),
  shouldReturnFocus: _propTypes2.default.bool,
  shouldCloseOnDocumentClick: _propTypes2.default.bool,
  shouldCloseOnEscape: _propTypes2.default.bool
}, _class2.defaultProps = {
  open: false,
  shouldContainFocus: false,
  shouldReturnFocus: false,
  shouldCloseOnDocumentClick: true,
  shouldCloseOnEscape: true,
  defaultFocusElement: null,
  contentElement: null,
  liveRegion: null,
  onBlur: function onBlur(event) {},
  onDismiss: function onDismiss(event) {}
}, _temp2)) || _class);
exports.default = Dialog;