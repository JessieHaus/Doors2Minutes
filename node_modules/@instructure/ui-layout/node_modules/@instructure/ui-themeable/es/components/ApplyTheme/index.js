var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import { Component } from 'react';
import PropTypes from 'prop-types';

import mergeDeep from '@instructure/ui-utils/lib/mergeDeep';
import warning from '@instructure/ui-utils/lib/warning';
import ensureSingleChild from '@instructure/ui-utils/lib/react/ensureSingleChild';

import { ThemeContextTypes, makeThemeContext, getThemeContext } from '../../ThemeContextTypes';
import themeable from '../../themeable';

/**
---
category: components/utilities
---
**/
var ApplyTheme = (_temp = _class = function (_Component) {
  _inherits(ApplyTheme, _Component);

  function ApplyTheme() {
    _classCallCheck(this, ApplyTheme);

    return _possibleConstructorReturn(this, (ApplyTheme.__proto__ || Object.getPrototypeOf(ApplyTheme)).apply(this, arguments));
  }

  _createClass(ApplyTheme, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var theme = this.props.theme || {};

      var parentThemeContext = getThemeContext(this.context) || {};

      if (parentThemeContext.immutable && parentThemeContext.theme) {
        warning(!this.props.theme, '[ApplyTheme] Parent theme is immutable. Cannot apply theme: %O', this.props.theme);
        theme = parentThemeContext.theme;
      } else if (parentThemeContext.theme) {
        theme = mergeDeep(parentThemeContext.theme, theme);
      }

      return makeThemeContext(theme, parentThemeContext.immutable || this.props.immutable);
    }
  }, {
    key: 'render',
    value: function render() {
      return ensureSingleChild(this.props.children);
    }
  }]);

  ApplyTheme.displayName = 'ApplyTheme'
  ;
  return ApplyTheme;
}(Component), _class.propTypes = {
  /**
  * set theme variables to override the defaults
  */
  theme: PropTypes.object,
  /**
  * accepts only one child (children must be wrapped in a single component/element)
  */
  children: PropTypes.node,
  /**
  * Prevent overriding this theme via a child ApplyTheme component or theme props
  */
  immutable: PropTypes.bool
}, _class.defaultProps = {
  immutable: false
}, _class.childContextTypes = ThemeContextTypes, _class.contextTypes = ThemeContextTypes, _class.generateTheme = themeable.generateTheme, _temp);
export { ApplyTheme as default };