var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import matchComponentTypes from './matchComponentTypes';
import ensureSingleChild from './ensureSingleChild';

/**
---
category: utilities/react
---
Abstract component identifier. Helpful for picking out a specific child.

  ```js
  class App extends Component {
    render () {
      const title = pick(Title, this.props.children)
      const content = pick(Content, this.props.children)

      return (
        <div>
          {title}
          <ContextBox>
            {content}
          </ContextBox>
         </div>
     )
    }
  }

  class Title extends ComponentIdentifier { static displayName = "Title" }
  class Content extends ComponentIdentifier { static displayName = "Content" }

  ReactDOM.render(
    <App>
      <Title><h2>Hello World!</h2></Title>
      <Content><div>This text gets decorated within `App`.</div></Content>
    </App>,
    document.getElementById('container')
  )
  ```
**/

var ComponentIdentifier = (_temp = _class = function (_Component) {
  _inherits(ComponentIdentifier, _Component);

  function ComponentIdentifier() {
    _classCallCheck(this, ComponentIdentifier);

    return _possibleConstructorReturn(this, (ComponentIdentifier.__proto__ || Object.getPrototypeOf(ComponentIdentifier)).apply(this, arguments));
  }

  _createClass(ComponentIdentifier, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          props = _objectWithoutProperties(_props, ['children']);

      return ensureSingleChild(children, props);
    }
  }]);

  ComponentIdentifier.displayName = 'ComponentIdentifier'
  ;
  return ComponentIdentifier;
}(Component), _class.propTypes = {
  /**
   * The children to be rendered
   */
  children: PropTypes.node
}, _temp);

/**
 * ---
 * category: utilities/react
 * ---
 *
 * Pick a specific child component from a component's children
 *
 * @param {Component} component The component to look for
 * @param {Array} children The child components to look through
 * @return {Component} The matching component if found, otherwise undefined
 */

export { ComponentIdentifier as default };
export function pick(component, children) {
  var result = void 0;

  React.Children.forEach(children, function (child) {
    if (matchComponentTypes(child, [component])) {
      result = child;
    }
  });

  return result;
}