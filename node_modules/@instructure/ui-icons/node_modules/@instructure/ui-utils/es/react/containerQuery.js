var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import PropTypes from 'prop-types';

import addResizeListener from '../dom/addResizeListener';
import debounce from '../debounce';
import { warnDeprecatedComponent } from '../react/deprecated';
import findDOMNode from '../dom/findDOMNode';
import getDisplayName from '../react/getDisplayName';
import px from '../px';

/**
 * ---
 * category: utilities/react
 * ---
 *
 * NOTE: As of 5.0.0, containerQuery has been deprecated. Use the [Responsive](#Responsive)
 * component instead.
 *
 * A decorator or higher order component to provide the ability to style a
 * React component with container queries.
 *
 * The containerQuery HOC provides a `size` getter so that you can alter the behavior
 * of the component based on the size of its container.
 *
 * The `size` will be updated whenever the dimensions of the container change,
 * and will be passed as a parameter to the onSizeChange prop provided.
 *
 * So that CSS rules can be applied based on the dimensions of the container,
 * custom data attributes are added to the container DOM element.
 *
 * @param {Object} query
 * @returns {Function} a function that creates an element with containerQuery behavior
 */
export default function containerQuery(query) {
  var getSelectorMap = function getSelectorMap(el) {
    return query && parseQuery(query, el);
  };

  return function (ComposedComponent) {
    var _class, _temp2;

    return _temp2 = _class = function (_ComposedComponent) {
      _inherits(_class, _ComposedComponent);

      function _class() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, _class);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.updateAttributes = function (size) {
          if (_this._size && _this._size.width === size.width && _this._size.height === size.height) {
            return;
          }

          _this._size = size;

          if (typeof _this.props.onSizeChange === 'function') {
            _this.props.onSizeChange(size);
          }

          var container = findDOMNode(_this);

          if (typeof getSelectorMap(container) !== 'function') {
            return;
          }
          var selectorMap = getSelectorMap(container)(size);

          // eslint-disable-next-line no-restricted-syntax
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = toPairs(selectorMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _ref2 = _step.value;

              var _ref3 = _slicedToArray(_ref2, 2);

              var selectorName = _ref3[0];
              var isOn = _ref3[1];

              if (isOn) {
                container.setAttribute('data-' + selectorName, '');
              } else {
                container.removeAttribute('data-' + selectorName);
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(_class, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          warnDeprecatedComponent('5.0.0', 'containerQuery', 'Use the `Responsive` component instead');

          var node = findDOMNode(this);

          var size = {
            width: node.offsetWidth,
            height: node.offsetHeight
          };

          this._debounced = debounce(this.updateAttributes, 100, { leading: false, trailing: true });
          this._resizeListener = addResizeListener(node, this._debounced);

          this.updateAttributes(size);

          if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentDidMount', this)) {
            _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentDidMount', this).call(this);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (this._resizeListener) {
            this._resizeListener.remove();
          }

          if (this._debounced) {
            this._debounced.cancel();
          }

          if (_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillUnmount', this)) {
            _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillUnmount', this).call(this);
          }
        }
      }, {
        key: 'size',
        get: function get() {
          return this._size;
        }
      }]);

      return _class;
    }(ComposedComponent), _class.displayName = getDisplayName(ComposedComponent), _class.getSelectorMap = getSelectorMap, _class.propTypes = Object.assign({}, ComposedComponent.propTypes, {
      onSizeChange: PropTypes.func
    }), _temp2;
  };
}

function toPairs(obj) {
  return Object.keys(obj).map(function (key) {
    return [key, obj[key]];
  });
}

function parseQuery(query, el) {
  var rules = [];

  Object.keys(query).forEach(function (selectorName) {
    var _query$selectorName = query[selectorName],
        minWidth = _query$selectorName.minWidth,
        maxWidth = _query$selectorName.maxWidth,
        minHeight = _query$selectorName.minHeight,
        maxHeight = _query$selectorName.maxHeight;

    rules.push([selectorName, {
      minWidth: px(minWidth, el) || 0,
      maxWidth: px(maxWidth, el) || Infinity,
      minHeight: px(minHeight, el) || 0,
      maxHeight: px(maxHeight, el) || Infinity
    }]);
  });

  return function (_ref4) {
    var width = _ref4.width,
        height = _ref4.height;

    var selectorMap = {};

    rules.forEach(function (rule) {
      var _rule = _slicedToArray(rule, 2),
          selectorName = _rule[0],
          _rule$ = _rule[1],
          minWidth = _rule$.minWidth,
          maxWidth = _rule$.maxWidth,
          minHeight = _rule$.minHeight,
          maxHeight = _rule$.maxHeight;

      selectorMap[selectorName] = minWidth <= width && width <= maxWidth && minHeight <= height && height <= maxHeight;
    });

    return selectorMap;
  };
}