var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import SVGIcon from '@instructure/ui-svg-images/lib/components/SVGIcon';

var IconMoveRight = (_temp = _class = function (_Component) {
  _inherits(IconMoveRight, _Component);

  function IconMoveRight() {
    _classCallCheck(this, IconMoveRight);

    return _possibleConstructorReturn(this, (IconMoveRight.__proto__ || Object.getPrototypeOf(IconMoveRight)).apply(this, arguments));
  }

  _createClass(IconMoveRight, [{
    key: 'render',
    value: function render() {

      if (process.env.NODE_ENV !== 'production') {
        console.warn('<IconMoveRight /> is deprecated. Please use <IconMoveEnd /> instead.');
      }

      return React.createElement(
        SVGIcon,
        Object.assign({}, this.props, {
          name: 'IconMoveRight',
          viewBox: '0 0 1920 1920',

          bidirectional: true

        }),
        React.createElement('path', { d: 'M1677.525 960.344l-610.694-610.58-80.642 80.643 473.02 473.02H0v113.948h1459.208l-473.02 473.02 80.643 80.642 610.694-610.693zM1920 1644.756V276h-114.063v1368.756H1920z', fillRule: 'evenodd', stroke: 'none', strokeWidth: '1' })
      );
    }
  }]);

  IconMoveRight.displayName = 'IconMoveRight'
  ;
  return IconMoveRight;
}(Component), _class.glyphName = 'move-right', _class.variant = 'Line', _class.deprecated = true, _class.propTypes = Object.assign({}, SVGIcon.propTypes), _temp);
export { IconMoveRight as default };