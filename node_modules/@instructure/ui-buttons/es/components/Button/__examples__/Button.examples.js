/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 - present Instructure, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import React from 'react';
import IconTrash from '@instructure/ui-icons/lib/Solid/IconTrash';
/* eslint-disable instructure-ui/no-relative-package-imports */
import View from '../../../../../ui-layout/lib/components/View';
import Flex, { FlexItem } from '../../../../../ui-layout/lib/components/Flex';
import TextInput from '../../../../../ui-forms/lib/components/TextInput';
import Text from '../../../../../ui-elements/lib/components/Text';
/* eslint-enable instructure-ui/no-relative-package-imports */
import ScreenReaderContent from '@instructure/ui-a11y/lib/components/ScreenReaderContent';
import Button from '../index';

export var sizes = function sizes() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      View,
      { as: 'div', margin: '0 0 large' },
      React.createElement(
        Button,
        { size: 'small', icon: IconTrash, variant: 'icon', margin: '0 small 0 0' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { size: 'small', icon: IconTrash, margin: '0 small 0 0' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { size: 'small', icon: IconTrash, variant: 'circle-danger', margin: '0 small 0 0' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { size: 'small', margin: '0 small 0 0' },
        'Delete'
      ),
      React.createElement(
        Button,
        { size: 'small', icon: IconTrash, margin: '0 small 0 0' },
        'Delete'
      ),
      React.createElement(
        Button,
        { size: 'small', icon: IconTrash, variant: 'link', margin: '0 small 0 0' },
        'Delete'
      ),
      React.createElement(
        Button,
        { margin: 'x-small 0 0', size: 'small', fluidWidth: true },
        'fluidWidth Button'
      )
    ),
    React.createElement(
      View,
      { as: 'div', margin: '0 0 large' },
      React.createElement(
        Button,
        { icon: IconTrash, variant: 'icon', margin: '0 small 0 0' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { icon: IconTrash, margin: '0 small 0 0' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { icon: IconTrash, variant: 'circle-danger', margin: '0 small 0 0' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { margin: '0 small 0 0' },
        'Delete'
      ),
      React.createElement(
        Button,
        { icon: IconTrash, margin: '0 small 0 0' },
        'Delete'
      ),
      React.createElement(
        Button,
        { icon: IconTrash, variant: 'link', margin: '0 small 0 0' },
        'Delete'
      ),
      React.createElement(
        Button,
        { margin: 'x-small 0 0', fluidWidth: true },
        'fluidWidth Button'
      )
    ),
    React.createElement(
      View,
      { as: 'div' },
      React.createElement(
        Button,
        { icon: IconTrash, variant: 'icon', margin: '0 small 0 0', size: 'large' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { icon: IconTrash, margin: '0 small 0 0', size: 'large' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { icon: IconTrash, variant: 'circle-danger', margin: '0 small 0 0', size: 'large' },
        React.createElement(
          ScreenReaderContent,
          null,
          'Delete something'
        )
      ),
      React.createElement(
        Button,
        { margin: '0 small 0 0', size: 'large' },
        'Delete'
      ),
      React.createElement(
        Button,
        { icon: IconTrash, margin: '0 small 0 0', size: 'large' },
        'Delete'
      ),
      React.createElement(
        Button,
        { icon: IconTrash, variant: 'link', margin: '0 small 0 0', size: 'large' },
        'Delete'
      ),
      React.createElement(
        Button,
        { margin: 'x-small 0 0', size: 'large', fluidWidth: true },
        'fluidWidth Button'
      )
    )
  );
};

export var overflow = function overflow() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      Button,
      { margin: '0 0 small 0', icon: IconTrash },
      'Buttons handle overflow with ellipsis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean elementum nunc purus, eu molestie turpis vestibulum eu.'
    ),
    React.createElement(
      Button,
      { fluidWidth: true, icon: IconTrash },
      'fluidWidth Buttons wrap text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean elementum nunc purus, eu molestie turpis vestibulum eu.'
    )
  );
};

export var heightAlignment = function heightAlignment() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      Text,
      { weight: 'bold' },
      'Button height should line up with the height of InstUI form inputs with the same ',
      React.createElement(
        'code',
        null,
        'size'
      ),
      ' property.'
    ),
    React.createElement(
      Flex,
      { margin: 'small 0' },
      React.createElement(
        FlexItem,
        null,
        React.createElement(TextInput, {
          label: React.createElement(
            ScreenReaderContent,
            null,
            'Enter your name'
          ),
          size: 'small'
        })
      ),
      React.createElement(
        FlexItem,
        { padding: '0 0 0 xx-small' },
        React.createElement(
          Button,
          { size: 'small' },
          'Small'
        )
      )
    ),
    React.createElement(
      Flex,
      { margin: '0 0 small' },
      React.createElement(
        FlexItem,
        null,
        React.createElement(TextInput, { label: React.createElement(
            ScreenReaderContent,
            null,
            'Enter your name'
          ) })
      ),
      React.createElement(
        FlexItem,
        { padding: '0 0 0 xx-small' },
        React.createElement(
          Button,
          null,
          'Medium'
        )
      )
    ),
    React.createElement(
      Flex,
      { margin: 'small 0 large' },
      React.createElement(
        FlexItem,
        null,
        React.createElement(TextInput, {
          label: React.createElement(
            ScreenReaderContent,
            null,
            'Enter your name'
          ),
          size: 'large'
        })
      ),
      React.createElement(
        FlexItem,
        { padding: '0 0 0 xx-small' },
        React.createElement(
          Button,
          { size: 'large' },
          'Large'
        )
      )
    ),
    React.createElement(
      Text,
      { weight: 'bold' },
      React.createElement(
        'code',
        null,
        'fluidWidth'
      ),
      ' Buttons should default to the same height as default Buttons with the corresponding ',
      React.createElement(
        'code',
        null,
        'size'
      ),
      ' property.'
    ),
    React.createElement(
      Flex,
      { margin: 'small 0' },
      React.createElement(
        FlexItem,
        null,
        React.createElement(
          Button,
          { fluidWidth: true, size: 'small' },
          'Small fluidWidth'
        )
      ),
      React.createElement(
        FlexItem,
        { padding: '0 0 0 xx-small' },
        React.createElement(
          Button,
          { size: 'small' },
          'Small default'
        )
      )
    ),
    React.createElement(
      Flex,
      { margin: 'small 0' },
      React.createElement(
        FlexItem,
        null,
        React.createElement(
          Button,
          { fluidWidth: true },
          'Medium fluidWidth'
        )
      ),
      React.createElement(
        FlexItem,
        { padding: '0 0 0 xx-small' },
        React.createElement(
          Button,
          null,
          'Medium default'
        )
      )
    ),
    React.createElement(
      Flex,
      null,
      React.createElement(
        FlexItem,
        null,
        React.createElement(
          Button,
          { fluidWidth: true, size: 'large' },
          'Large fluidWidth'
        )
      ),
      React.createElement(
        FlexItem,
        { padding: '0 0 0 xx-small' },
        React.createElement(
          Button,
          { size: 'large' },
          'Large default'
        )
      )
    )
  );
};

export var deprecated = function deprecated() {
  return React.createElement(
    'div',
    null,
    React.createElement(
      Text,
      { weight: 'bold' },
      'Inserting an icon as a child of Button will now produce a warning, but we need to make sure we do not break existing Buttons with icons as children.'
    ),
    React.createElement(
      View,
      { as: 'div', margin: 'small 0 0' },
      React.createElement(
        Button,
        { margin: '0 small 0 0' },
        React.createElement(IconTrash, null),
        'Button label'
      ),
      React.createElement(
        Button,
        { variant: 'icon', margin: '0 small 0 0' },
        React.createElement(IconTrash, null)
      ),
      React.createElement(
        Button,
        { variant: 'circle-primary', margin: '0 small 0 0' },
        React.createElement(IconTrash, null)
      ),
      React.createElement(
        Button,
        { size: 'large', variant: 'circle-danger', margin: '0 small 0 0' },
        React.createElement(IconTrash, null)
      )
    )
  );
};

export var variantDefault = function variantDefault() {
  return React.createElement(
    Button,
    null,
    'Button Label'
  );
};

export var variantDefaultDisabled = function variantDefaultDisabled() {
  return React.createElement(
    Button,
    { disabled: true },
    'Button Label'
  );
};

export var variantDefaultIcon = function variantDefaultIcon() {
  return React.createElement(
    Button,
    { icon: IconTrash },
    'Button Label'
  );
};

export var variantDefaultIconOnly = function variantDefaultIconOnly() {
  return React.createElement(
    Button,
    { icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantPrimary = function variantPrimary() {
  return React.createElement(
    Button,
    { variant: 'primary' },
    'Button Label'
  );
};

export var variantPrimaryDisabled = function variantPrimaryDisabled() {
  return React.createElement(
    Button,
    { variant: 'primary', disabled: true },
    'Button Label'
  );
};

export var variantPrimaryIcon = function variantPrimaryIcon() {
  return React.createElement(
    Button,
    { variant: 'primary', icon: IconTrash },
    'Button Label'
  );
};

export var variantPrimaryIconOnly = function variantPrimaryIconOnly() {
  return React.createElement(
    Button,
    { variant: 'primary', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantSuccess = function variantSuccess() {
  return React.createElement(
    Button,
    { variant: 'success' },
    'Button Label'
  );
};

export var variantSuccessDisabled = function variantSuccessDisabled() {
  return React.createElement(
    Button,
    { variant: 'success', disabled: true },
    'Button Label'
  );
};

export var variantSuccessIcon = function variantSuccessIcon() {
  return React.createElement(
    Button,
    { variant: 'success', icon: IconTrash },
    'Button Label'
  );
};

export var variantSuccessIconOnly = function variantSuccessIconOnly() {
  return React.createElement(
    Button,
    { variant: 'success', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantDanger = function variantDanger() {
  return React.createElement(
    Button,
    { variant: 'danger' },
    'Button Label'
  );
};

export var variantDangerDisabled = function variantDangerDisabled() {
  return React.createElement(
    Button,
    { variant: 'danger', disabled: true },
    'Button Label'
  );
};

export var variantDangerIcon = function variantDangerIcon() {
  return React.createElement(
    Button,
    { variant: 'danger', icon: IconTrash },
    'Button Label'
  );
};

export var variantDangerIconOnly = function variantDangerIconOnly() {
  return React.createElement(
    Button,
    { variant: 'danger', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantLight = function variantLight() {
  return React.createElement(
    Button,
    { variant: 'light' },
    'Button Label'
  );
};

export var variantLightDisabled = function variantLightDisabled() {
  return React.createElement(
    Button,
    { variant: 'light', disabled: true },
    'Button Label'
  );
};

export var variantLightIcon = function variantLightIcon() {
  return React.createElement(
    Button,
    { variant: 'light', icon: IconTrash },
    'Button Label'
  );
};

export var variantLightIconOnly = function variantLightIconOnly() {
  return React.createElement(
    Button,
    { variant: 'light', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantLink = function variantLink() {
  return React.createElement(
    Button,
    { variant: 'link' },
    'Button Label'
  );
};

export var variantLinkDisabled = function variantLinkDisabled() {
  return React.createElement(
    Button,
    { variant: 'link', disabled: true },
    'Button Label'
  );
};

export var variantLinkIcon = function variantLinkIcon() {
  return React.createElement(
    Button,
    { variant: 'link', icon: IconTrash },
    'Button Label'
  );
};

export var variantLinkIconOnly = function variantLinkIconOnly() {
  return React.createElement(
    Button,
    { variant: 'link', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantGhost = function variantGhost() {
  return React.createElement(
    Button,
    { variant: 'ghost' },
    'Button Label'
  );
};

export var variantGhostDisabled = function variantGhostDisabled() {
  return React.createElement(
    Button,
    { variant: 'ghost', disabled: true },
    'Button Label'
  );
};

export var variantGhostIcon = function variantGhostIcon() {
  return React.createElement(
    Button,
    { variant: 'ghost', icon: IconTrash },
    'Button Label'
  );
};

export var variantGhostIconOnly = function variantGhostIconOnly() {
  return React.createElement(
    Button,
    { variant: 'ghost', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantIcon = function variantIcon() {
  return React.createElement(
    Button,
    { variant: 'icon', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantIconDisabled = function variantIconDisabled() {
  return React.createElement(
    Button,
    { disabled: true, variant: 'icon', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantCircleDefault = function variantCircleDefault() {
  return React.createElement(
    Button,
    { variant: 'circle-default', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantCircleDefaultDisabled = function variantCircleDefaultDisabled() {
  return React.createElement(
    Button,
    { disabled: true, variant: 'circle-default', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantCirclePrimary = function variantCirclePrimary() {
  return React.createElement(
    Button,
    { variant: 'circle-primary', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantCirclePrimaryDisabled = function variantCirclePrimaryDisabled() {
  return React.createElement(
    Button,
    { disabled: true, variant: 'circle-primary', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantCircleDanger = function variantCircleDanger() {
  return React.createElement(
    Button,
    { variant: 'circle-danger', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};

export var variantCircleDangerDisabled = function variantCircleDangerDisabled() {
  return React.createElement(
    Button,
    { disabled: true, variant: 'circle-danger', icon: IconTrash },
    React.createElement(
      ScreenReaderContent,
      null,
      'Button Label'
    )
  );
};